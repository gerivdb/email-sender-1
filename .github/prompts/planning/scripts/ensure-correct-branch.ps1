# Script de gestion des branches
# ensure-correct-branch.ps1

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$TargetBranch,
    
    [string]$TaskType = "plan-dev-v55",
    [switch]$CreateIfNotExists = $true,
    [switch]$Force = $false
)

Write-Host "üîÑ V√âRIFICATION ET GESTION DES BRANCHES" -ForegroundColor Cyan

# Obtenir branche actuelle
$currentBranch = git branch --show-current
Write-Host "üìç Branche actuelle: $currentBranch" -ForegroundColor White

# V√©rifier si on est d√©j√† sur la bonne branche
if ($currentBranch -eq $TargetBranch) {
    Write-Host "‚úÖ D√©j√† sur la branche correcte: $TargetBranch" -ForegroundColor Green
    return
}

Write-Host "üéØ Branche cible: $TargetBranch" -ForegroundColor Yellow
Write-Host "üìù Type de t√¢che: $TaskType" -ForegroundColor Gray

# V√©rifier l'√©tat du workspace
$gitStatus = git status --porcelain
if ($gitStatus -and -not $Force) {
    Write-Host "‚ö†Ô∏è ATTENTION: Modifications non commit√©es d√©tect√©es!" -ForegroundColor Red
    Write-Host ""
    git status --short
    Write-Host ""
    
    $response = Read-Host "Continuer quand m√™me? Les modifications pourraient √™tre perdues [y/N]"
    if ($response -ne 'y' -and $response -ne 'Y') {
        Write-Host "‚ùå Op√©ration annul√©e - Commitez vos modifications d'abord" -ForegroundColor Red
        Write-Host "üí° Utilisez: git add . && git commit -m 'WIP: temporary commit'" -ForegroundColor Cyan
        exit 1
    }
}

# V√©rifier si la branche cible existe localement
$localBranches = git branch --list $TargetBranch
$branchExists = $localBranches -ne $null -and $localBranches.Count -gt 0

Write-Host "üîç V√©rification existence branche locale..." -ForegroundColor Gray

if ($branchExists) {
    Write-Host "‚úÖ Branche existe localement: $TargetBranch" -ForegroundColor Green
    
    # Basculer vers la branche existante
    Write-Host "üîÑ Basculement vers: $TargetBranch..." -ForegroundColor Yellow
    git checkout $TargetBranch
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Basculement r√©ussi vers: $TargetBranch" -ForegroundColor Green
        
        # V√©rifier si on peut faire un pull
        Write-Host "üì° V√©rification mises √† jour distantes..." -ForegroundColor Gray
        git fetch origin $TargetBranch 2>$null
        
        $behind = git rev-list --count HEAD..origin/$TargetBranch 2>$null
        if ($behind -and $behind -gt 0) {
            Write-Host "üì• $behind commits en retard - Mise √† jour recommand√©e" -ForegroundColor Yellow
            $pullResponse = Read-Host "Effectuer git pull? [Y/n]"
            
            if ($pullResponse -ne 'n' -and $pullResponse -ne 'N') {
                git pull origin $TargetBranch
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ Branche mise √† jour avec succ√®s" -ForegroundColor Green
                } else {
                    Write-Host "‚ö†Ô∏è Probl√®me lors de la mise √† jour - continuez manuellement" -ForegroundColor Yellow
                }
            }
        } else {
            Write-Host "‚úÖ Branche √† jour" -ForegroundColor Green
        }
        
    } else {
        Write-Host "‚ùå √âchec du basculement vers: $TargetBranch" -ForegroundColor Red
        exit 1
    }
    
} else {
    Write-Host "üìù Branche n'existe pas localement: $TargetBranch" -ForegroundColor Yellow
    
    if ($CreateIfNotExists) {
        # V√©rifier si la branche existe sur le remote
        Write-Host "üîç V√©rification branche distante..." -ForegroundColor Gray
        git fetch origin 2>$null
        
        $remoteBranches = git branch -r --list "origin/$TargetBranch"
        $remoteExists = $remoteBranches -ne $null -and $remoteBranches.Count -gt 0
        
        if ($remoteExists) {
            Write-Host "üì° Branche trouv√©e sur remote - Cr√©ation locale..." -ForegroundColor Yellow
            git checkout -b $TargetBranch origin/$TargetBranch
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Branche cr√©√©e et configur√©e depuis remote" -ForegroundColor Green
            } else {
                Write-Host "‚ùå √âchec cr√©ation branche depuis remote" -ForegroundColor Red
                exit 1
            }
            
        } else {
            Write-Host "üÜï Cr√©ation nouvelle branche: $TargetBranch..." -ForegroundColor Yellow
            
            # Demander confirmation pour nouvelle branche
            if (-not $Force) {
                Write-Host "‚ö†Ô∏è Cette branche n'existe nulle part - elle sera cr√©√©e" -ForegroundColor Yellow
                $createResponse = Read-Host "Cr√©er la nouvelle branche $TargetBranch? [Y/n]"
                
                if ($createResponse -eq 'n' -or $createResponse -eq 'N') {
                    Write-Host "‚ùå Cr√©ation de branche annul√©e" -ForegroundColor Red
                    exit 1
                }
            }
            
            git checkout -b $TargetBranch
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Nouvelle branche cr√©√©e: $TargetBranch" -ForegroundColor Green
                
                # Optionnel: push de la nouvelle branche
                $pushResponse = Read-Host "Pousser la nouvelle branche vers remote? [Y/n]"
                if ($pushResponse -ne 'n' -and $pushResponse -ne 'N') {
                    git push -u origin $TargetBranch
                    
                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "‚úÖ Branche pouss√©e vers remote avec tracking" -ForegroundColor Green
                    } else {
                        Write-Host "‚ö†Ô∏è √âchec push - la branche existe localement" -ForegroundColor Yellow
                    }
                }
                
            } else {
                Write-Host "‚ùå √âchec cr√©ation nouvelle branche" -ForegroundColor Red
                exit 1
            }
        }
        
    } else {
        Write-Host "‚ùå Branche n'existe pas et cr√©ation non autoris√©e" -ForegroundColor Red
        Write-Host "üí° Utilisez -CreateIfNotExists pour cr√©er automatiquement" -ForegroundColor Cyan
        exit 1
    }
}

# V√©rification finale
$finalBranch = git branch --show-current
Write-Host ""
Write-Host "üéâ OP√âRATION TERMIN√âE" -ForegroundColor Green
Write-Host "üìç Branche active: $finalBranch" -ForegroundColor Cyan
Write-Host "üéØ Branche attendue: $TargetBranch" -ForegroundColor Cyan

if ($finalBranch -eq $TargetBranch) {
    Write-Host "‚úÖ SUCC√àS: Vous √™tes maintenant sur la bonne branche!" -ForegroundColor Green
} else {
    Write-Host "‚ùå PROBL√àME: Branche actuelle ne correspond pas √† la cible" -ForegroundColor Red
    exit 1
}