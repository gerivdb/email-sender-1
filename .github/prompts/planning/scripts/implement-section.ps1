# Script principal d'impl√©mentation par section
# implement-section.ps1

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$Section,
    
    [Parameter(Mandatory=$true)]
    [string]$TaskId,
    
    [string]$Description = "",
    [string]$Phase = "",
    [string]$PlanFile = "projet\roadmaps\plans\consolidated\plan-dev-v55-planning-ecosystem-sync.md",
    [string]$Branch = "planning-ecosystem-sync",
    [switch]$ValidateUntracked,
    [switch]$AutoCommit,
    [switch]$UpdateProgress,
    [switch]$SkipTests,
    [switch]$DryRun
)

# Variables globales
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent (Split-Path -Parent (Split-Path -Parent $ScriptDir))

Write-Host "üöÄ IMPL√âMENTATION M√âTHODIQUE - PLAN-DEV-V55" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "üìã Section: $Section" -ForegroundColor White
Write-Host "üéØ T√¢che: $TaskId" -ForegroundColor White
Write-Host "üìù Description: $Description" -ForegroundColor White
Write-Host "üåø Branche cible: $Branch" -ForegroundColor White
if ($DryRun) { Write-Host "üß™ MODE DRY RUN activ√©" -ForegroundColor Magenta }

# D√©finir variables d'environnement pour les autres scripts
$env:TASK_TYPE = "plan-dev-v55"
$env:SECTION = $Section
$env:TASK_ID = $TaskId
$env:DESCRIPTION = $Description
$env:PHASE = $Phase

# ==============================================================================
# PHASE 1: V√âRIFICATIONS PR√â-IMPL√âMENTATION
# ==============================================================================

Write-Host "`n" + "="*60 -ForegroundColor Yellow
Write-Host "üîç PHASE 1: V√âRIFICATIONS PR√â-IMPL√âMENTATION" -ForegroundColor Yellow
Write-Host "="*60 -ForegroundColor Yellow

# 1.1 V√©rifier existence du plan
Write-Host "`nüìã V√©rification du plan de d√©veloppement..." -ForegroundColor Gray
$planPath = Join-Path $ProjectRoot $PlanFile

if (-not (Test-Path $planPath)) {
    Write-Host "‚ùå Plan non trouv√©: $planPath" -ForegroundColor Red
    exit 1
}

$planLastModified = (Get-Item $planPath).LastWriteTime
Write-Host "‚úÖ Plan trouv√© - Derni√®re modification: $planLastModified" -ForegroundColor Green

# 1.2 Gestion des fichiers non suivis
if ($ValidateUntracked) {
    Write-Host "`nüìÅ Gestion des fichiers non suivis..." -ForegroundColor Gray
    
    $untrackedScript = Join-Path $ScriptDir "handle-untracked-files.ps1"
    if (Test-Path $untrackedScript) {
        & $untrackedScript -AutoCommit:$AutoCommit -DryRun:$DryRun
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå √âchec de la gestion des fichiers non suivis" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ö†Ô∏è Script de gestion des fichiers non suivis non trouv√©" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚è≠Ô∏è Validation fichiers non suivis ignor√©e" -ForegroundColor Gray
}

# 1.3 V√©rification/basculement de branche
Write-Host "`nüåø Gestion des branches..." -ForegroundColor Gray

$branchScript = Join-Path $ScriptDir "ensure-correct-branch.ps1"
if (Test-Path $branchScript) {
    & $branchScript -TargetBranch $Branch -TaskType "plan-dev-v55" -CreateIfNotExists
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec de la gestion des branches" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ö†Ô∏è Script de gestion des branches non trouv√©" -ForegroundColor Yellow
    Write-Host "üìù V√©rification manuelle de la branche..." -ForegroundColor Gray
    
    $currentBranch = git branch --show-current
    if ($currentBranch -ne $Branch) {
        Write-Host "‚ö†Ô∏è Branche incorrecte: $currentBranch (attendu: $Branch)" -ForegroundColor Yellow
        $switchBranch = Read-Host "Basculer vers $Branch? [Y/n]"
        
        if ($switchBranch -ne 'n' -and $switchBranch -ne 'N') {
            git checkout $Branch
            if ($LASTEXITCODE -ne 0) {
                git checkout -b $Branch
                if ($LASTEXITCODE -ne 0) {
                    Write-Host "‚ùå Impossible de basculer vers $Branch" -ForegroundColor Red
                    exit 1
                }
            }
        }
    }
}

# 1.4 V√©rification environnement technique
Write-Host "`nüîß V√©rification environnement technique..." -ForegroundColor Gray

# Go
$goVersion = go version 2>$null
if ($goVersion) {
    Write-Host "‚úÖ Go: $goVersion" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Go non disponible" -ForegroundColor Yellow
}

# Git
$gitVersion = git version 2>$null
if ($gitVersion) {
    Write-Host "‚úÖ Git: $gitVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Git non disponible - CRITIQUE" -ForegroundColor Red
    exit 1
}

# PowerShell
Write-Host "‚úÖ PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Green

Write-Host "`n‚úÖ PHASE 1 TERMIN√âE - Pr√™t pour l'impl√©mentation" -ForegroundColor Green

# ==============================================================================
# PHASE 2: IMPL√âMENTATION GUID√âE
# ==============================================================================

Write-Host "`n" + "="*60 -ForegroundColor Yellow
Write-Host "üõ†Ô∏è PHASE 2: IMPL√âMENTATION GUID√âE" -ForegroundColor Yellow
Write-Host "="*60 -ForegroundColor Yellow

# Afficher les d√©tails de la t√¢che depuis le plan
Write-Host "`nüìñ D√©tails de la t√¢che depuis le plan:" -ForegroundColor Cyan

try {
    $planContent = Get-Content $planPath -Raw -Encoding UTF8
    
    # Rechercher la t√¢che sp√©cifique
    $taskPattern = "Micro-√©tape $([regex]::Escape($TaskId)):.*?(?=Micro-√©tape|\z)"
    $taskMatch = [regex]::Match($planContent, $taskPattern, [System.Text.RegularExpressions.RegexOptions]::Singleline)
    
    if ($taskMatch.Success) {
        $taskContent = $taskMatch.Value
        # Limiter l'affichage aux 15 premi√®res lignes pour √©viter l'overflow
        $taskLines = $taskContent -split "`n" | Select-Object -First 15
        
        Write-Host "‚îå‚îÄ Extrait du plan ‚îÄ‚îê" -ForegroundColor Gray
        foreach ($line in $taskLines) {
            Write-Host "‚îÇ $line" -ForegroundColor White
        }
        if ($taskContent -split "`n" | Measure-Object | Select-Object -ExpandProperty Count -gt 15) {
            Write-Host "‚îÇ ... (contenu tronqu√©)" -ForegroundColor Gray
        }
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
    } else {
        Write-Host "‚ö†Ô∏è T√¢che $TaskId non trouv√©e dans le plan" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de lire le contenu du plan: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Guide d'impl√©mentation
Write-Host "`nüìã GUIDE D'IMPL√âMENTATION:" -ForegroundColor Cyan
Write-Host ""
Write-Host "1. üìÅ Cr√©ez/modifiez les fichiers n√©cessaires selon les sp√©cifications" -ForegroundColor White
Write-Host "2. üß™ Ajoutez les tests unitaires appropri√©s" -ForegroundColor White
Write-Host "3. üìù Mettez √† jour la documentation inline" -ForegroundColor White
Write-Host "4. ‚úÖ V√©rifiez que le code compile et les tests passent" -ForegroundColor White
Write-Host "5. üîç Effectuez une review rapide de votre code" -ForegroundColor White

# Recommandations sp√©cifiques selon la section
Write-Host "`nüí° RECOMMANDATIONS SP√âCIFIQUES:" -ForegroundColor Cyan

switch -Regex ($Section) {
    "sync-tools|migration" {
        Write-Host "‚Ä¢ Utilisez les interfaces ToolkitOperation v3.0.0" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Impl√©mentez String(), GetDescription(), Stop()" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Ajoutez la gestion d'erreurs appropri√©e" -ForegroundColor Yellow
    }
    "validation" {
        Write-Host "‚Ä¢ Respectez les patterns de validation existants" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Testez avec des donn√©es invalides" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Documentez les r√®gles de validation" -ForegroundColor Yellow
    }
    "testing" {
        Write-Host "‚Ä¢ Visez une couverture > 80%" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Incluez tests positifs et n√©gatifs" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Testez les cas limites" -ForegroundColor Yellow
    }
    "documentation" {
        Write-Host "‚Ä¢ Utilisez un langage clair et concis" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Ajoutez des exemples pratiques" -ForegroundColor Yellow
        Write-Host "‚Ä¢ V√©rifiez la coh√©rence avec docs existantes" -ForegroundColor Yellow
    }
    default {
        Write-Host "‚Ä¢ Suivez les conventions du projet" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Documentez les APIs publiques" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Testez l'int√©gration avec composants existants" -ForegroundColor Yellow
    }
}

if ($DryRun) {
    Write-Host "`nüß™ MODE DRY RUN - Phase d'impl√©mentation simul√©e" -ForegroundColor Magenta
} else {
    Write-Host "`n‚è≥ IMPL√âMENTATION EN COURS..." -ForegroundColor Yellow
    Write-Host "Appuyez sur [Entr√©e] quand l'impl√©mentation est termin√©e..."
    Read-Host
}

Write-Host "‚úÖ PHASE 2 TERMIN√âE - Impl√©mentation effectu√©e" -ForegroundColor Green

# ==============================================================================
# PHASE 3: POST-IMPL√âMENTATION
# ==============================================================================

Write-Host "`n" + "="*60 -ForegroundColor Yellow
Write-Host "‚úÖ PHASE 3: POST-IMPL√âMENTATION" -ForegroundColor Yellow
Write-Host "="*60 -ForegroundColor Yellow

# 3.1 Tests automatiques
if (-not $SkipTests) {
    Write-Host "`nüß™ Validation technique..." -ForegroundColor Gray
    
    # Tests Go si disponible
    $goAvailable = Get-Command "go" -ErrorAction SilentlyContinue
    if ($goAvailable) {
        Write-Host "üìã Ex√©cution des tests Go..." -ForegroundColor Yellow
        
        if ($DryRun) {
            Write-Host "[DRY RUN] go test ./... -v -short" -ForegroundColor Magenta
        } else {
            go test ./... -v -short
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Tests Go: TOUS PASS√âS" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è Tests Go: √âCHECS d√©tect√©s" -ForegroundColor Yellow
                $continueAnyway = Read-Host "Continuer malgr√© les √©checs? [y/N]"
                if ($continueAnyway -ne 'y' -and $continueAnyway -ne 'Y') {
                    Write-Host "‚ùå Arr√™t - Corrigez les tests d'abord" -ForegroundColor Red
                    exit 1
                }
            }
        }
    }
} else {
    Write-Host "‚è≠Ô∏è Tests ignor√©s (SkipTests activ√©)" -ForegroundColor Gray
}

# 3.2 Commit automatique
if ($AutoCommit) {
    Write-Host "`nüì¶ Commit automatique..." -ForegroundColor Gray
    
    $commitScript = Join-Path $ScriptDir "commit-completed-task.ps1"
    if (Test-Path $commitScript) {
        $commitArgs = @{
            TaskId = $TaskId
            Section = $Section
            Description = $Description
            Phase = $Phase
            SkipTests = $SkipTests
            DryRun = $DryRun
        }
        
        & $commitScript @commitArgs
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è Probl√®me lors du commit automatique" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è Script de commit non trouv√© - commit manuel requis" -ForegroundColor Yellow
    }
} else {
    Write-Host "üìù Commit manuel requis" -ForegroundColor Yellow
    Write-Host "üí° Utilisez: git add . && git commit -m 'feat($Section): complete $TaskId'" -ForegroundColor Cyan
}

# 3.3 Mise √† jour du plan
if ($UpdateProgress) {
    Write-Host "`nüìä Mise √† jour progression du plan..." -ForegroundColor Gray
    
    # Script de mise √† jour (simplifi√© ici)
    if ($DryRun) {
        Write-Host "[DRY RUN] Mise √† jour case √† cocher pour t√¢che $TaskId" -ForegroundColor Magenta
    } else {
        try {
            $planContent = Get-Content $planPath -Raw -Encoding UTF8
            
            # Marquer la t√¢che comme termin√©e
            $taskPattern = "- \[ \] (.*$([regex]::Escape($TaskId)).*)"
            $replacement = "- [x] `$1"
            
            if ($planContent -match $taskPattern) {
                $planContent = $planContent -replace $taskPattern, $replacement
                Set-Content -Path $planPath -Value $planContent -Encoding UTF8
                
                Write-Host "‚úÖ T√¢che $TaskId marqu√©e comme termin√©e dans le plan" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è T√¢che $TaskId non trouv√©e pour mise √† jour" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Erreur lors de la mise √† jour: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
} else {
    Write-Host "üìù Mise √† jour manuelle du plan requise" -ForegroundColor Yellow
}

# ==============================================================================
# R√âSUM√â FINAL
# ==============================================================================

Write-Host "`n" + "="*60 -ForegroundColor Green
Write-Host "üéâ IMPL√âMENTATION TERMIN√âE AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "="*60 -ForegroundColor Green

Write-Host "`nüìä R√âSUM√â DE L'OP√âRATION:" -ForegroundColor Cyan
Write-Host "‚Ä¢ T√¢che: $TaskId" -ForegroundColor White
Write-Host "‚Ä¢ Section: $Section" -ForegroundColor White
Write-Host "‚Ä¢ Description: $Description" -ForegroundColor White
Write-Host "‚Ä¢ Branche: $(git branch --show-current)" -ForegroundColor White
Write-Host "‚Ä¢ Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor White

if ($DryRun) {
    Write-Host "‚Ä¢ Mode: DRY RUN (aucune modification r√©elle)" -ForegroundColor Magenta
}

Write-Host "`nüéØ PROCHAINES √âTAPES:" -ForegroundColor Cyan
Write-Host "1. V√©rifiez que tout fonctionne comme attendu" -ForegroundColor White
Write-Host "2. Effectuez une review de code si n√©cessaire" -ForegroundColor White
Write-Host "3. Passez √† la t√¢che suivante du plan" -ForegroundColor White
Write-Host "4. Mettez √† jour la documentation projet si applicable" -ForegroundColor White

Write-Host "`nüîó LIENS UTILES:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Plan: $PlanFile" -ForegroundColor Blue
Write-Host "‚Ä¢ Branche: $(git branch --show-current)" -ForegroundColor Blue
Write-Host "‚Ä¢ Dernier commit: $(git log -1 --oneline 2>$null)" -ForegroundColor Blue

Write-Host "`nüåü Excellente progression sur le plan-dev-v55!" -ForegroundColor Green