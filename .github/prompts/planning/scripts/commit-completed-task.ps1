# Script de commit de t√¢che termin√©e
# commit-completed-task.ps1

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$TaskId,
    
    [Parameter(Mandatory=$true)]
    [string]$Section,
    
    [string]$Description = "",
    [string[]]$Details = @(),
    [string]$Phase = "",
    [switch]$SkipTests = $false,
    [switch]$DryRun = $false
)

Write-Host "‚úÖ COMMIT DE T√ÇCHE TERMIN√âE" -ForegroundColor Green

# Validation des param√®tres
if (-not $TaskId -or -not $Section) {
    Write-Error "‚ùå TaskId et Section sont obligatoires"
    exit 1
}

Write-Host "üéØ T√¢che: $TaskId" -ForegroundColor Cyan
Write-Host "üìÇ Section: $Section" -ForegroundColor Cyan
if ($Description) { Write-Host "üìù Description: $Description" -ForegroundColor White }
if ($Phase) { Write-Host "üìä Phase: $Phase" -ForegroundColor White }

# V√©rifier l'√©tat du workspace
Write-Host "`nüîç V√©rification √©tat du workspace..." -ForegroundColor Yellow
$gitStatus = git status --porcelain

if (-not $gitStatus) {
    Write-Host "‚ö†Ô∏è Aucune modification d√©tect√©e - Rien √† committer" -ForegroundColor Yellow
    $forceCommit = Read-Host "Cr√©er un commit vide? [y/N]"
    if ($forceCommit -ne 'y' -and $forceCommit -ne 'Y') {
        Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
        exit 0
    }
    $allowEmpty = $true
} else {
    $allowEmpty = $false
    Write-Host "üìã Modifications d√©tect√©es:" -ForegroundColor Green
    git status --short
}

# Tests automatiques (si non ignor√©s)
if (-not $SkipTests) {
    Write-Host "`nüß™ Ex√©cution des tests..." -ForegroundColor Yellow
    
    # V√©rifier si Go est disponible
    $goAvailable = Get-Command "go" -ErrorAction SilentlyContinue
    if ($goAvailable) {
        # Tests Go
        Write-Host "  üîß Tests Go..." -ForegroundColor Gray
        go test ./... -short 2>$null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "  ‚úÖ Tests Go: PASS√âS" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è Tests Go: √âCHECS d√©tect√©s" -ForegroundColor Yellow
            $continueAnyway = Read-Host "Continuer malgr√© les √©checs de tests? [y/N]"
            if ($continueAnyway -ne 'y' -and $continueAnyway -ne 'Y') {
                Write-Host "‚ùå Commit annul√© - Corrigez les tests d'abord" -ForegroundColor Red
                exit 1
            }
        }
        
        # Linting (si disponible)
        $lintAvailable = Get-Command "golangci-lint" -ErrorAction SilentlyContinue
        if ($lintAvailable) {
            Write-Host "  üîß Linting..." -ForegroundColor Gray
            golangci-lint run --fast 2>$null
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "  ‚úÖ Linting: PROPRE" -ForegroundColor Green
            } else {
                Write-Host "  ‚ö†Ô∏è Linting: Probl√®mes d√©tect√©s" -ForegroundColor Yellow
            }
        }
    } else {
        Write-Host "  ‚ÑπÔ∏è Go non disponible - Tests ignor√©s" -ForegroundColor Gray
    }
} else {
    Write-Host "‚è≠Ô∏è Tests ignor√©s (SkipTests activ√©)" -ForegroundColor Gray
}

# Construction du message de commit
Write-Host "`nüìù Construction du message de commit..." -ForegroundColor Yellow

$commitType = "feat"  # Par d√©faut pour les nouvelles fonctionnalit√©s
$scope = $Section

# D√©tails par d√©faut si non fournis
if ($Details.Count -eq 0) {
    $Details = @(
        "Impl√©mentation termin√©e",
        "Code test√© et valid√©",
        "Documentation mise √† jour"
    )
}

# Construction du message structur√©
$commitMessage = @"
$commitType($scope): complete $TaskId - $Description

$(foreach ($detail in $Details) { "- ‚úÖ $detail" }) | Out-String
Refs: plan-dev-v55-planning-ecosystem-sync.md$(if ($Phase) { "#phase-$Phase" })
"@

# Nettoyer le message (enlever lignes vides en trop)
$commitMessage = $commitMessage -replace '\n\s*\n', "`n"
$commitMessage = $commitMessage.Trim()

Write-Host "`nüìÑ MESSAGE DE COMMIT:" -ForegroundColor Cyan
Write-Host "----------------------------------------" -ForegroundColor Gray
Write-Host $commitMessage -ForegroundColor White
Write-Host "----------------------------------------" -ForegroundColor Gray

if ($DryRun) {
    Write-Host "`nüß™ MODE DRY RUN - Aucun commit effectu√©" -ForegroundColor Magenta
    Write-Host "Commande qui serait ex√©cut√©e:" -ForegroundColor Gray
    if ($allowEmpty) {
        Write-Host "git commit --allow-empty -m `"$commitMessage`"" -ForegroundColor Gray
    } else {
        Write-Host "git add . && git commit -m `"$commitMessage`"" -ForegroundColor Gray
    }
    exit 0
}

# Confirmation utilisateur
Write-Host ""
$confirmation = Read-Host "Proc√©der au commit? [Y/n]"
if ($confirmation -eq 'n' -or $confirmation -eq 'N') {
    Write-Host "‚ùå Commit annul√© par l'utilisateur" -ForegroundColor Red
    exit 0
}

# Ajout des fichiers (si n√©cessaire)
if (-not $allowEmpty) {
    Write-Host "`nüì¶ Ajout des fichiers..." -ForegroundColor Yellow
    git add .
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec de l'ajout des fichiers" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Fichiers ajout√©s √† l'index" -ForegroundColor Green
}

# Ex√©cution du commit
Write-Host "`nüöÄ Cr√©ation du commit..." -ForegroundColor Yellow

if ($allowEmpty) {
    git commit --allow-empty -m $commitMessage
} else {
    git commit -m $commitMessage
}

if ($LASTEXITCODE -eq 0) {
    # R√©cup√©ration des informations du commit
    $lastCommit = git log -1 --oneline
    $commitHash = git rev-parse --short HEAD
    $currentBranch = git branch --show-current
    
    Write-Host "`nüéâ COMMIT CR√â√â AVEC SUCC√àS!" -ForegroundColor Green
    Write-Host "üìù Commit: $lastCommit" -ForegroundColor Cyan
    Write-Host "üîó Hash: $commitHash" -ForegroundColor Cyan
    Write-Host "üåø Branche: $currentBranch" -ForegroundColor Cyan
    
    # Proposition de push
    Write-Host ""
    $pushNow = Read-Host "Pousser vers remote maintenant? [Y/n]"
    if ($pushNow -ne 'n' -and $pushNow -ne 'N') {
        Write-Host "üì° Push vers remote..." -ForegroundColor Yellow
        git push origin $currentBranch
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Push r√©ussi!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è √âchec du push - Faites-le manuellement plus tard" -ForegroundColor Yellow
        }
    }
    
    # R√©sum√© final
    Write-Host "`nüìä R√âSUM√â:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ T√¢che: $TaskId" -ForegroundColor White
    Write-Host "  ‚Ä¢ Section: $Section" -ForegroundColor White
    Write-Host "  ‚Ä¢ Commit: $commitHash" -ForegroundColor White
    Write-Host "  ‚Ä¢ Branche: $currentBranch" -ForegroundColor White
    
} else {
    Write-Host "‚ùå √âCHEC DE LA CR√âATION DU COMMIT" -ForegroundColor Red
    Write-Host "V√©rifiez les erreurs Git ci-dessus" -ForegroundColor Yellow
    exit 1
}