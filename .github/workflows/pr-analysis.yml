jobs:
  analyze:
    name: Analyze PR Changes
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install PSScriptAnalyzer
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        shell: pwsh
      - id: changed-files
        name: Get changed files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            **/*.ps1
            **/*.psm1
            **/*.psd1
      - if: steps.changed-files.outputs.any_changed == 'true'
        name: Analyze changed PowerShell files
        run: "$changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.Split(' ')\n$results = @()\n\nforeach ($file in $changedFiles) {\n  if ($file -match '\\.(ps1|psm1|psd1)$') {\n    Write-Host \"Analyzing $file...\"\n    $fileResults = Invoke-ScriptAnalyzer -Path $file -ExcludeRule PSAvoidUsingPlainTextForPassword,PSAvoidUsingConvertToSecureStringWithPlainText\n    $results += $fileResults\n  }\n}\n\n$results | Format-Table -AutoSize\n$results | ConvertTo-Json -Depth 5 | Out-File -FilePath pr-analysis-results.json\n\n# Générer un rapport Markdown pour le commentaire de PR\n$reportMd = \"## Analyse de code PowerShell`n`n\"\n\n$errorCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count\n$warningCount = ($results | Where-Object { $_.Severity -eq 'Warning' }).Count\n$infoCount = ($results | Where-Object { $_.Severity -eq 'Information' }).Count\n\n$reportMd += \"- :x: Erreurs: $errorCount`n\"\n$reportMd += \"- :warning: Avertissements: $warningCount`n\"\n$reportMd += \"- :information_source: Informations: $infoCount`n`n\"\n\nif ($results.Count -gt 0) {\n  $reportMd += \"### Détails`n`n\"\n  $reportMd += \"| Fichier | Ligne | Sévérité | Règle | Message |`n\"\n  $reportMd += \"| --- | --- | --- | --- | --- |`n\"\n  \n  foreach ($result in $results) {\n    $severity = switch ($result.Severity) {\n      'Error' { ':x:' }\n      'Warning' { ':warning:' }\n      'Information' { ':information_source:' }\n      default { '' }\n    }\n    \n    $reportMd += \"| $($result.ScriptPath) | $($result.Line) | $severity | $($result.RuleName) | $($result.Message) |`n\"\n  }\n} else {\n  $reportMd += \"Aucun problème détecté. :tada:`n\"\n}\n\n$reportMd | Out-File -FilePath pr-analysis-report.md -Encoding utf8\n"
        shell: pwsh
      - if: steps.changed-files.outputs.any_changed == 'true'
        name: Run Custom Error Analysis
        run: "# Charger les scripts d'analyse personnalisés\n$scriptPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath \"ErrorManagement/AnalysisImprovements/EnhancedErrorPatterns.ps1\"\nif (Test-Path -Path $scriptPath) {\n  . $scriptPath\n  \n  $changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.Split(' ')\n  $results = @()\n  \n  foreach ($file in $changedFiles) {\n    if ($file -match '\\.(ps1|psm1|psd1)$') {\n      Write-Host \"Analyzing $file with custom patterns...\"\n      $fileResults = Find-ErrorPatterns -FilePath $file\n      $results += $fileResults\n    }\n  }\n  \n  # Ajouter les résultats personnalisés au rapport\n  $reportMd = Get-Content -Path pr-analysis-report.md -Raw\n  \n  if ($results.Count -gt 0) {\n    $reportMd += \"`n## Analyse personnalisée`n`n\"\n    \n    $errorCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count\n    $warningCount = ($results | Where-Object { $_.Severity -eq 'Warning' }).Count\n    $infoCount = ($results | Where-Object { $_.Severity -eq 'Info' }).Count\n    \n    $reportMd += \"- :x: Erreurs: $errorCount`n\"\n    $reportMd += \"- :warning: Avertissements: $warningCount`n\"\n    $reportMd += \"- :information_source: Informations: $infoCount`n`n\"\n    \n    $reportMd += \"### Détails`n`n\"\n    $reportMd += \"| Fichier | Ligne | Sévérité | Catégorie | Description | Suggestion |`n\"\n    $reportMd += \"| --- | --- | --- | --- | --- | --- |`n\"\n    \n    foreach ($result in $results) {\n      $severity = switch ($result.Severity) {\n        'Error' { ':x:' }\n        'Warning' { ':warning:' }\n        'Info' { ':information_source:' }\n        default { '' }\n      }\n      \n      $reportMd += \"| $($result.FilePath) | $($result.LineNumber) | $severity | $($result.Category) | $($result.Description) | $($result.Suggestion) |`n\"\n    }\n  }\n  \n  $reportMd | Out-File -FilePath pr-analysis-report.md -Encoding utf8\n}\n"
        shell: pwsh
      - if: steps.changed-files.outputs.any_changed == 'true'
        name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-results
          path: |
            pr-analysis-results.json
            pr-analysis-report.md
      - if: steps.changed-files.outputs.any_changed == 'true'
        name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('pr-analysis-report.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Analyse de code PowerShell');
            });

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reportContent
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportContent
              });
            }
name: Pull Request Analysis
"on":
  pull_request:
    branches:
      - main
      - master
    types:
      - opened
      - synchronize
      - reopened
