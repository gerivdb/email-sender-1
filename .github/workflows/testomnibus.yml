name: TestOmnibus CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'development/scripts/utils/ProactiveOptimization/**'
      - 'development/scripts/utils/TestOmnibus/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'development/scripts/utils/ProactiveOptimization/**'
      - 'development/scripts/utils/TestOmnibus/**'
  schedule:
    # Exécuter tous les jours à minuit
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
      
      - name: Run TestOmnibus
        shell: pwsh
        run: |
          cd development/scripts/utils/TestOmnibus
          $results = ./Run-ProactiveOptimizationTests.ps1
          
          # Afficher les résultats
          Write-Host "Tests exécutés : $($results.TotalCount)"
          Write-Host "Tests réussis  : $($results.PassedCount)"
          Write-Host "Tests échoués  : $($results.FailedCount)"
          
          # Échouer le workflow si des tests ont échoué
          if ($results.FailedCount -gt 0) {
            Write-Host "::error::$($results.FailedCount) tests ont échoué."
            exit 1
          }
      
      - name: Generate Code Coverage Report
        shell: pwsh
        run: |
          cd development/scripts/utils/TestOmnibus
          $coveragePath = Join-Path -Path $env:TEMP -ChildPath "TestOmnibus\Results\coverage.xml"
          if (Test-Path -Path $coveragePath) {
            ./Generate-CodeCoverageReport.ps1 -CoveragePath $coveragePath -OutputPath "./coverage_report.html"
          } else {
            Write-Warning "Fichier de couverture non trouvé: $coveragePath"
          }
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ${{ runner.temp }}/TestOmnibus/Results/results.xml
            ${{ runner.temp }}/TestOmnibus/Results/report.html
            development/scripts/utils/TestOmnibus/coverage_report.html
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: ${{ runner.temp }}/TestOmnibus/Results/results.xml
      
      - name: Publish Code Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ runner.temp }}/TestOmnibus/Results/coverage.xml
          flags: powershell
          name: testomnibus-coverage
          fail_ci_if_error: true
  
  deploy:
    name: Deploy
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Deploy to Production
        shell: pwsh
        run: |
          Write-Host "Déploiement en production..."
          # Ajouter ici les commandes de déploiement
          Write-Host "Déploiement terminé avec succès."
      
      - name: Send Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "TestOmnibus CI/CD: Déploiement réussi"
          body: |
            Le déploiement de TestOmnibus a été effectué avec succès.
            
            Commit: ${{ github.sha }}
            Auteur: ${{ github.actor }}
            
            Cordialement,
            GitHub Actions
          to: gerivonderbitsh+dev@gmail.com
          from: GitHub Actions
