name: Jules Bot Contribution Validator

on:
  pull_request:
    branches: ['**']
  workflow_call:
    inputs:
      branch_name:
        description: 'Branch to validate'
        required: true
        type: string
      validation_level:
        description: 'Validation level (basic, standard, strict)'
        required: false
        type: string
        default: 'standard'

jobs:
  validate-bot-contribution:
    runs-on: ubuntu-latest
    if: github.actor == 'google-labs-jules[bot]' || github.event_name == 'workflow_call'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Validation Environment
        run: |
          echo "üîç Setting up Jules Bot contribution validation..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Validation Level: ${{ inputs.validation_level || 'standard' }}"
          echo "Event: ${{ github.event_name }}"
      
      - name: Validate Branch Structure
        id: branch-validation
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VALIDATION_LEVEL="${{ inputs.validation_level || 'standard' }}"
          
          echo "Validating branch structure for: $BRANCH_NAME"
          
          # Check if branch follows jules-google convention
          if [[ "$BRANCH_NAME" == jules-google/* ]]; then
            echo "‚úÖ Branch follows jules-google convention"
            echo "branch_valid=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Branch does not follow jules-google convention"
            echo "branch_valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Additional validations based on level
          case "$VALIDATION_LEVEL" in
            "strict")
              echo "üîí Applying strict validation rules..."
              # Add strict validation logic here
              ;;
            "standard")
              echo "üìã Applying standard validation rules..."
              # Add standard validation logic here
              ;;
            "basic")
              echo "üìù Applying basic validation rules..."
              # Add basic validation logic here
              ;;
          esac
      
      - name: Validate File Changes
        id: file-validation
        run: |
          echo "üîç Validating file changes..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No files changed"
            echo "files_valid=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Validate file types and patterns
          INVALID_FILES=""
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              echo "Checking: $file"
              
              # Check for sensitive files that bots shouldn't modify
              if [[ "$file" == *.key ]] || [[ "$file" == *.pem ]] || [[ "$file" == *.p12 ]]; then
                echo "‚ùå Invalid file type detected: $file"
                INVALID_FILES="$INVALID_FILES $file"
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          if [ -n "$INVALID_FILES" ]; then
            echo "files_valid=false" >> $GITHUB_OUTPUT
            echo "invalid_files=$INVALID_FILES" >> $GITHUB_OUTPUT
          else
            echo "files_valid=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Validation Report
        run: |
          echo "üìä Jules Bot Contribution Validation Report"
          echo "==========================================="
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "Validation Results:"
          echo "- Branch Structure: ${{ steps.branch-validation.outputs.branch_valid == 'true' && '‚úÖ VALID' || '‚ùå INVALID' }}"
          echo "- File Changes: ${{ steps.file-validation.outputs.files_valid == 'true' && '‚úÖ VALID' || '‚ùå INVALID' }}"
          echo ""
          
          if [[ "${{ steps.file-validation.outputs.files_valid }}" == "false" ]]; then
            echo "‚ö†Ô∏è Invalid files detected: ${{ steps.file-validation.outputs.invalid_files }}"
          fi
          
          echo "Overall Status: ${{ (steps.branch-validation.outputs.branch_valid == 'true' && steps.file-validation.outputs.files_valid == 'true') && '‚úÖ APPROVED' || '‚ùå REQUIRES REVIEW' }}"
      
      - name: Set Validation Status
        if: always()
        run: |
          BRANCH_VALID="${{ steps.branch-validation.outputs.branch_valid }}"
          FILES_VALID="${{ steps.file-validation.outputs.files_valid }}"
          
          if [[ "$BRANCH_VALID" == "true" && "$FILES_VALID" == "true" ]]; then
            echo "üéâ All validations passed - Contribution approved"
            exit 0
          else
            echo "‚ö†Ô∏è Validation issues detected - Manual review recommended"
            # Don't fail the workflow, just warn
            exit 0
          fi
