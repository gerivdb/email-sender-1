<#
.SYNOPSIS
    Enrichit le journal de d√©veloppement avec les r√©sultats d'analyse apr√®s un commit.
.DESCRIPTION
    Ce script analyse les fichiers PowerShell modifi√©s dans le dernier commit et enrichit
    le journal de d√©veloppement avec les r√©sultats d'analyse. Il g√©n√®re √©galement un rapport
    d'analyse au format Markdown.
.NOTES
    Auteur: Augment Code
    Date: 14/04/2025
#>

[CmdletBinding(SupportsShouldProcess = $true)]
param (
    [Parameter()]
    [string]$JournalPath,

    [Parameter()]
    [string]$ReportPath,

    [Parameter()]
    [switch]$IncludeAllFiles,

    [Parameter()]
    [switch]$SkipJournalUpdate,

    [Parameter()]
    [switch]$VerboseOutput
)

# Obtenir le chemin du d√©p√¥t Git
$repoRoot = git rev-parse --show-toplevel
if (-not $repoRoot) {
    Write-Error "Ce script doit √™tre ex√©cut√© dans un d√©p√¥t Git."
    exit 1
}

# D√©finir les chemins par d√©faut si non sp√©cifi√©s
if (-not $JournalPath) {
    $JournalPath = Join-Path -Path $repoRoot -ChildPath "journal_de_bord.md"
}

if (-not $ReportPath) {
    $reportDir = Join-Path -Path $repoRoot -ChildPath "git-hooks\reports"
    if (-not (Test-Path -Path $reportDir)) {
        New-Item -Path $reportDir -ItemType Directory -Force | Out-Null
    }
    $ReportPath = Join-Path -Path $reportDir -ChildPath "post-commit-report-$(Get-Date -Format 'yyyy-MM-dd-HHmmss').md"
}

# Importer le module d'analyse des patterns d'erreurs
$modulePath = Join-Path -Path $repoRoot -ChildPath "scripts\maintenance\error-learning\ErrorPatternAnalyzer.psm1"
if (Test-Path -Path $modulePath) {
    Import-Module $modulePath -Force
} else {
    Write-Error "Module ErrorPatternAnalyzer non trouv√©: $modulePath"
    exit 1
}

# Obtenir les informations sur le dernier commit
$commitHash = git rev-parse HEAD
$commitAuthor = git log -1 --pretty=format:"%an <%ae>"
$commitDate = git log -1 --pretty=format:"%ad" --date=format:"%Y-%m-%d %H:%M:%S"
$commitMessage = git log -1 --pretty=format:"%s"
$commitBody = git log -1 --pretty=format:"%b"

# Obtenir la liste des fichiers modifi√©s dans le dernier commit
if ($IncludeAllFiles) {
    $modifiedFiles = git diff-tree --no-commit-id --name-only -r $commitHash
} else {
    $modifiedFiles = git diff-tree --no-commit-id --name-only -r $commitHash | Where-Object { $_ -like "*.ps1" -or $_ -like "*.psm1" }
}

if (-not $modifiedFiles) {
    Write-Host "Aucun fichier PowerShell modifi√© dans le dernier commit."
    exit 0
}

Write-Host "Analyse des fichiers PowerShell modifi√©s dans le dernier commit..." -ForegroundColor Cyan

$errorCount = 0
$warningCount = 0
$errorList = @()

# Analyser chaque fichier
foreach ($file in $modifiedFiles) {
    $filePath = Join-Path -Path $repoRoot -ChildPath $file

    if (-not (Test-Path -Path $filePath)) {
        Write-Warning "Fichier non trouv√©: $filePath"
        continue
    }

    Write-Host "Analyse de $file..." -ForegroundColor Yellow

    # Obtenir le contenu du fichier
    $content = Get-Content -Path $filePath -Raw

    # Analyser le fichier pour d√©tecter les erreurs potentielles
    $patterns = Get-ErrorPatterns -ScriptContent $content

    if (-not $patterns) {
        Write-Host "  Aucun pattern d'erreur d√©tect√©." -ForegroundColor Green
        continue
    }

    # Afficher les erreurs et avertissements
    foreach ($pattern in $patterns) {
        $severity = $pattern.Severity
        $message = $pattern.Message
        $lineNumber = $pattern.LineNumber
        $id = $pattern.Id

        $errorInfo = [PSCustomObject]@{
            File        = $file
            LineNumber  = $lineNumber
            Severity    = $severity
            Message     = $message
            Id          = $id
            Description = $pattern.Description
            Suggestion  = $pattern.Suggestion
            CodeExample = $pattern.CodeExample
        }

        $errorList += $errorInfo

        if ($severity -eq "Error") {
            Write-Host "  [ERROR] Ligne $lineNumber : $message [$id]" -ForegroundColor Red
            $errorCount++
        } elseif ($severity -eq "Warning") {
            Write-Host "  [WARNING] Ligne $lineNumber : $message [$id]" -ForegroundColor Yellow
            $warningCount++
        }
    }
}

# G√©n√©rer un rapport d'analyse
# Cat√©gorisation des erreurs par type (Id)
$categoryGroups = $errorList | Group-Object -Property Id

$report = @"
# üõ†Ô∏è Rapport d'analyse post-commit

> *G√©n√©r√© automatiquement par le syst√®me d'analyse d'erreurs*

---

**üóìÔ∏è Date :** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

## üìù Informations sur le commit

- **Hash** : `$commitHash`
- **Auteur** : $commitAuthor
- **Date** : $commitDate
- **Message** : $commitMessage
- **Description** : $commitBody

---

## üìä R√©sum√©

- **Fichiers analys√©s** : $($modifiedFiles.Count)
- **‚ùå Erreurs d√©tect√©es** : $errorCount
- **‚ö†Ô∏è Avertissements d√©tect√©s** : $warningCount

---

## üóÇÔ∏è R√©partition des erreurs par type

| üè∑Ô∏è Type d'erreur (ID) | üí¨ Message | üõë S√©v√©rit√© | üî¢ Nombre d'occurrences |
|-----------------------|------------|-------------|------------------------|
"@

foreach ($group in $categoryGroups) {
    $first = $group.Group | Select-Object -First 1
    $report += "`n| $($group.Name) | $($first.Message) | $($first.Severity) | $($group.Count) |"
}

$report += @"

## D√©tails

| Fichier | Ligne | S√©v√©rit√© | Message | ID |
|---------|-------|----------|---------|-----|
"@

foreach ($errorItem in $errorList) {
    $report += "`n| $($errorItem.File) | $($errorItem.LineNumber) | $($errorItem.Severity) | $($errorItem.Message) | $($errorItem.Id) |"
}

$report += @"

## Suggestions d'am√©lioration

"@

$uniquePatterns = $errorList | Group-Object -Property Id | ForEach-Object { $_.Group[0] }

foreach ($pattern in $uniquePatterns) {
    $report += @"

### $($pattern.Message) [$($pattern.Id)]

**Description**: $($pattern.Description)

**Suggestion**: $($pattern.Suggestion)

**Exemple de code**:
```powershell
$($pattern.CodeExample)
```

"@
}

# Enregistrer le rapport
$report | Out-File -FilePath $ReportPath -Encoding utf8

Write-Host "`nRapport g√©n√©r√©: $ReportPath" -ForegroundColor Cyan

# Mettre √† jour le journal de d√©veloppement
if (-not $SkipJournalUpdate) {
    # V√©rifier si le journal existe
    $journalExists = Test-Path -Path $JournalPath

    # Cr√©er l'entr√©e de journal
    $journalEntry = @"
## $(Get-Date -Format "HH-mm") - Commit: $commitHash

### Actions
- Commit: $commitMessage
- Fichiers modifi√©s: $($modifiedFiles.Count)
- Erreurs d√©tect√©es: $errorCount
- Avertissements d√©tect√©s: $warningCount

### Analyse
"@

    if ($errorCount -gt 0 -or $warningCount -gt 0) {
        $journalEntry += @"

Les probl√®mes potentiels suivants ont √©t√© d√©tect√©s:

| Fichier | Ligne | S√©v√©rit√© | Message | ID |
|---------|-------|----------|---------|-----|
"@

        foreach ($errorItem in $errorList) {
            $journalEntry += "`n| $($errorItem.File) | $($errorItem.LineNumber) | $($errorItem.Severity) | $($errorItem.Message) | $($errorItem.Id) |"
        }
    } else {
        $journalEntry += "`n\nAucun probl√®me potentiel d√©tect√©."
    }

    $journalEntry += @"

### Le√ßons apprises
- Rapport d'analyse complet: [Rapport post-commit]($(Resolve-Path -Path $ReportPath -Relative))

"@

    # Mettre √† jour le journal
    if ($journalExists) {
        $journalContent = Get-Content -Path $JournalPath -Raw
        $journalContent = "$journalContent`n`n$journalEntry"
        $journalContent | Out-File -FilePath $JournalPath -Encoding utf8
    } else {
        $journalHeader = @"
# Journal de d√©veloppement

Ce journal contient les entr√©es de d√©veloppement enrichies automatiquement par le hook post-commit.

"@
        "$journalHeader`n`n$journalEntry" | Out-File -FilePath $JournalPath -Encoding utf8
    }

    Write-Host "`nJournal de d√©veloppement mis √† jour: $JournalPath" -ForegroundColor Cyan
}

# Retourner un code de sortie en fonction des r√©sultats
if ($errorCount -gt 0) {
    Write-Warning "Des erreurs ont √©t√© d√©tect√©es dans les fichiers modifi√©s."
    exit 0  # Ne pas bloquer le commit, juste informer
} else {
    Write-Host "`nAnalyse termin√©e. Aucune erreur d√©tect√©e." -ForegroundColor Green
    exit 0
}
