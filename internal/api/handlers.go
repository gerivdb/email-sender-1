// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List collections
	// (GET /collections)
	ListCollections(c *gin.Context)
	// Create collection
	// (POST /collections)
	CreateCollection(c *gin.Context)
	// List indexed documents
	// (GET /documents)
	ListDocuments(c *gin.Context, params ListDocumentsParams)
	// Index new documents
	// (POST /documents)
	IndexDocuments(c *gin.Context)
	// Delete document
	// (DELETE /documents/{document_id})
	DeleteDocument(c *gin.Context, documentId string)
	// Get document by ID
	// (GET /documents/{document_id})
	GetDocument(c *gin.Context, documentId string)
	// Health check
	// (GET /health)
	HealthCheck(c *gin.Context)
	// System metrics
	// (GET /metrics)
	GetMetrics(c *gin.Context)
	// Perform RAG search
	// (POST /search)
	PerformSearch(c *gin.Context)
	// Streaming RAG search
	// (POST /search/stream)
	PerformStreamingSearch(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListCollections operation middleware
func (siw *ServerInterfaceWrapper) ListCollections(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCollections(c)
}

// CreateCollection operation middleware
func (siw *ServerInterfaceWrapper) CreateCollection(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCollection(c)
}

// ListDocuments operation middleware
func (siw *ServerInterfaceWrapper) ListDocuments(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDocumentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "collection" -------------

	err = runtime.BindQueryParameter("form", true, false, "collection", c.Request.URL.Query(), &params.Collection)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter collection: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDocuments(c, params)
}

// IndexDocuments operation middleware
func (siw *ServerInterfaceWrapper) IndexDocuments(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IndexDocuments(c)
}

// DeleteDocument operation middleware
func (siw *ServerInterfaceWrapper) DeleteDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "document_id" -------------
	var documentId string

	err = runtime.BindStyledParameter("simple", false, "document_id", c.Param("document_id"), &documentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDocument(c, documentId)
}

// GetDocument operation middleware
func (siw *ServerInterfaceWrapper) GetDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "document_id" -------------
	var documentId string

	err = runtime.BindStyledParameter("simple", false, "document_id", c.Param("document_id"), &documentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocument(c, documentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMetrics(c)
}

// PerformSearch operation middleware
func (siw *ServerInterfaceWrapper) PerformSearch(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PerformSearch(c)
}

// PerformStreamingSearch operation middleware
func (siw *ServerInterfaceWrapper) PerformStreamingSearch(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PerformStreamingSearch(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/collections", wrapper.ListCollections)
	router.POST(options.BaseURL+"/collections", wrapper.CreateCollection)
	router.GET(options.BaseURL+"/documents", wrapper.ListDocuments)
	router.POST(options.BaseURL+"/documents", wrapper.IndexDocuments)
	router.DELETE(options.BaseURL+"/documents/:document_id", wrapper.DeleteDocument)
	router.GET(options.BaseURL+"/documents/:document_id", wrapper.GetDocument)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/metrics", wrapper.GetMetrics)
	router.POST(options.BaseURL+"/search", wrapper.PerformSearch)
	router.POST(options.BaseURL+"/search/stream", wrapper.PerformStreamingSearch)
}
