// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ComponentHealthStatus.
const (
	ComponentHealthStatusHealthy   ComponentHealthStatus = "healthy"
	ComponentHealthStatusUnhealthy ComponentHealthStatus = "unhealthy"
	ComponentHealthStatusUnknown   ComponentHealthStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDegraded  HealthResponseStatus = "degraded"
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Collection defines model for Collection.
type Collection struct {
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Description   *string    `json:"description,omitempty"`
	DocumentCount *int       `json:"document_count,omitempty"`
	Name          *string    `json:"name,omitempty"`
	VectorSize    *int       `json:"vector_size,omitempty"`
}

// CollectionListResponse defines model for CollectionListResponse.
type CollectionListResponse struct {
	Collections *[]Collection `json:"collections,omitempty"`
	TotalCount  *int          `json:"total_count,omitempty"`
}

// ComponentHealth defines model for ComponentHealth.
type ComponentHealth struct {
	ErrorMessage *string                `json:"error_message,omitempty"`
	LastCheck    *time.Time             `json:"last_check,omitempty"`
	LatencyMs    *int                   `json:"latency_ms,omitempty"`
	Status       *ComponentHealthStatus `json:"status,omitempty"`
}

// ComponentHealthStatus defines model for ComponentHealth.Status.
type ComponentHealthStatus string

// CreateCollectionRequest defines model for CreateCollectionRequest.
type CreateCollectionRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	VectorSize  *int    `json:"vector_size,omitempty"`
}

// Document defines model for Document.
type Document struct {
	Content   *string                 `json:"content,omitempty"`
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *string                 `json:"id,omitempty"`
	Metadata  *map[string]interface{} `json:"metadata,omitempty"`
	Title     *string                 `json:"title,omitempty"`
	UpdatedAt *time.Time              `json:"updated_at,omitempty"`

	// VectorSize Size of the document's vector embedding
	VectorSize *int `json:"vector_size,omitempty"`
}

// DocumentInput defines model for DocumentInput.
type DocumentInput struct {
	// Content Document content
	Content string `json:"content"`

	// Id Document identifier (auto-generated if not provided)
	Id *string `json:"id,omitempty"`

	// Metadata Additional document metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Title Document title
	Title *string `json:"title,omitempty"`
}

// DocumentListResponse defines model for DocumentListResponse.
type DocumentListResponse struct {
	Documents  *[]Document `json:"documents,omitempty"`
	Limit      *int        `json:"limit,omitempty"`
	Offset     *int        `json:"offset,omitempty"`
	TotalCount *int        `json:"total_count,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *struct {
		// Code Error code for programmatic handling
		Code *string `json:"code,omitempty"`

		// Details Additional error details
		Details *map[string]interface{} `json:"details,omitempty"`

		// Message Human-readable error message
		Message *string `json:"message,omitempty"`

		// RequestId Request identifier for debugging
		RequestId *string    `json:"request_id,omitempty"`
		Timestamp *time.Time `json:"timestamp,omitempty"`
	} `json:"error,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Components *struct {
		Database         *ComponentHealth `json:"database,omitempty"`
		EmbeddingService *ComponentHealth `json:"embedding_service,omitempty"`
		Qdrant           *ComponentHealth `json:"qdrant,omitempty"`
	} `json:"components,omitempty"`
	Status        *HealthResponseStatus `json:"status,omitempty"`
	Timestamp     *time.Time            `json:"timestamp,omitempty"`
	UptimeSeconds *int                  `json:"uptime_seconds,omitempty"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// IndexRequest defines model for IndexRequest.
type IndexRequest struct {
	// Collection Target collection name
	Collection *string         `json:"collection,omitempty"`
	Documents  []DocumentInput `json:"documents"`
}

// IndexResponse defines model for IndexResponse.
type IndexResponse struct {
	// DocumentIds List of indexed document IDs
	DocumentIds *[]string `json:"document_ids,omitempty"`

	// DurationMs Indexing duration in milliseconds
	DurationMs *int `json:"duration_ms,omitempty"`

	// FailedCount Number of failed documents
	FailedCount *int `json:"failed_count,omitempty"`

	// IndexedCount Number of successfully indexed documents
	IndexedCount *int `json:"indexed_count,omitempty"`
}

// MetricsResponse defines model for MetricsResponse.
type MetricsResponse struct {
	Api *struct {
		AverageResponseTimeMs *float32 `json:"average_response_time_ms,omitempty"`
		ErrorRatePercent      *float32 `json:"error_rate_percent,omitempty"`
		RequestsPerSecond     *float32 `json:"requests_per_second,omitempty"`
		TotalRequests         *int     `json:"total_requests,omitempty"`
	} `json:"api,omitempty"`
	Database *struct {
		IndexSizeGb      *float32 `json:"index_size_gb,omitempty"`
		TotalCollections *int     `json:"total_collections,omitempty"`
		TotalDocuments   *int     `json:"total_documents,omitempty"`
	} `json:"database,omitempty"`
	Search *struct {
		AverageSearchTimeMs *float32 `json:"average_search_time_ms,omitempty"`
		CacheHitRatePercent *float32 `json:"cache_hit_rate_percent,omitempty"`
		TotalSearches       *int     `json:"total_searches,omitempty"`
	} `json:"search,omitempty"`
	System *struct {
		CpuUsagePercent    *float32 `json:"cpu_usage_percent,omitempty"`
		DiskUsagePercent   *float32 `json:"disk_usage_percent,omitempty"`
		MemoryUsagePercent *float32 `json:"memory_usage_percent,omitempty"`
	} `json:"system,omitempty"`
}

// SearchMetadata defines model for SearchMetadata.
type SearchMetadata struct {
	Performance *struct {
		EmbeddingTimeMs  *int `json:"embedding_time_ms,omitempty"`
		GenerationTimeMs *int `json:"generation_time_ms,omitempty"`
		QueryTimeMs      *int `json:"query_time_ms,omitempty"`
	} `json:"performance,omitempty"`

	// SearchParams Applied search parameters
	SearchParams *map[string]interface{} `json:"search_params,omitempty"`

	// TotalDocuments Total documents in collection
	TotalDocuments *int `json:"total_documents,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// Context Additional context for the search
	Context *[]string `json:"context,omitempty"`

	// Filters Key-value filters for document metadata
	Filters *map[string]string `json:"filters,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `json:"limit,omitempty"`

	// Query Search query text
	Query string `json:"query"`

	// Temperature Generation temperature for RAG responses
	Temperature *float32 `json:"temperature,omitempty"`

	// Threshold Minimum similarity score threshold
	Threshold *float32 `json:"threshold,omitempty"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	// DurationMs Search duration in milliseconds
	DurationMs *int            `json:"duration_ms,omitempty"`
	Metadata   *SearchMetadata `json:"metadata,omitempty"`

	// RequestId Unique request identifier
	RequestId *string         `json:"request_id,omitempty"`
	Results   *[]SearchResult `json:"results,omitempty"`

	// TotalCount Total number of matching documents
	TotalCount *int `json:"total_count,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	// Content Document content or excerpt
	Content *string `json:"content,omitempty"`

	// Embedding Document vector embedding (optional)
	Embedding *[]float32 `json:"embedding,omitempty"`

	// GeneratedResponse RAG-generated response based on this document
	GeneratedResponse *string `json:"generated_response,omitempty"`

	// Id Document identifier
	Id *string `json:"id,omitempty"`

	// Metadata Document metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Score Similarity score (0-1)
	Score *float32 `json:"score,omitempty"`

	// Title Document title
	Title *string `json:"title,omitempty"`
}

// ListDocumentsParams defines parameters for ListDocuments.
type ListDocumentsParams struct {
	// Limit Maximum number of documents to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of documents to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Collection Filter by collection name
	Collection *string `form:"collection,omitempty" json:"collection,omitempty"`
}

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = CreateCollectionRequest

// IndexDocumentsJSONRequestBody defines body for IndexDocuments for application/json ContentType.
type IndexDocumentsJSONRequestBody = IndexRequest

// PerformSearchJSONRequestBody defines body for PerformSearch for application/json ContentType.
type PerformSearchJSONRequestBody = SearchRequest

// PerformStreamingSearchJSONRequestBody defines body for PerformStreamingSearch for application/json ContentType.
type PerformStreamingSearchJSONRequestBody = SearchRequest
