// Package embedding - Auto-generated by RAG Code Generator
// Generated at: 2025-05-27 18:53:21
// Project:
package embedding

import (
	"context"
	"crypto/md5"
	"fmt"
	"math"
	"math/rand"
	"strings"
)

type EmbeddingService struct {
}

// GenerateEmbedding creates a deterministic embedding vector based on the input text
func GenerateEmbedding(ctx context.Context, text string) ([]float64, error) {

	// Validate input
	if strings.TrimSpace(text) == "" {
		return nil, fmt.Errorf("empty text provided")
	}

	// Create a deterministic embedding based on the text content
	// This is still a mock implementation but will be consistent for the same input

	// Use MD5 hash of the text to create a deterministic seed
	hasher := md5.New()
	hasher.Write([]byte(strings.TrimSpace(text)))
	hash := hasher.Sum(nil)

	// Convert hash bytes to a seed
	var seed int64
	for i, b := range hash {
		if i >= 8 { // Use first 8 bytes for int64
			break
		}
		seed = (seed << 8) | int64(b)
	}

	// Create a deterministic random generator with this seed
	rng := rand.New(rand.NewSource(seed))

	// Generate deterministic embedding vector
	vector := make([]float64, 768)
	for i := range vector {
		// Use a more realistic distribution (normal-ish)
		val := rng.NormFloat64() * 0.1 // Scale to reasonable range
		vector[i] = math.Tanh(val)     // Constrain to [-1, 1] range
	}

	return vector, nil
}

// BatchGenerateEmbeddings
func BatchGenerateEmbeddings(ctx context.Context, texts []string) ([][]float64, error) {

	if len(texts) == 0 {
		return nil, fmt.Errorf("no texts provided")
	}

	embeddings := make([][]float64, len(texts))
	for i, text := range texts {
		embedding, err := GenerateEmbedding(ctx, text)
		if err != nil {
			return nil, fmt.Errorf("failed to generate embedding for text %d: %w", i, err)
		}
		embeddings[i] = embedding
	}

	return embeddings, nil

}
