package generate_dep_report_test

import (
	"encoding/json"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"

	"email_sender/cmd/go/dependency-manager/generate_dep_report"
)

func TestGenerateDepReport(t *testing.T) {
	// Create a temporary directory for testing
	tmpDir, err := ioutil.TempDir("", "test_dep_report")
	if err != nil {
		t.Fatalf("Failed to create temp dir: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	// Create a dummy go.mod for testing go list -m all functionality
	dummyGoModContent := `module example.com/test/repo
go 1.18

require (
	github.com/stretchr/testify v1.7.0
	golang.org/x/text v0.3.0
)
`
	err = ioutil.WriteFile(filepath.Join(tmpDir, "go.mod"), []byte(dummyGoModContent), 0o644)
	if err != nil {
		t.Fatalf("Failed to write dummy go.mod: %v", err)
	}

	// Change current working directory to the temporary directory
	originalWD, err := os.Getwd()
	if err != nil {
		t.Fatalf("Failed to get original working directory: %v", err)
	}
	err = os.Chdir(tmpDir)
	if err != nil {
		t.Fatalf("Failed to change working directory to temp dir: %v", err)
	}
	defer os.Chdir(originalWD) // Restore original working directory

	// Define output paths for the test
	outputJSON := filepath.Join(tmpDir, "dependencies_report.json")
	outputMD := filepath.Join(tmpDir, "dependencies_report.md")
	outputSVG := filepath.Join(tmpDir, "dependencies_graph.svg") // Will not be generated by current implementation

	// Run the report generation
	report, err := generate_dep_report.RunGenerateReport(outputJSON, outputMD, outputSVG)
	if err != nil {
		t.Fatalf("RunGenerateReport failed: %v", err)
	}

	// Validate report content (basic checks)
	if len(report.Dependencies) == 0 {
		t.Error("Expected dependencies in report, but found none.")
	}
	// Add more specific checks if you want to validate parsed content
	// For example:
	// foundTestify := false
	// for _, dep := range report.Dependencies {
	// 	if dep.Path == "github.com/stretchr/testify" {
	// 		foundTestify = true
	// 		if dep.Version != "v1.7.0" {
	// 			t.Errorf("Expected testify version v1.7.0, got %s", dep.Version)
	// 		}
	// 		break
	// 	}
	// }
	// if !foundTestify {
	// 	t.Error("Testify dependency not found in report")
	// }

	// Check if output files were created
	if _, err := os.Stat(outputJSON); os.IsNotExist(err) {
		t.Errorf("JSON output file not created at %s", outputJSON)
	}
	if _, err := os.Stat(outputMD); os.IsNotExist(err) {
		t.Errorf("Markdown output file not created at %s", outputMD)
	}
	// SVG is optional and might not be generated depending on external tools, so skip Stat check for now
	// if _, err := os.Stat(outputSVG); os.IsNotExist(err) {
	// 	t.Errorf("SVG output file not created at %s", outputSVG)
	// }

	// Read and parse JSON output
	jsonData, err := ioutil.ReadFile(outputJSON)
	if err != nil {
		t.Fatalf("Failed to read JSON output: %v", err)
	}

	var jsonReport generate_dep_report.DependenciesReport
	err = json.Unmarshal(jsonData, &jsonReport)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON data: %v", err)
	}

	if jsonReport.Summary == "" {
		t.Errorf("Expected a summary in JSON report, got empty")
	}
}
