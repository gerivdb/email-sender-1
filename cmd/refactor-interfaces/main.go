package main

import (
	"fmt"
	"os"
)

func main() {
	// Créer le fichier de sortie pour les interfaces mises à jour
	outputFile, err := os.Create("interfaces_maj_jan.md")
	if err != nil {
		fmt.Printf("Erreur lors de la création de interfaces_maj_jan.md: %v\n", err)
		os.Exit(1)
	}
	defer outputFile.Close()

	outputFile.WriteString("# Interfaces IA mises à jour pour Jan\n\n")
	outputFile.WriteString("Ce document décrit les prototypes d'interface pour l'interaction avec les agents IA, adaptés à l'orchestration séquentielle via Jan et le ContextManager.\n\n")

	outputFile.WriteString("## Interface `Agent` (Go)\n")
	outputFile.WriteString("L'interface `Agent` définit les méthodes que tout agent IA doit implémenter pour être compatible avec l'orchestration Jan.\n")
	outputFile.WriteString("```go\n")
	outputFile.WriteString("package core\n\n")
	outputFile.WriteString("import (\n")
	outputFile.WriteString("    \"context\"\n")
	outputFile.WriteString(")\n\n")
	outputFile.WriteString("type Agent interface {\n")
	outputFile.WriteString("    // Process exécute la logique de l'agent.\n")
	outputFile.WriteString("    // Le 'ctx' Go context permet d'annuler l'opération.\n")
	outputFile.WriteString("    // Le 'agentContext' est un map[string]interface{} contenant le contexte spécifique à l'exécution actuelle de l'agent,\n")
	outputFile.WriteString("    // incluant l'historique de dialogue et les données du ContextManager.\n")
	outputFile.WriteString("    // Le 'input' est le message ou la tâche que l'agent doit traiter.\n")
	outputFile.WriteString("    // La fonction retourne le résultat de l'agent et une erreur si applicable.\n")
	outputFile.WriteString("    Process(ctx context.Context, agentContext map[string]interface{}, input string) (string, error)\n\n")
	outputFile.WriteString("    // GetName retourne le nom unique de l'agent.\n")
	outputFile.WriteString("    GetName() string\n\n")
	outputFile.WriteString("    // SetContextManager permet d'injecter une instance du ContextManager dans l'agent.\n")
	outputFile.WriteString("    SetContextManager(cm *ContextManager)\n")
	outputFile.WriteString("}\n")
	outputFile.WriteString("```\n\n")

	outputFile.WriteString("## Structure `ContextManager` (Go)\n")
	outputFile.WriteString("La structure `ContextManager` gère la mémoire partagée et l'historique des dialogues.\n")
	outputFile.WriteString("```go\n")
	outputFile.WriteString("package core\n\n")
	outputFile.WriteString("import (\n")
	outputFile.WriteString("    \"sync\"\n")
	outputFile.WriteString(")\n\n")
	outputFile.WriteString("type ContextManager struct {\n")
	outputFile.WriteString("    mu       sync.Mutex\n")
	outputFile.WriteString("    history  map[string][]string       // persona -> messages\n")
	outputFile.WriteString("    globalContext map[string]interface{} // Contexte global partagé\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// NewContextManager initialise et retourne une nouvelle instance de ContextManager.\n")
	outputFile.WriteString("func NewContextManager() *ContextManager {\n")
	outputFile.WriteString("    return &ContextManager{\n")
	outputFile.WriteString("        history:      make(map[string][]string),\n")
	outputFile.WriteString("        globalContext: make(map[string]interface{}),\n")
	outputFile.WriteString("    }\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// StoreDialogueHistory stocke un message dans l'historique de dialogue d'un persona spécifique.\n")
	outputFile.WriteString("func (cm *ContextManager) StoreDialogueHistory(persona, message string) {\n")
	outputFile.WriteString("    cm.mu.Lock()\n")
	outputFile.WriteString("    defer cm.mu.Unlock()\n")
	outputFile.WriteString("    cm.history[persona] = append(cm.history[persona], message)\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// GetDialogueContext récupère les 'n' derniers messages de l'historique de dialogue d'un persona.\n")
	outputFile.WriteString("func (cm *ContextManager) GetDialogueContext(persona string, n int) []string {\n")
	outputFile.WriteString("    cm.mu.Lock()\n")
	outputFile.WriteString("    defer cm.mu.Unlock()\n")
	outputFile.WriteString("    h := cm.history[persona]\n")
	outputFile.WriteString("    if len(h) > n {\n")
	outputFile.WriteString("        return h[len(h)-n:]\n")
	outputFile.WriteString("    }\n")
	outputFile.WriteString("    return h\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// GetGlobalContext récupère le contexte global partagé entre tous les personas.\n")
	outputFile.WriteString("func (cm *ContextManager) GetGlobalContext() map[string]interface{} {\n")
	outputFile.WriteString("    cm.mu.Lock()\n")
	outputFile.WriteString("    defer cm.mu.Unlock()\n")
	outputFile.WriteString("    // Retourne une copie pour éviter les modifications externes directes\n")
	outputFile.WriteString("    copyMap := make(map[string]interface{})\n")
	outputFile.WriteString("    for k, v := range cm.globalContext {\n")
	outputFile.WriteString("        copyMap[k] = v\n")
	outputFile.WriteString("    }\n")
	outputFile.WriteString("    return copyMap\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// UpdateGlobalContext met à jour le contexte global partagé avec de nouvelles données.\n")
	outputFile.WriteString("func (cm *ContextManager) UpdateGlobalContext(key string, value interface{}) {\n")
	outputFile.WriteString("    cm.mu.Lock()\n")
	outputFile.WriteString("    defer cm.mu.Unlock()\n")
	outputFile.WriteString("    cm.globalContext[key] = value\n")
	outputFile.WriteString("}\n\n")
	outputFile.WriteString("// ClearDialogueHistory efface l'historique de dialogue d'un persona ou de tous les personas.\n")
	outputFile.WriteString("func (cm *ContextManager) ClearDialogueHistory(persona string) {\n")
	outputFile.WriteString("    cm.mu.Lock()\n")
	outputFile.WriteString("    defer cm.mu.Unlock()\n")
	outputFile.WriteString("    if persona == \"\" {\n")
	outputFile.WriteString("        // Effacer tout l'historique si persona est vide\n")
	outputFile.WriteString("        cm.history = make(map[string][]string)\n")
	outputFile.WriteString("    } else {\n")
	outputFile.WriteString("        delete(cm.history, persona)\n")
	outputFile.WriteString("    }\n")
	outputFile.WriteString("}\n")
	outputFile.WriteString("```\n\n")

	outputFile.WriteString("## Critères de Validation\n")
	outputFile.WriteString("- Le fichier `interfaces_maj_jan.md` est généré.\n")
	outputFile.WriteString("- Les prototypes d'interface sont clairement définis et incluent le `context.Context` et le contexte enrichi.\n")
	outputFile.WriteString("- La structure `ContextManager` et ses méthodes sont implémentées et documentées.\n")
	outputFile.WriteString("- Les interfaces sont prêtes pour l'intégration avec Jan.\n")

	fmt.Println("Refactorisation des interfaces terminée. Voir interfaces_maj_jan.md")
}
