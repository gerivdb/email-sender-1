{
  "version": "2.0.0",
  // Variables globales pour √©viter la r√©p√©tition (DRY)
  "options": {
    "env": {
      "SCRIPTS_PATH": "${workspaceFolder}/development/scripts",
      "PYTHON_PATH": "${workspaceFolder}/development/scripts/python",
      "POWERSHELL_PATH": "${workspaceFolder}/development/scripts/cmd"
    }
  },
  "tasks": [
    // === üßº MAINTENANCE ===
    {
      "label": "clean.all",
      "type": "shell",
      "command": "rm -rf ${env:PYTHON_PATH}/__pycache__",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "clean.python",
      "type": "shell",
      "command": "find ${env:PYTHON_PATH} -name \"__pycache__\" -exec rm -rf {} +",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    // === üìì JOURNALING ===
    {
      "label": "journal.execute",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/journal/journal_vscode.py ${input:journalAction}",
      "problemMatcher": ["$python"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      }
    },
    {
      "label": "journal.rebuild-index",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/journal/journal_search_simple.py --rebuild",
      "problemMatcher": ["$python"],
      "group": "none",
      "presentation": {
        "reveal": "silent",
        "panel": "shared"
      }
    },
    {
      "label": "journal.watcher",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/journal/journal_watcher.py --log-level=INFO",
      "problemMatcher": ["$python"],
      "isBackground": true,
      "group": "none",
      "presentation": {
        "reveal": "silent",
        "panel": "shared",
        "focus": false
      }
    },
    {
      "label": "journal.ask-rag",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/journal/journal_rag_simple.py --query \"${input:ragQuery}\"",
      "problemMatcher": ["$python"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      }
    },
    {
      "label": "db.supabase.query",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/db/supabase_client.py --query \"${input:supabaseQuery}\"",
      "problemMatcher": ["$python"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      }
    },
    {
      "label": "webhook.notify",
      "type": "shell",
      "command": "python ${env:PYTHON_PATH}/webhooks/notify.py --service \"${input:webhookService}\" --message \"${input:webhookMessage}\"",
      "problemMatcher": ["$python"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      }
    },

    // === üß™ GO: WORKFLOW ===
    {
      "label": "go.all",
      "type": "shell",
      "command": "echo 'Running full Go workflow...'",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOn": ["go.lint.build", "go.test-all", "go.build"],
      "dependsOrder": "sequence",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "go.build",
      "type": "shell",
      "command": "go build -v ./...",
      "group": "build",
      "problemMatcher": [
        {
          "owner": "go",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": {
            "regexp": "^(.+):(\\d+):(\\d+):\\s*(.+)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "message": 4
          }
        }
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "go.test-all",
      "type": "shell",
      "command": "go test ./... -v -short",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": ["$go"],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
  "label": "go.lint.build",
  "type": "shell",
  "command": "golangci-lint run",
  "group": "build",
  "problemMatcher": [
    {
      "owner": "go",
      "fileLocation": ["relative", "${workspaceFolder}"],
      "pattern": {
        "regexp": "^(.+):(\\d+):(\\d+):\\s*(.+)$",
        "file": 1,
        "line": 2,
        "column": 3,
        "message": 4
      }
    }
  ],
  "presentation": {
    "reveal": "always",
    "panel": "shared"
  }
},
    {
      "label": "go.lint.test",
      "type": "shell",
      "command": "golangci-lint run --fast",
      "group": "test",
      "problemMatcher": [
        {
          "owner": "go",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": {
            "regexp": "^(.+):(\\d+):(\\d+):\\s*(.+)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "message": 4
          }
        }
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    // === üöÄ DEPLOYMENT & ENV ===
    {
      "label": "env.setup",
      "type": "shell",
      "command": "python -m venv .venv && .venv/Scripts/activate && pip install -r projet/config/requirements.txt",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "docker.build",
      "type": "shell",
      "command": "docker build -t myapp:latest .",
      "problemMatcher": [],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "git.commit",
      "type": "shell",
      "command": "git commit -m \"${input:commitMessage}\"",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    }
  ],
  "inputs": [
    {
      "id": "journalAction",
      "description": "Action de journalisation",
      "type": "pickString",
      "options": ["new", "search", "daily", "weekly"],
      "default": "new"
    },
    {
      "id": "ragQuery",
      "description": "Requ√™te pour le syst√®me RAG",
      "type": "promptString",
      "default": "R√©sumer les entr√©es de la semaine"
    },
    {
      "id": "supabaseQuery",
      "description": "Requ√™te SQL pour Supabase",
      "type": "promptString",
      "default": "SELECT * FROM journal_entries WHERE created_at > NOW() - INTERVAL '7 days'"
    },
    {
      "id": "webhookService",
      "description": "Service pour notification webhook",
      "type": "pickString",
      "options": ["slack", "notion"],
      "default": "slack"
    },
    {
      "id": "webhookMessage",
      "description": "Message √† envoyer via webhook",
      "type": "promptString",
      "default": "Nouveau journal cr√©√©"
    },
    {
      "id": "testFunctionName",
      "description": "Nom de la fonction de test (regex)",
      "type": "promptString",
      "default": "Test.*"
    },
    {
      "id": "testPackagePath",
      "description": "Chemin du package Go √† tester",
      "type": "promptString",
      "default": "./..."
    },
    {
      "id": "commitMessage",
      "description": "Message de commit Git",
      "type": "promptString",
      "default": "Mise √† jour du projet"
    }
  ]
}