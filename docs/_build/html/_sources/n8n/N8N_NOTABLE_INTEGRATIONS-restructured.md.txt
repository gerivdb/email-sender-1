# Int√©grations Notables dans n8n (Applications et Services)

## Table des mati√®res

1. [Int√©grations Notables dans n8n (Applications et Services)](#section-1)
    1.1. [N≈ìud Slack (Envoi de Message)](#section-2)
        1.1.1. [Exemple : Publier un message dans un canal](#section-3)
    1.2. [N≈ìud Google Sheets](#section-4)
        1.2.1. [Exemple : Ajouter une nouvelle ligne de donn√©es √† une feuille](#section-5)
    1.3. [N≈ìud Notion](#section-6)
        1.3.1. [Exemple : Interroger une base de donn√©es Notion pour les pages correspondant √† un filtre](#section-7)
    1.4. [N≈ìud GitHub](#section-8)
        1.4.1. [Exemple : Cr√©er un nouveau probl√®me dans un d√©p√¥t GitHub](#section-9)
    1.5. [N≈ìuds de Base de Donn√©es (MySQL, Postgres, etc.)](#section-10)
        1.5.1. [Exemple : Utilisation du n≈ìud MySQL pour ex√©cuter une requ√™te](#section-11)
    1.6. [Autres Int√©grations](#section-12)
        1.6.1. [Expressions](#section-13)
        1.6.2. [Identifiants](#section-14)
        1.6.3. [IDs et Position des N≈ìuds](#section-15)
        1.6.4. [Connexion des N≈ìuds](#section-16)
        1.6.5. [Test et It√©ration](#section-17)

## 1. Int√©grations Notables dans n8n (Applications et Services) <a name='section-1'></a>

Ce document pr√©sente des exemples d'utilisation JSON pour les n≈ìuds de services tiers populaires dans n8n. Chacun de ces n≈ìuds n√©cessite des identifiants appropri√©s (configur√©s dans les Credentials de n8n et r√©f√©renc√©s par nom ou ID dans le JSON). Les champs exacts d√©pendent de l'API du service.

### 1.1. N≈ìud Slack (Envoi de Message) <a name='section-2'></a>

Le n≈ìud Slack vous permet de publier des messages, d'obtenir des informations sur les canaux, de g√©rer des fichiers, etc., via l'API de Slack. Une op√©ration courante est l'envoi d'un message √† un canal.

#### 1.1.1. Exemple : Publier un message dans un canal <a name='section-3'></a>

```json
{
  "name": "Send Slack Message",
  "type": "n8n-nodes-base.slack",
  "typeVersion": 1,
  "parameters": {
    "resource": "message",
    "operation": "send",
    "channel": "C01234567",
    "text": "Hello from n8n :tada:"
  },
  "credentials": {
    "slackApi": {
      "name": "Slack OAuth2"
    }
```

**Explication :** Cela enverra le texte "Hello from n8n üéâ" au canal Slack sp√©cifi√©. Nous avons choisi `resource: "message"` et `operation: "send"`. Les n≈ìuds Slack ont souvent plusieurs ressources comme message, channel, etc. Le canal peut √™tre l'ID du canal Slack ou son nom (si vous utilisez le nom, assurez-vous que l'identifiant a les autorisations appropri√©es pour le trouver).

Les credentials pointent vers un identifiant OAuth2 Slack (avec des autorisations comme chat:write, etc. selon les besoins). Si vous souhaitez utiliser des blocs ou des pi√®ces jointes, le n≈ìud Slack permet un mode JSON pour ces champs (`jsonParameters: true` et fournir un objet JSON pour attachments ou blocks).

La sortie de ce n≈ìud inclura g√©n√©ralement l'ID du message Slack et l'horodatage en cas de succ√®s. Vous pouvez √©galement utiliser le n≈ìud Slack Trigger pour √©couter les √©v√©nements Slack si vous configurez un webhook d'application Slack ‚Äì utile pour les workflows r√©actifs (par exemple, r√©pondre lorsqu'un message est publi√©).

### 1.2. N≈ìud Google Sheets <a name='section-4'></a>

Ce n≈ìud s'int√®gre √† Google Sheets pour lire ou √©crire des donn√©es de feuille de calcul. Les op√©rations incluent : Lire des lignes, Ajouter une ligne, Mettre √† jour une ligne, Supprimer une ligne, Rechercher, etc. Vous devez avoir configur√© des identifiants Google Sheets (OAuth2).

#### 1.2.1. Exemple : Ajouter une nouvelle ligne de donn√©es √† une feuille <a name='section-5'></a>

```json
{
  "name": "Append to Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "typeVersion": 4,
  "parameters": {
    "operation": "append",
    "spreadsheetId": "1A2b3C4D5E6FgHiJkLMnoPQrstu",
    "sheetName": "Sheet1",
    "dataMode": "autoMap",
    "options": {
      "valueInputMode": "USER_ENTERED"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "name": "Google Sheets OAuth2"
```

**Explication :** Cette configuration est configur√©e pour ajouter une nouvelle ligne √† la feuille nomm√©e "Sheet1" dans le document Google Sheets avec l'ID donn√©. Nous avons utilis√© `dataMode: "autoMap"`, ce qui signifie que le n≈ìud mappera automatiquement les champs entrants aux colonnes avec le m√™me nom d'en-t√™te.

Par exemple, si les √©l√©ments entrants ont un JSON comme `{ "Name": "Alice", "Email": "alice@example.com" }`, et que la feuille Google a des colonnes "Name" et "Email", ces valeurs seront plac√©es en cons√©quence.

`valueInputMode: "USER_ENTERED"` indique √† Google Sheets de traiter l'entr√©e comme si un utilisateur l'avait tap√©e (donc les formules dans les cellules seront recalcul√©es, etc.). Si vous vouliez mapper explicitement des champs, vous pourriez utiliser `dataMode: "define"` et fournir une liste de champs √† envoyer.

Pour la lecture de donn√©es, le Get Many (ou `operation: "getAll"`) n√©cessiterait une plage (par exemple, "Sheet1!A:D") et renvoie un tableau de lignes. Le n≈ìud Google Sheets est puissant √† la fois pour exporter des donn√©es de n8n vers des feuilles de calcul et pour importer des donn√©es de feuilles de calcul dans n8n pour un traitement ult√©rieur.

### 1.3. N≈ìud Notion <a name='section-6'></a>

Le n≈ìud Notion se connecte √† l'API de Notion, vous permettant de cr√©er ou de mettre √† jour des pages dans une base de donn√©es, de r√©cup√©rer des √©l√©ments de base de donn√©es ou d'ajouter du contenu aux pages.

#### 1.3.1. Exemple : Interroger une base de donn√©es Notion pour les pages correspondant √† un filtre <a name='section-7'></a>

```json
{
  "name": "Query Notion DB",
  "type": "n8n-nodes-base.notion",
  "typeVersion": 2,
  "parameters": {
    "resource": "databasePage",
    "operation": "getAll",
    "databaseId": "YOUR_NOTION_DATABASE_ID",
    "options": {
      "filter": {
        "singleCondition": {
          "key": "Email|email",
          "condition": "equals",
          "emailValue": "={{ $json[\"email\"] }}"
        }
  },
  "credentials": {
    "notionApi": {
      "name": "Notion API"
```

**Explication :** Cela r√©cup√©rera toutes les pages de la base de donn√©es Notion sp√©cifi√©e o√π la propri√©t√© Email est √©gale √† la valeur `$json["email"]` du n≈ìud pr√©c√©dent. Dans l'API de Notion, les filtres peuvent √™tre complexes ; ici, nous avons utilis√© un filtre √† condition unique sur une propri√©t√© Email.

La cl√© est format√©e comme `PropertyName|propertyType` dans le n≈ìud (le n≈ìud Notion a besoin du type de propri√©t√© pour formater correctement le filtre, d'o√π "Email|email"). Le n≈ìud Notion prend en charge la cr√©ation de pages (vous sp√©cifieriez les propri√©t√©s √† d√©finir), la mise √† jour de pages, la recherche, etc.

Pour un exemple de cr√©ation, vous utiliseriez `operation: "create"` avec un `pageId` (si vous ajoutez √† une page) ou `databaseId` (si vous ajoutez √† une base de donn√©es) et fourniriez l'objet properties. Par exemple, pour une base de donn√©es :
properties: { 
  "Name": {"title": [{"text": {"content": "New Item"}}]}, 
  "Status": {"select": {"name": "Done"}} 

La structure suit le JSON de l'API Notion. Le n≈ìud simplifie une partie de cela, mais souvent vous utilisez l'approche No Code pour d√©finir les champs via l'interface utilisateur. Lorsque vous travaillez par programmation, il est utile de se r√©f√©rer √† la documentation de l'API Notion pour le JSON exact des propri√©t√©s.

La sortie d'un n≈ìud Notion sera la repr√©sentation JSON de la page Notion ou des entr√©es de base de donn√©es r√©cup√©r√©es. Utilisez cette int√©gration pour automatiser l'ajout de notes de r√©union, la mise √† jour des statuts de t√¢ches ou la g√©n√©ration de tableaux de bord dans Notion.

### 1.4. N≈ìud GitHub <a name='section-8'></a>

Ce n≈ìud permet des interactions avec GitHub, comme la cr√©ation de probl√®mes, la r√©cup√©ration de commits, la gestion de d√©p√¥ts, etc.

#### 1.4.1. Exemple : Cr√©er un nouveau probl√®me dans un d√©p√¥t GitHub <a name='section-9'></a>

```json
{
  "name": "Create GitHub Issue",
  "type": "n8n-nodes-base.github",
  "typeVersion": 1,
  "parameters": {
    "resource": "issue",
    "operation": "create",
    "owner": "octocat",
    "repository": "Hello-World",
    "title": "Automated Issue from n8n",
    "body": "This issue was created by an n8n workflow."
  },
  "credentials": {
    "githubApi": {
      "name": "GitHub personal access token"
    }
```

**Explication :** Ce n≈ìud utilise le n≈ìud GitHub pour cr√©er un probl√®me dans le d√©p√¥t octocat/Hello-World. L'identifiant githubApi doit √™tre un Personal Access Token avec des autorisations repo (ou un jeton d'application OAuth). Le n≈ìud pourrait √©galement mettre √† jour ou lire des probl√®mes (diff√©rentes op√©rations), lister les commits (`resource: "repository", operation: "getCommits"` par exemple), g√©rer les pull requests, etc.

La sortie pour les op√©rations de cr√©ation contient g√©n√©ralement les donn√©es de l'objet cr√©√© (d√©tails du probl√®me, y compris son num√©ro, URL, etc.). C'est utile pour l'automatisation comme la journalisation des erreurs ou des TODOs en tant que probl√®mes GitHub, ou la publication de notes de d√©ploiement dans un d√©p√¥t.

### 1.5. N≈ìuds de Base de Donn√©es (MySQL, Postgres, etc.) <a name='section-10'></a>

n8n inclut des n≈ìuds pour les bases de donn√©es populaires comme MySQL, PostgreSQL, MSSQL, etc. Ces n≈ìuds vous permettent d'ex√©cuter des requ√™tes ou des op√©rations (select/insert/update).

#### 1.5.1. Exemple : Utilisation du n≈ìud MySQL pour ex√©cuter une requ√™te <a name='section-11'></a>

```json
{
  "name": "MySQL Query",
  "type": "n8n-nodes-base.mySql",
  "typeVersion": 2,
  "parameters": {
    "operation": "executeQuery",
    "query": "SELECT * FROM users WHERE id = {{ $json[\"user_id\"] }}",
    "additionalFields": {}
  },
  "credentials": {
    "mySql": {
      "name": "My MySQL DB"
    }
```

**Explication :** Cela ex√©cutera la requ√™te SQL donn√©e sur la base de donn√©es MySQL connect√©e (en utilisant les identifiants nomm√©s "My MySQL DB"). Nous avons utilis√© une expression pour injecter un user_id entrant dans la requ√™te. Le r√©sultat sera retourn√© sous forme d'√©l√©ments (chaque ligne comme un √©l√©ment avec des colonnes comme champs).

Vous pourriez √©galement utiliser `operation: insert` et sp√©cifier la table et les donn√©es de colonne de mani√®re structur√©e, mais souvent le SQL brut (avec executeQuery ou execute) est le plus simple pour les op√©rations complexes. Assurez-vous que vos requ√™tes sont s√©curis√©es (si vous utilisez des expressions, assurez-vous qu'elles sont assainies ou ne proviennent pas directement de l'entr√©e utilisateur pour √©viter l'injection SQL).

Pour PostgreSQL, le n≈ìud est similaire (le type est simplement postgres et le type d'identifiants est postgreSql). Ces n≈ìuds vous permettent d'int√©grer votre workflow avec des bases de donn√©es existantes pour lire ou √©crire des donn√©es, faisant essentiellement de n8n une partie de votre pipeline de donn√©es.

### 1.6. Autres Int√©grations <a name='section-12'></a>

n8n dispose de plus de 500 n≈ìuds pour divers services. Voici quelques autres n≈ìuds notables :

- **AWS S3** (et autres services AWS via des n≈ìuds d√©di√©s) : par exemple, le n≈ìud S3 peut t√©l√©charger ou t√©l√©verser des fichiers.
- **Google Drive** : pour les op√©rations de fichiers (t√©l√©verser, t√©l√©charger, lister les fichiers).
- **Email Send (SMTP)** : pour envoyer des emails via SMTP ou des services comme SendGrid.
- **Twilio** : envoyer des SMS ou des messages WhatsApp via Twilio.
- **Stripe** : cr√©er des clients, traiter des paiements ou r√©agir aux √©v√©nements Stripe (Stripe Trigger).
- **Webhook (sp√©cifique au service)** : De nombreux services ont des n≈ìuds de d√©clenchement (par exemple, Stripe Trigger, GitHub Trigger, Slack Trigger) qui √©coutent les webhooks entrants de ces services sans que vous ayez √† configurer manuellement le n≈ìud Webhook.
- **Jira, Trello, Asana** : n≈ìuds de gestion de projet pour cr√©er/mettre √† jour des t√¢ches.
- **HubSpot, Salesforce** : n≈ìuds CRM pour g√©rer les contacts, les affaires, etc.
- **CSV & XML** : n≈ìuds pour analyser ou √©crire CSV/XML, utiles lors de la manipulation de donn√©es de fichiers.
- **HTTP Webhook (sortant)** : Si vous devez appeler un webhook externe, utilisez simplement le n≈ìud HTTP (comme indiqu√©) ou l'int√©gration sp√©cifique si disponible.

Pour tout n≈ìud de service sp√©cifique, le mod√®le est : resource (quelle entit√© vous traitez), operation (action √† effectuer), puis les champs pour cette op√©ration (correspondant souvent √©troitement aux champs de l'API du service). La meilleure fa√ßon de les construire est souvent de configurer le n≈ìud dans l'√©diteur de n8n, puis de copier le JSON (via l'exportation du workflow) comme r√©f√©rence.

#### 1.6.1. Expressions <a name='section-13'></a>

Dans les exemples JSON ci-dessus, vous voyez beaucoup de `={{ $json["..."] }}`. Ce sont des expressions n8n qui extraient des donn√©es des n≈ìuds pr√©c√©dents. Dans le code, assurez-vous qu'elles sont envelopp√©es dans des accolades doubles √† l'int√©rieur de la cha√Æne JSON. √Ä l'ex√©cution, n8n les √©value. Vous pouvez √©galement utiliser `$node["NodeName"].json["field"]` pour r√©f√©rencer la sortie d'un n≈ìud sp√©cifique, ou `$items()` pour r√©f√©rencer plusieurs √©l√©ments.

#### 1.6.2. Identifiants <a name='section-14'></a>

La section "credentials" dans le JSON de chaque n≈ìud renvoie aux identifiants stock√©s. Dans les exportations, ils peuvent appara√Ætre comme `{ "id": "some-id", "name": "Credential Name" }` ou simplement le nom. Lors de la cr√©ation programmatique de workflows via l'API, vous pourriez n'avoir besoin que de d√©finir le nom de l'identifiant (s'il est unique) ou l'ID. Assurez-vous toujours que l'identifiant existe dans n8n au pr√©alable.

#### 1.6.3. IDs et Position des N≈ìuds <a name='section-15'></a>

Vous pourriez remarquer `id` et `position` dans les exemples d'exportations. Ceux-ci ne sont pas n√©cessaires lors de l'√©criture d'une fiche de r√©f√©rence, mais dans le JSON de workflow r√©el, ils placent le n≈ìud dans l'√©diteur. Ils peuvent √™tre omis si l'on se concentre uniquement sur la configuration fonctionnelle des n≈ìuds.

#### 1.6.4. Connexion des N≈ìuds <a name='section-16'></a>

Dans le JSON du workflow, il y a un objet "connections" qui relie les sorties des n≈ìuds aux entr√©es. Dans cette fiche, nous montrons des n≈ìuds individuels. Lors de la construction d'un workflow par programmation, vous devrez construire cet objet connections. Par exemple, pour connecter Cron -> GraphQL -> Function -> Slack comme dans notre exemple de rappel Slack, le JSON avait :

```json
"connections": {
  "Cron": { "main": [ [ { "node": "GraphQL", "type": "main", "index": 0 } ] ] },
  "GraphQL": { "main": [ [ { "node": "Summarize", "type": "main", "index": 0 } ] ] },
  "Summarize": { "main": [ [ { "node": "Slack", "type": "main", "index": 0 } ] ] }
}
```

Cela indique que la sortie de Cron se connecte √† l'entr√©e de GraphQL, etc. Si vous cr√©ez des workflows via l'API, vous formulerez une structure similaire.

#### 1.6.5. Test et It√©ration <a name='section-17'></a>

Commencez par des n≈ìuds simples (Manual Trigger -> un n≈ìud -> sortie) pour vous assurer que votre JSON est correct, puis d√©veloppez. Vous pouvez importer du JSON dans n8n via Workflow -> Import from JSON pour le v√©rifier visuellement.

