# Azure DevOps Pipeline pour Email Sender 1
# Trigger sur main et develop branches

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main

variables:
  buildConfiguration: 'Release'
  goVersion: '1.21'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Validate
  displayName: 'üö® Fail-Fast Validation'
  jobs:
  - job: Prerequisites
    displayName: 'V√©rifier pr√©requis'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PowerShell@2
      displayName: 'Fail-Fast Validation'
      inputs:
        pwsh: true
        filePath: 'setup/implement-fail-fast.ps1'
        arguments: '-DryRun'

- stage: Test
  displayName: 'üß™ Tests & Qualit√©'
  dependsOn: Validate
  jobs:
  - job: UnitTests
    displayName: 'Tests unitaires'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      displayName: 'Setup Go'
      inputs:
        version: $(goVersion)
        
    - task: Go@0
      displayName: 'go mod download'
      inputs:
        command: 'custom'
        customCommand: 'mod'
        arguments: 'download'
        
    - task: Go@0
      displayName: 'Run tests'
      inputs:
        command: 'test'
        arguments: '-v -race -coverprofile=coverage.out ./...'
        
    - task: PublishCodeCoverageResults@1
      displayName: 'Publier couverture'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage.out'

  - job: IntegrationTests
    displayName: 'Tests d\'int√©gration'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PowerShell@2
      displayName: 'D√©marrer mocks'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          & ./mocks/start-all-mocks.ps1
          
    - task: Go@0
      displayName: 'Tests int√©gration'
      inputs:
        command: 'test'
        arguments: '-v -tags=integration ./tests/integration/...'
        
    - task: PowerShell@2
      displayName: 'Arr√™ter mocks'
      condition: always()
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          & ./mocks/stop-all-mocks.ps1

- stage: Build
  displayName: 'üî® Build & Package'
  dependsOn: Test
  jobs:
  - job: Build
    displayName: 'Build application'
    strategy:
      matrix:
        linux_amd64:
          goos: 'linux'
          goarch: 'amd64'
        windows_amd64:
          goos: 'windows'
          goarch: 'amd64'
        darwin_amd64:
          goos: 'darwin'
          goarch: 'amd64'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      displayName: 'Setup Go'
      inputs:
        version: $(goVersion)
        
    - task: PowerShell@2
      displayName: 'Build binary'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $env:GOOS = "$(goos)"
          $env:GOARCH = "$(goarch)"
          
          New-Item -Path "dist" -ItemType Directory -Force
          go build -o "dist/email-sender-$(goos)-$(goarch)" ./cmd/main.go
          
    - task: ArchiveFiles@2
      displayName: 'Archive binary'
      inputs:
        rootFolderOrFile: 'dist'
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/email-sender-$(goos)-$(goarch).tar.gz'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publier artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'binaries'

- stage: Deploy
  displayName: 'üöÄ D√©ploiement'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Production
    displayName: 'D√©ployer en production'
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'T√©l√©charger artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'binaries'
              downloadPath: '$(System.ArtifactsDirectory)'
              
          - task: PowerShell@2
            displayName: 'D√©ployer application'
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "üöÄ D√©ploiement en cours..."
                Start-Sleep 5
                Write-Host "‚úÖ D√©ploiement termin√©"
                
          - task: PowerShell@2
            displayName: 'Health Check'
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                Write-Host "üîç V√©rification sant√©..."
                # Test endpoints
                Write-Host "‚úÖ Application healthy"
