#!/usr/bin/env pwsh

# Phase 7.1.1 - Script de d√©ploiement staging
# D√©ploiement sur environnement de test avec validation compl√®te

param(
   [string]$Environment = "staging",
   [switch]$Validate,
   [switch]$SkipBackup
)

# D√©finir valeurs par d√©faut
if (-not $PSBoundParameters.ContainsKey('Validate')) { $Validate = $true }

Write-Host "üöÄ D√©marrage du d√©ploiement staging EMAIL_SENDER_1" -ForegroundColor Green
Write-Host "Environnement: $Environment" -ForegroundColor Cyan

# Configuration
$DOCKER_REGISTRY = "localhost:5000"
$SERVICE_NAME = "email-sender-go"
$IMAGE_TAG = "staging-$(Get-Date -Format 'yyyyMMdd-HHmmss')"

try {
   # √âtape 1: Validation des pr√©requis
   Write-Host "`nüìã V√©rification des pr√©requis..." -ForegroundColor Yellow
    
   # V√©rifier Docker
   if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
      throw "Docker n'est pas install√© ou accessible"
   }
    
   # V√©rifier Docker Compose
   if (-not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
      throw "Docker Compose n'est pas install√© ou accessible"
   }
   # V√©rifier la connectivit√© Qdrant
   Write-Host "V√©rification connectivit√© Qdrant..." -ForegroundColor Gray
   try {
      $null = Invoke-RestMethod -Uri "http://localhost:6333/collections" -Method GET -TimeoutSec 5
      Write-Host "‚úÖ Qdrant accessible" -ForegroundColor Green
   }
   catch {
      Write-Warning "‚ö†Ô∏è  Qdrant non accessible, d√©marrage automatique pr√©vu"
   }
    
   # √âtape 2: Backup si n√©cessaire
   if (-not $SkipBackup) {
      Write-Host "`nüíæ Sauvegarde de l'environnement actuel..." -ForegroundColor Yellow
      $backupDir = "backup/staging-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
      New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
        
      # Backup des volumes Docker
      if (docker volume ls -q | Where-Object { $_ -like "*qdrant*" }) {
         docker run --rm -v qdrant_data:/data -v ${PWD}/${backupDir}:/backup alpine tar czf /backup/qdrant_data.tar.gz -C /data .
         Write-Host "‚úÖ Backup Qdrant termin√©" -ForegroundColor Green
      }
   }
    
   # √âtape 3: Build de l'image Go
   Write-Host "`nüî® Construction de l'image Docker Go..." -ForegroundColor Yellow
   $buildArgs = @(
      "build",
      "-t", "${DOCKER_REGISTRY}/${SERVICE_NAME}:${IMAGE_TAG}",
      "-t", "${DOCKER_REGISTRY}/${SERVICE_NAME}:staging-latest",
      "-f", "deployment/Dockerfile.go",
      "."
   )
   $null = & docker @buildArgs
   if ($LASTEXITCODE -ne 0) {
      throw "√âchec de la construction de l'image Docker"
   }
   Write-Host "‚úÖ Image construite avec succ√®s" -ForegroundColor Green
    
   # √âtape 4: D√©ploiement avec Docker Compose
   Write-Host "`nüöÄ D√©ploiement des services..." -ForegroundColor Yellow
    
   # Variables d'environnement pour le d√©ploiement
   $env:DOCKER_IMAGE_TAG = $IMAGE_TAG
   $env:GO_ENV = "staging"
   $env:QDRANT_HOST = "qdrant"
   $env:QDRANT_PORT = "6333"
    
   # D√©marrage des services
   $composeArgs = @(
      "-f", "deployment/docker-compose.production.yml",
      "-f", "deployment/staging/docker-compose.staging.yml",
      "up", "-d"
   )
    
   & docker-compose @composeArgs
   if ($LASTEXITCODE -ne 0) {
      throw "√âchec du d√©ploiement Docker Compose"
   }
    
   # √âtape 5: Health checks
   Write-Host "`nüîç V√©rifications de sant√©..." -ForegroundColor Yellow
    
   $maxAttempts = 30
   $attempt = 0
   $servicesHealthy = $false
    
   while ($attempt -lt $maxAttempts -and -not $servicesHealthy) {
      $attempt++
      Write-Host "Tentative $attempt/$maxAttempts..." -ForegroundColor Gray
        
      # V√©rifier le service principal
      try {
         $response = Invoke-RestMethod -Uri "http://localhost:8080/health" -Method GET -TimeoutSec 5
         if ($response.status -eq "healthy") {
            Write-Host "‚úÖ Service principal op√©rationnel" -ForegroundColor Green
            $servicesHealthy = $true
         }
      }
      catch {
         Write-Host "‚è≥ Service en cours de d√©marrage..." -ForegroundColor Gray
         Start-Sleep -Seconds 2
      }
   }
    
   if (-not $servicesHealthy) {
      throw "Les services ne sont pas op√©rationnels apr√®s $maxAttempts tentatives"
   }
    
   # √âtape 6: Tests de validation
   if ($Validate) {
      Write-Host "`n‚úÖ Ex√©cution des tests de validation..." -ForegroundColor Yellow
      # Test de l'API Gateway
      try {
         $null = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/status" -Method GET
         Write-Host "‚úÖ API Gateway op√©rationnelle" -ForegroundColor Green
      }
      catch {
         throw "√âchec de validation de l'API Gateway"
      }
        
      # Test de la vectorisation
      try {
         $null = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/vectors/search" -Method POST -Body '{"query": "test", "limit": 1}' -ContentType "application/json"
         Write-Host "‚úÖ Service de vectorisation op√©rationnel" -ForegroundColor Green
      }
      catch {
         throw "√âchec de validation du service de vectorisation"
      }
        
      # Test des managers
      try {
         $managersResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/managers/status" -Method GET
         $activeManagers = ($managersResponse.managers | Where-Object { $_.status -eq "active" }).Count
         Write-Host "‚úÖ $activeManagers managers actifs" -ForegroundColor Green
      }
      catch {
         throw "√âchec de validation des managers"
      }
   }
    
   # √âtape 7: Rapport de d√©ploiement
   Write-Host "`nüìä Rapport de d√©ploiement staging" -ForegroundColor Cyan
   Write-Host "================================" -ForegroundColor Cyan
   Write-Host "Image d√©ploy√©e: ${DOCKER_REGISTRY}/${SERVICE_NAME}:${IMAGE_TAG}" -ForegroundColor White
   Write-Host "Environnement: $Environment" -ForegroundColor White
   Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor White
    
   # Lister les services actifs
   Write-Host "`nServices actifs:" -ForegroundColor White
   docker-compose -f deployment/docker-compose.production.yml -f deployment/staging/docker-compose.staging.yml ps
    
   Write-Host "`nüéâ D√©ploiement staging termin√© avec succ√®s!" -ForegroundColor Green
   Write-Host "URL de test: http://localhost:8080" -ForegroundColor Cyan
   Write-Host "Documentation: http://localhost:8080/docs" -ForegroundColor Cyan
    
}
catch {
   Write-Host "`n‚ùå √âchec du d√©ploiement: $($_.Exception.Message)" -ForegroundColor Red
    
   # Rollback automatique
   Write-Host "üîÑ Rollback automatique..." -ForegroundColor Yellow
   try {
      docker-compose -f deployment/docker-compose.production.yml -f deployment/staging/docker-compose.staging.yml down
      Write-Host "‚úÖ Rollback termin√©" -ForegroundColor Green
   }
   catch {
      Write-Host "‚ùå √âchec du rollback: $($_.Exception.Message)" -ForegroundColor Red
   }
    
   exit 1
}
