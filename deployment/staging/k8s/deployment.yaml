apiVersion: v1
kind: Namespace
metadata:
  name: branching-framework
  labels:
    app: ultra-advanced-branching
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: branching-config
  namespace: branching-framework
data:
  config.yaml: |
    # Ultra-Advanced 8-Level Branching Framework Configuration
    database:
      postgresql:
        host: postgres-service
        port: 5432
        database: branching_db
        ssl_mode: require
      qdrant:
        host: qdrant-service
        port: 6333
        collection: branching_patterns
    
    integrations:
      n8n:
        base_url: http://n8n-service:5678
        api_key: ${N8N_API_KEY}
      mcp_gateway:
        base_url: http://mcp-gateway-service:8080
        api_key: ${MCP_API_KEY}
    
    ai:
      neural_network:
        hidden_layers: [128, 64, 32]
        learning_rate: 0.001
        batch_size: 32
      pattern_analysis:
        similarity_threshold: 0.8
        max_patterns: 1000
    
    branching:
      levels:
        micro_sessions:
          enabled: true
          timeout: 300s
        event_driven:
          enabled: true
          buffer_size: 1000
        multi_dimensional:
          enabled: true
          max_dimensions: 10
        contextual_memory:
          enabled: true
          memory_size: 5000
        temporal:
          enabled: true
          retention_period: 30d
        predictive_ai:
          enabled: true
          prediction_horizon: 7d
        branching_as_code:
          enabled: true
          max_code_size: 10MB
        quantum:
          enabled: true
          max_superposition: 5
---
apiVersion: v1
kind: Secret
metadata:
  name: branching-secrets
  namespace: branching-framework
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # base64 encoded "password"
  n8n-api-key: bjhuX2FwaV9rZXk=    # base64 encoded "n8n_api_key"
  mcp-api-key: bWNwX2FwaV9rZXk=    # base64 encoded "mcp_api_key"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: branching-framework
  namespace: branching-framework
  labels:
    app: ultra-advanced-branching
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ultra-advanced-branching
  template:
    metadata:
      labels:
        app: ultra-advanced-branching
        version: v1.0.0
    spec:
      containers:
      - name: branching-framework
        image: ultra-advanced-branching:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: branching-secrets
              key: postgres-password
        - name: N8N_API_KEY
          valueFrom:
            secretKeyRef:
              name: branching-secrets
              key: n8n-api-key
        - name: MCP_API_KEY
          valueFrom:
            secretKeyRef:
              name: branching-secrets
              key: mcp-api-key
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: branching-config
---
apiVersion: v1
kind: Service
metadata:
  name: branching-framework-service
  namespace: branching-framework
  labels:
    app: ultra-advanced-branching
spec:
  selector:
    app: ultra-advanced-branching
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: branching-framework-ingress
  namespace: branching-framework
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - branching.yourdomain.com
    secretName: branching-tls
  rules:
  - host: branching.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: branching-framework-service
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: branching-framework
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: branching_db
        - name: POSTGRES_USER
          value: branching_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: branching-secrets
              key: postgres-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: branching-framework
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: branching-framework
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: branching-framework
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:latest
        ports:
        - containerPort: 6333
        - containerPort: 6334
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: qdrant-storage
        persistentVolumeClaim:
          claimName: qdrant-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-service
  namespace: branching-framework
spec:
  selector:
    app: qdrant
  ports:
  - name: http
    port: 6333
    targetPort: 6333
  - name: grpc
    port: 6334
    targetPort: 6334
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qdrant-pvc
  namespace: branching-framework
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: branching-framework-monitor
  namespace: branching-framework
  labels:
    app: ultra-advanced-branching
spec:
  selector:
    matchLabels:
      app: ultra-advanced-branching
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: branching-framework-hpa
  namespace: branching-framework
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: branching-framework
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

