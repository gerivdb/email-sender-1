// Package search - Auto-generated by RAG Code Generator
// Generated at: 2025-05-27 18:44:55
// Project: 
package search

import (

	"context"
	"fmt"
	"time"
	// "sync" // Auto-fix: unused import
	// "errors" // Auto-fix: unused import
)


// qdrant Vector database client
// embedder Embedding generation service
// cache Response cache
// metrics Performance metrics
type SearchService struct {

	qdrant QDrantClient  // Vector database client
	embedder EmbeddingService  // Embedding generation service
	cache Cache  // Response cache
	metrics *Metrics  // Performance metrics
}


// NewSearchService 
func NewSearchService(qdrant QDrantClient, embedder EmbeddingService) (*SearchService) {

	return &SearchService{
		qdrant:   qdrant,
		embedder: embedder,
		cache:    NewLRUCache(1000),
		metrics:  NewMetrics(),
	}

}


// Search 
func Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {

	// Start timing
	start := time.Now()
	defer func() {
		s.metrics.RecordSearchDuration(time.Since(start))
	}()
	
	// Validate request
	if err := validateSearchRequest(req); err != nil {
		s.metrics.IncrementSearchErrors()
		return nil, fmt.Errorf("validation failed: %w", err)
	}
	
	// Generate query embedding
	embedding, err := s.embedder.GenerateEmbedding(ctx, req.Query)
	if err != nil {
		s.metrics.IncrementEmbeddingErrors()
		return nil, fmt.Errorf("embedding generation failed: %w", err)
	}
	
	// Check cache
	cacheKey := generateCacheKey(req, embedding)
	if cached, found := s.cache.Get(cacheKey); found {
		s.metrics.IncrementCacheHits()
		return cached.(*SearchResponse), nil
	}
	
	// Perform vector search
	searchReq := &QDrantSearchRequest{
		Vector:    embedding,
		Limit:     req.Limit,
		Filter:    req.Filters,
		Threshold: req.Threshold,
	}
	
	results, err := s.qdrant.Search(ctx, "documents", searchReq)
	if err != nil {
		s.metrics.IncrementSearchErrors()
		return nil, fmt.Errorf("vector search failed: %w", err)
	}
	
	// Build response
	response := &SearchResponse{
		RequestID:    generateRequestID(),
		Results:      convertQDrantResults(results.Points),
		TotalCount:   len(results.Points),
		DurationMS:   int(time.Since(start).Milliseconds()),
	}
	
	// Cache response
	s.cache.Set(cacheKey, response, 5*time.Minute)
	s.metrics.IncrementSearchSuccess()
	
	return response, nil

}


