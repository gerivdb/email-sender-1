{
  "Basic Function": {
    "prefix": "func-basic",
    "body": [
      "function ${1:Verb-Noun} {",
      "    [CmdletBinding()]",
      "    param (",
      "        [Parameter(Mandatory = \\$true)]",
      "        [string]\\$${2:Parameter1}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            # Function logic here",
      "            ${0}",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "Basic PowerShell function with error handling"
  },
  "Advanced Function": {
    "prefix": "func-advanced",
    "body": [
      "function ${1:Verb-Noun} {",
      "    [CmdletBinding(SupportsShouldProcess = \\$true, ConfirmImpact = 'Medium')]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0, ValueFromPipeline = \\$true, ValueFromPipelineByPropertyName = \\$true)]",
      "        [string]\\$${2:Parameter1},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [string]\\$${3:Parameter2},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${4:Force}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "        \\$results = @()",
      "    }",
      "",
      "    process {",
      "        try {",
      "            foreach (\\$item in \\$${2:Parameter1}) {",
      "                if (\\$PSCmdlet.ShouldProcess(\"\\$item\", \"${5:Action}\")) {",
      "                    # Function logic here",
      "                    ${0}",
      "                    \\$results += \\$result",
      "                }",
      "            }",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "        return \\$results",
      "    }",
      "}"
    ],
    "description": "Advanced PowerShell function with pipeline support and ShouldProcess"
  },
  "Get Function": {
    "prefix": "func-get",
    "body": [
      "function Get-${1:Noun} {",
      "    [CmdletBinding()]",
      "    param (",
      "        [Parameter(Mandatory = \\$false, Position = 0, ValueFromPipeline = \\$true, ValueFromPipelineByPropertyName = \\$true)]",
      "        [string]\\$${2:Name},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${3:All}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "        \\$results = @()",
      "    }",
      "",
      "    process {",
      "        try {",
      "            if (\\$${3:All}) {",
      "                # Get all items",
      "                ${4:# Code to get all items}",
      "            }",
      "            else {",
      "                # Get specific item",
      "                ${0:# Code to get specific item}",
      "            }",
      "            \\$results += \\$result",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "        return \\$results",
      "    }",
      "}"
    ],
    "description": "PowerShell Get function template"
  },
  "Set Function": {
    "prefix": "func-set",
    "body": [
      "function Set-${1:Noun} {",
      "    [CmdletBinding(SupportsShouldProcess = \\$true, ConfirmImpact = 'Medium')]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0, ValueFromPipeline = \\$true, ValueFromPipelineByPropertyName = \\$true)]",
      "        [string]\\$${2:Name},",
      "",
      "        [Parameter(Mandatory = \\$true)]",
      "        [string]\\$${3:Value},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${4:Force}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            if (\\$PSCmdlet.ShouldProcess(\"\\$${2:Name}\", \"Set ${3:Value}\")) {",
      "                # Set logic here",
      "                ${0}",
      "            }",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "PowerShell Set function template"
  },
  "New Function": {
    "prefix": "func-new",
    "body": [
      "function New-${1:Noun} {",
      "    [CmdletBinding(SupportsShouldProcess = \\$true, ConfirmImpact = 'Medium')]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0)]",
      "        [string]\\$${2:Name},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [string]\\$${3:Path},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${4:Force}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            if (\\$PSCmdlet.ShouldProcess(\"\\$${2:Name}\", \"Create new item\")) {",
      "                # Creation logic here",
      "                ${0}",
      "                return \\$newItem",
      "            }",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "PowerShell New function template"
  },
  "Remove Function": {
    "prefix": "func-remove",
    "body": [
      "function Remove-${1:Noun} {",
      "    [CmdletBinding(SupportsShouldProcess = \\$true, ConfirmImpact = 'High')]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0, ValueFromPipeline = \\$true, ValueFromPipelineByPropertyName = \\$true)]",
      "        [string]\\$${2:Name},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${3:Force}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            if (\\$${3:Force} -or \\$PSCmdlet.ShouldProcess(\"\\$${2:Name}\", \"Remove\")) {",
      "                # Removal logic here",
      "                ${0}",
      "            }",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "PowerShell Remove function template"
  },
  "Test Function": {
    "prefix": "func-test",
    "body": [
      "function Test-${1:Noun} {",
      "    [CmdletBinding()]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0, ValueFromPipeline = \\$true, ValueFromPipelineByPropertyName = \\$true)]",
      "        [string]\\$${2:Name}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            # Test logic here",
      "            ${0}",
      "            return \\$testResult",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "            return \\$false",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "PowerShell Test function template"
  },
  "Invoke Function": {
    "prefix": "func-invoke",
    "body": [
      "function Invoke-${1:Noun} {",
      "    [CmdletBinding(SupportsShouldProcess = \\$true, ConfirmImpact = 'Medium')]",
      "    param (",
      "        [Parameter(Mandatory = \\$true, Position = 0)]",
      "        [string]\\$${2:Name},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [hashtable]\\$${3:Parameters},",
      "",
      "        [Parameter(Mandatory = \\$false)]",
      "        [switch]\\$${4:Force}",
      "    )",
      "",
      "    begin {",
      "        Write-Verbose \"Starting \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "",
      "    process {",
      "        try {",
      "            if (\\$PSCmdlet.ShouldProcess(\"\\$${2:Name}\", \"Invoke\")) {",
      "                # Invocation logic here",
      "                ${0}",
      "                return \\$result",
      "            }",
      "        }",
      "        catch {",
      "            Write-Error \"Error in \\$($MyInvocation.MyCommand.Name): $_\"",
      "        }",
      "    }",
      "",
      "    end {",
      "        Write-Verbose \"Ending \\$($MyInvocation.MyCommand.Name)\"",
      "    }",
      "}"
    ],
    "description": "PowerShell Invoke function template"
  }
}
