# Phase 3 Test Suite - Tests & Validation
# Script PowerShell pour ex√©cuter la suite compl√®te de tests de performance et d'int√©gration

param(
   [string]$TestType = "all", # all, performance, integration
   [switch]$Verbose,
   [switch]$Coverage,
   [string]$OutputDir = "./test-results"
)

Write-Host "üß™ PHASE 3: TESTS & VALIDATION - Starting Test Suite" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# Configuration
$TestDir = "tests"
$ProjectRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$TestDataDir = "$ProjectRoot/testdata"

# Cr√©er le r√©pertoire de sortie s'il n'existe pas
if (!(Test-Path $OutputDir)) {
   New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
}

function Write-TestHeader {
   param([string]$Title)
   Write-Host ""
   Write-Host "üîç $Title" -ForegroundColor Cyan
   Write-Host ("=" * 50) -ForegroundColor Cyan
}

function Run-PerformanceTests {
   Write-TestHeader "Phase 3.1.1: Tests de Performance Comparative"
    
   Write-Host "‚ö° Running AST vs RAG vs Hybrid benchmarks..." -ForegroundColor Yellow
    
   $benchmarkArgs = @(
      "test"
      "-bench=."
      "-benchmem"
      "-run=^$"
      "./tests/hybrid"
   )
    
   if ($Verbose) {
      $benchmarkArgs += "-v"
   }
    
   if ($Coverage) {
      $benchmarkArgs += "-cover"
      $benchmarkArgs += "-coverprofile=$OutputDir/performance_coverage.out"
   }
    
   try {
      Write-Host "üèÉ‚Äç‚ôÇÔ∏è Executing: go $($benchmarkArgs -join ' ')" -ForegroundColor Gray
      $result = & go @benchmarkArgs 2>&1
        
      if ($LASTEXITCODE -eq 0) {
         Write-Host "‚úÖ Performance tests completed successfully" -ForegroundColor Green
         $result | Tee-Object -FilePath "$OutputDir/performance_results.txt"
            
         # Analyser les r√©sultats de performance
         $astBench = $result | Select-String "BenchmarkASTSearch"
         $ragBench = $result | Select-String "BenchmarkRAGSearch"
         $hybridBench = $result | Select-String "BenchmarkHybridSearch"
            
         Write-Host ""
         Write-Host "üìä Performance Results Summary:" -ForegroundColor Blue
         if ($astBench) { Write-Host "  üîç AST Search: $($astBench.Line)" -ForegroundColor White }
         if ($ragBench) { Write-Host "  üìö RAG Search: $($ragBench.Line)" -ForegroundColor White }
         if ($hybridBench) { Write-Host "  üîÑ Hybrid Search: $($hybridBench.Line)" -ForegroundColor White }
            
      }
      else {
         Write-Host "‚ùå Performance tests failed" -ForegroundColor Red
         $result
         return $false
      }
   }
   catch {
      Write-Host "‚ùå Error running performance tests: $_" -ForegroundColor Red
      return $false
   }
    
   return $true
}

function Run-IntegrationTests {
   Write-TestHeader "Phase 3.1.2: Tests d'Int√©gration End-to-End"
    
   Write-Host "üîó Running integration test suite..." -ForegroundColor Yellow
    
   $integrationArgs = @(
      "test"
      "./tests/integration"
      "-run=TestHybridIntegration"
   )
    
   if ($Verbose) {
      $integrationArgs += "-v"
   }
    
   if ($Coverage) {
      $integrationArgs += "-cover"
      $integrationArgs += "-coverprofile=$OutputDir/integration_coverage.out"
   }
    
   try {
      Write-Host "üèÉ‚Äç‚ôÇÔ∏è Executing: go $($integrationArgs -join ' ')" -ForegroundColor Gray
      $result = & go @integrationArgs 2>&1
        
      if ($LASTEXITCODE -eq 0) {
         Write-Host "‚úÖ Integration tests completed successfully" -ForegroundColor Green
         $result | Tee-Object -FilePath "$OutputDir/integration_results.txt"
            
         # Analyser les r√©sultats d'int√©gration
         $passed = ($result | Select-String "PASS").Count
         $failed = ($result | Select-String "FAIL").Count
            
         Write-Host ""
         Write-Host "üìä Integration Results Summary:" -ForegroundColor Blue
         Write-Host "  ‚úÖ Passed: $passed" -ForegroundColor Green
         Write-Host "  ‚ùå Failed: $failed" -ForegroundColor Red
            
      }
      else {
         Write-Host "‚ùå Integration tests failed" -ForegroundColor Red
         $result
         return $false
      }
   }
   catch {
      Write-Host "‚ùå Error running integration tests: $_" -ForegroundColor Red
      return $false
   }
    
   return $true
}

function Run-QualityTests {
   Write-TestHeader "Tests de Qualit√© et Validation"
    
   Write-Host "üéØ Running quality validation tests..." -ForegroundColor Yellow
    
   $qualityArgs = @(
      "test"
      "./tests/hybrid"
      "-run=TestSearchQualityComparison"
   )
    
   if ($Verbose) {
      $qualityArgs += "-v"
   }
    
   try {
      Write-Host "üèÉ‚Äç‚ôÇÔ∏è Executing: go $($qualityArgs -join ' ')" -ForegroundColor Gray
      $result = & go @qualityArgs 2>&1
        
      if ($LASTEXITCODE -eq 0) {
         Write-Host "‚úÖ Quality tests completed successfully" -ForegroundColor Green
         $result | Tee-Object -FilePath "$OutputDir/quality_results.txt"
      }
      else {
         Write-Host "‚ùå Quality tests failed" -ForegroundColor Red
         $result
         return $false
      }
   }
   catch {
      Write-Host "‚ùå Error running quality tests: $_" -ForegroundColor Red
      return $false
   }
    
   return $true
}

function Generate-TestReport {
   Write-TestHeader "G√©n√©ration du Rapport de Test"
    
   $reportFile = "$OutputDir/phase3_test_report.md"
    
   $report = @"
# PHASE 3: TESTS & VALIDATION - Rapport d'Ex√©cution

## üìÖ Ex√©cution du $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

## üéØ R√©sum√© des Tests

### Phase 3.1.1: Tests de Performance Comparative
- **Status**: $(if (Test-Path "$OutputDir/performance_results.txt") { "‚úÖ COMPLETED" } else { "‚ùå FAILED" })
- **Fichier de r√©sultats**: performance_results.txt

### Phase 3.1.2: Tests d'Int√©gration End-to-End  
- **Status**: $(if (Test-Path "$OutputDir/integration_results.txt") { "‚úÖ COMPLETED" } else { "‚ùå FAILED" })
- **Fichier de r√©sultats**: integration_results.txt

### Tests de Qualit√©
- **Status**: $(if (Test-Path "$OutputDir/quality_results.txt") { "‚úÖ COMPLETED" } else { "‚ùå FAILED" })
- **Fichier de r√©sultats**: quality_results.txt

## üìä M√©triques de Performance

"@

   if (Test-Path "$OutputDir/performance_results.txt") {
      $perfResults = Get-Content "$OutputDir/performance_results.txt"
      $report += @"

### Benchmarks
``````
$($perfResults -join "`n")
``````

"@
   }

   $report += @"

## üîß Configuration de Test
- **Type de test**: $TestType
- **Mode verbose**: $Verbose
- **Couverture de code**: $Coverage
- **R√©pertoire de sortie**: $OutputDir

## üìù Recommandations

1. Analyser les r√©sultats de performance pour identifier les goulots d'√©tranglement
2. V√©rifier que tous les tests d'int√©gration passent
3. Surveiller la qualit√© des r√©sultats de recherche
4. Optimiser les modes hybrides selon les m√©triques

---
*Rapport g√©n√©r√© automatiquement par le script de test Phase 3*
"@

   $report | Out-File -FilePath $reportFile -Encoding UTF8
   Write-Host "üìù Rapport g√©n√©r√©: $reportFile" -ForegroundColor Green
}

# Ex√©cution principale
$startTime = Get-Date
$allTestsPassed = $true

try {
   # V√©rifier les pr√©requis
   Write-Host "üîß Checking prerequisites..." -ForegroundColor Gray
    
   if (!(Get-Command go -ErrorAction SilentlyContinue)) {
      Write-Host "‚ùå Go is not installed or not in PATH" -ForegroundColor Red
      exit 1
   }
    
   if (!(Test-Path $TestDataDir)) {
      Write-Host "‚ö†Ô∏è  Test data directory not found, creating..." -ForegroundColor Yellow
      New-Item -ItemType Directory -Path $TestDataDir -Force | Out-Null
   }
    
   # Ex√©cuter les tests selon le type sp√©cifi√©
   switch ($TestType.ToLower()) {
      "performance" {
         $allTestsPassed = Run-PerformanceTests
      }
      "integration" {
         $allTestsPassed = Run-IntegrationTests
      }
      "quality" {
         $allTestsPassed = Run-QualityTests
      }
      "all" {
         $allTestsPassed = Run-PerformanceTests
         $allTestsPassed = $allTestsPassed -and (Run-IntegrationTests)
         $allTestsPassed = $allTestsPassed -and (Run-QualityTests)
      }
      default {
         Write-Host "‚ùå Invalid test type: $TestType. Use: all, performance, integration, quality" -ForegroundColor Red
         exit 1
      }
   }
    
   # G√©n√©rer le rapport
   Generate-TestReport
    
   $endTime = Get-Date
   $duration = $endTime - $startTime
    
   Write-Host ""
   Write-Host "üèÅ PHASE 3 Test Suite Complete!" -ForegroundColor Green
   Write-Host "‚è±Ô∏è  Total execution time: $($duration.ToString('mm\:ss'))" -ForegroundColor Gray
    
   if ($allTestsPassed) {
      Write-Host "‚úÖ All tests passed successfully!" -ForegroundColor Green
      exit 0
   }
   else {
      Write-Host "‚ùå Some tests failed. Check the output above." -ForegroundColor Red
      exit 1
   }
}
catch {
   Write-Host "‚ùå Fatal error during test execution: $_" -ForegroundColor Red
   exit 1
}
