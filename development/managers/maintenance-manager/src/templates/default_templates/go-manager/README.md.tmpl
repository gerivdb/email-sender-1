# {{.name}} Manager

{{.description}}

## Features

- RESTful HTTP API
- Health checks and monitoring
{{- if .hasStorage}}
- Database integration
{{- end}}
{{- if .hasMonitoring}}
- Prometheus metrics
{{- end}}
{{- if .hasSecurity}}
- Data encryption/decryption
{{- end}}
- Graceful shutdown
- Structured logging

## Configuration

The service runs on port {{.port}} by default.

## API Endpoints

### Health Check
```
GET /health
```

### Service Status
```
GET /api/v1/status
```

{{- if .hasMonitoring}}
### Metrics
```
GET /metrics
```
{{- end}}

{{- if .hasSecurity}}
### Encryption
```
POST /api/v1/encrypt
{
  "data": "plaintext data"
}
```

### Decryption
```
POST /api/v1/decrypt
{
  "data": "encrypted_data_bytes"
}
```
{{- end}}

## Development

### Prerequisites

- Go 1.21 or higher
{{- if .hasStorage}}
- Database (PostgreSQL/MySQL)
{{- end}}

### Setup

1. Install dependencies:
```bash
go mod tidy
```

2. Run the service:
```bash
go run main.go
```

3. Test the service:
```bash
curl http://localhost:{{.port}}/health
```

### Testing

Run unit tests:
```bash
go test -v ./...
```

Run with coverage:
```bash
go test -cover ./...
```

## Deployment

### Docker

Build the Docker image:
```bash
docker build -t {{lower .name}}-manager .
```

Run the container:
```bash
docker run -p {{.port}}:{{.port}} {{lower .name}}-manager
```

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| PORT | Service port | {{.port}} |
| LOG_LEVEL | Logging level | info |
{{- if .hasStorage}}
| DATABASE_URL | Database connection string | - |
{{- end}}

## Monitoring

{{- if .hasMonitoring}}
The service exposes Prometheus metrics at `/metrics` endpoint:

- `{{lower .name}}_requests_total` - Total number of requests
- `{{lower .name}}_request_duration_seconds` - Request duration histogram
- `{{lower .name}}_active_connections` - Number of active connections
{{- end}}

Health checks are available at `/health` endpoint.

## License

MIT License
