# Test PowerShell Integration with Real-time Bridge
# Section 8.2 - Optimisation Surveillance Temps R√©el
# This script demonstrates the integration between PowerShell FileSystemWatcher and Go bridge

[CmdletBinding()]
param(
   [string]$BridgeUrl = "http://localhost:8080",
   [string]$TestPath = ".\test-files",
   [int]$DurationSeconds = 30
)

Write-Host "üöÄ Test d'int√©gration PowerShell - Bridge Go" -ForegroundColor Cyan
Write-Host "Section 8.2 - Surveillance Temps R√©el" -ForegroundColor Gray
Write-Host ""

# Cr√©er le dossier de test s'il n'existe pas
if (-not (Test-Path $TestPath)) {
   New-Item -ItemType Directory -Path $TestPath -Force | Out-Null
   Write-Host "üìÅ Dossier de test cr√©√©: $TestPath" -ForegroundColor Green
}

# Fonction pour v√©rifier la connectivit√© au bridge
function Test-BridgeConnectivity {
   param([string]$Url)
    
   try {
      $response = Invoke-RestMethod -Uri "$Url/health" -Method GET -TimeoutSec 5
      Write-Host "‚úÖ Bridge Go d√©tect√© et op√©rationnel" -ForegroundColor Green
      Write-Host "   Status: $($response.status)" -ForegroundColor Gray
      Write-Host "   Uptime: $($response.uptime)" -ForegroundColor Gray
      return $true
   }
   catch {
      Write-Host "‚ùå Bridge Go non disponible √† $Url" -ForegroundColor Red
      Write-Host "   Erreur: $($_.Exception.Message)" -ForegroundColor Red
      return $false
   }
}

# Fonction pour cr√©er des fichiers de test
function New-TestFiles {
   param([string]$Path)
   $testFiles = @(
      @{ Name = "test-script.ps1"; Content = "# Test PowerShell script`nWrite-Host 'Hello World'" },
      @{ Name = "duplicate-function.py"; Content = "def test():`n    print('Hello from Python')`n    return True" },
      @{ Name = "config.json"; Content = '{"test": true, "environment": "development"}' },
      @{ Name = "readme.md"; Content = "# Test Documentation`nThis is a test file." }
   )
    
   foreach ($file in $testFiles) {
      $filePath = Join-Path $Path $file.Name
      Set-Content -Path $filePath -Value $file.Content -Encoding UTF8
      Write-Host "üìÑ Fichier cr√©√©: $($file.Name)" -ForegroundColor Yellow
   }
}

# Fonction pour simuler des modifications
function Start-FileModificationSimulation {
   param([string]$Path, [int]$Duration)
    
   $endTime = (Get-Date).AddSeconds($Duration)
   $fileCount = 0
    
   Write-Host "üîÑ Simulation de modifications pendant $Duration secondes..." -ForegroundColor Cyan
    
   while ((Get-Date) -lt $endTime) {
      # S√©lectionner un fichier au hasard
      $files = Get-ChildItem $Path -File
      if ($files.Count -gt 0) {
         $randomFile = $files | Get-Random
            
         # Ajouter du contenu au fichier
         $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
         Add-Content -Path $randomFile.FullName -Value "`n// Modification automatique √† $timestamp"
            
         $fileCount++
         Write-Host "   ‚úèÔ∏è  Modification #$fileCount : $($randomFile.Name)" -ForegroundColor Green
            
         # Attendre un d√©lai al√©atoire
         Start-Sleep -Seconds (Get-Random -Minimum 2 -Maximum 5)
      }
   }
    
   Write-Host "‚úÖ Simulation termin√©e: $fileCount modifications effectu√©es" -ForegroundColor Green
}

# Fonction pour v√©rifier les √©v√©nements dans le bridge
function Get-BridgeEvents {
   param([string]$Url)
    
   try {
      $response = Invoke-RestMethod -Uri "$Url/events" -Method GET -TimeoutSec 5
      return $response
   }
   catch {
      Write-Host "‚ö†Ô∏è  Impossible de r√©cup√©rer les √©v√©nements: $($_.Exception.Message)" -ForegroundColor Yellow
      return $null
   }
}

# Fonction pour afficher le statut du bridge
function Show-BridgeStatus {
   param([string]$Url)
    
   try {
      $status = Invoke-RestMethod -Uri "$Url/status" -Method GET -TimeoutSec 5
        
      Write-Host "`nüìä Statut du Bridge Go:" -ForegroundColor Cyan
      Write-Host "   √âv√©nements trait√©s: $($status.events_processed)" -ForegroundColor Gray
      Write-Host "   √âv√©nements en buffer: $($status.buffer_size)" -ForegroundColor Gray
      Write-Host "   Derni√®re activit√©: $($status.last_activity)" -ForegroundColor Gray
        
      if ($status.file_patterns) {
         Write-Host "   Types de fichiers surveill√©s: $($status.file_patterns -join ', ')" -ForegroundColor Gray
      }
        
      return $status
   }
   catch {
      Write-Host "‚ö†Ô∏è  Impossible de r√©cup√©rer le statut: $($_.Exception.Message)" -ForegroundColor Yellow
      return $null
   }
}

# === D√âBUT DU TEST ===

Write-Host "üîç √âtape 1: V√©rification de la connectivit√©" -ForegroundColor Yellow
$bridgeAvailable = Test-BridgeConnectivity -Url $BridgeUrl

if (-not $bridgeAvailable) {
   Write-Host ""
   Write-Host "‚ùå Test interrompu: Bridge Go non disponible" -ForegroundColor Red
   Write-Host "üí° Assurez-vous que le bridge est d√©marr√© avec:" -ForegroundColor Yellow
   Write-Host "   cd bridges && go run demo/main.go" -ForegroundColor Cyan
   exit 1
}

Write-Host "`nüìÅ √âtape 2: Cr√©ation des fichiers de test" -ForegroundColor Yellow
New-TestFiles -Path $TestPath

Write-Host "`nüìä √âtape 3: Statut initial du bridge" -ForegroundColor Yellow
$initialStatus = Show-BridgeStatus -Url $BridgeUrl

Write-Host "`nüöÄ √âtape 4: D√©marrage de la surveillance PowerShell" -ForegroundColor Yellow
Write-Host "üí° Dans un autre terminal, ex√©cutez:" -ForegroundColor Cyan
Write-Host "   .\Manage-Duplications.ps1 -Action watch -Path '$TestPath' -RealtimeBridgeUrl '$BridgeUrl'" -ForegroundColor White

Write-Host "`nAppuyez sur une touche pour continuer une fois la surveillance d√©marr√©e..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

Write-Host "`nüîÑ √âtape 5: Simulation des modifications" -ForegroundColor Yellow
Start-FileModificationSimulation -Path $TestPath -Duration $DurationSeconds

Write-Host "`n‚è≥ Attente de traitement des √©v√©nements..." -ForegroundColor Yellow
Start-Sleep -Seconds 3

Write-Host "`nüìä √âtape 6: Statut final du bridge" -ForegroundColor Yellow
$finalStatus = Show-BridgeStatus -Url $BridgeUrl

Write-Host "`nüìã √âtape 7: R√©cup√©ration des √©v√©nements" -ForegroundColor Yellow
$events = Get-BridgeEvents -Url $BridgeUrl

if ($events) {
   Write-Host "‚úÖ √âv√©nements r√©cup√©r√©s: $($events.Count)" -ForegroundColor Green
    
   # Afficher les derniers √©v√©nements
   $recentEvents = $events | Select-Object -Last 5
   foreach ($event in $recentEvents) {
      Write-Host "   üìù $($event.timestamp): $($event.type) - $($event.file_path)" -ForegroundColor Gray
   }
}
else {
   Write-Host "‚ö†Ô∏è  Aucun √©v√©nement r√©cup√©r√©" -ForegroundColor Yellow
}

# Calculer les m√©triques
if ($initialStatus -and $finalStatus) {
   $eventsGenerated = $finalStatus.events_processed - $initialStatus.events_processed
   Write-Host "`nüìà M√©triques du test:" -ForegroundColor Cyan
   Write-Host "   √âv√©nements g√©n√©r√©s: $eventsGenerated" -ForegroundColor Green
   Write-Host "   Fichiers cr√©√©s: 4" -ForegroundColor Green
   Write-Host "   Modifications simul√©es: Variable" -ForegroundColor Green
}

Write-Host "`nüßπ Nettoyage des fichiers de test..." -ForegroundColor Yellow
if (Test-Path $TestPath) {
   Remove-Item $TestPath -Recurse -Force
   Write-Host "‚úÖ Fichiers de test supprim√©s" -ForegroundColor Green
}

Write-Host "`n‚úÖ Test d'int√©gration termin√© avec succ√®s!" -ForegroundColor Green
Write-Host "üìã R√©sum√©:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ FileSystemWatcher PowerShell OK" -ForegroundColor Green
Write-Host "   ‚Ä¢ Communication HTTP avec Bridge Go OK" -ForegroundColor Green
Write-Host "   ‚Ä¢ Traitement d'√©v√©nements en temps r√©el OK" -ForegroundColor Green
Write-Host "   ‚Ä¢ Int√©gration Section 8.2 compl√®te OK" -ForegroundColor Green
