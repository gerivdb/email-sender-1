# Enterprise Monitoring Stack
# Ultra-Advanced 8-Level Branching Framework - Monitoring and Observability
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-enterprise-config
  namespace: branching-framework-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.0.0"
    environment: production
    tier: enterprise
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'branching-framework-enterprise'
        environment: 'production'
        region: 'multi-region'
        
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
        timeout: 10s
        api_version: v2
        
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
        
    # Kubernetes pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
        
    # Branching Framework Enterprise
    - job_name: 'branching-framework-enterprise'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - branching-framework-enterprise
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: branching-framework-enterprise
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name
      scrape_interval: 15s
      metrics_path: /metrics
      
    # AI/ML Model Metrics
    - job_name: 'ai-models'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - branching-framework-enterprise
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_component]
        action: keep
        regex: ai-predictor
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      scrape_interval: 10s
      
    # Database metrics
    - job_name: 'postgresql-exporter'
      static_configs:
      - targets: ['postgres-exporter.branching-framework-enterprise.svc.cluster.local:9187']
      scrape_interval: 30s
      
    - job_name: 'redis-exporter'
      static_configs:
      - targets: ['redis-exporter.branching-framework-enterprise.svc.cluster.local:9121']
      scrape_interval: 30s
      
    # Infrastructure metrics
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        action: keep
        regex: node-exporter
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http-metrics
        
    # NGINX Ingress metrics
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_container_port_number]
        action: keep
        regex: 10254
        
  # Alerting rules for enterprise monitoring
  alert_rules.yml: |
    groups:
    - name: branching-framework-enterprise
      rules:
      # High-level service availability
      - alert: ServiceDown
        expr: up{job="branching-framework-enterprise"} == 0
        for: 1m
        labels:
          severity: critical
          service: branching-framework
        annotations:
          summary: "Branching Framework service is down"
          description: "Branching Framework service has been down for more than 1 minute"
          
      # Response time alerts
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="branching-framework-enterprise"}[5m])) > 0.05
        for: 5m
        labels:
          severity: warning
          service: branching-framework
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is above 50ms for 5 minutes"
          
      # Error rate alerts
      - alert: HighErrorRate
        expr: rate(http_requests_total{job="branching-framework-enterprise",status=~"5.."}[5m]) / rate(http_requests_total{job="branching-framework-enterprise"}[5m]) > 0.01
        for: 2m
        labels:
          severity: warning
          service: branching-framework
        annotations:
          summary: "High error rate detected"
          description: "Error rate is above 1% for 2 minutes"
          
      # Memory usage alerts
      - alert: HighMemoryUsage
        expr: process_resident_memory_bytes{job="branching-framework-enterprise"} / 1024 / 1024 / 1024 > 6
        for: 5m
        labels:
          severity: warning
          service: branching-framework
        annotations:
          summary: "High memory usage"
          description: "Memory usage is above 6GB for 5 minutes"
          
      # CPU usage alerts
      - alert: HighCPUUsage
        expr: rate(process_cpu_seconds_total{job="branching-framework-enterprise"}[5m]) > 3.5
        for: 5m
        labels:
          severity: warning
          service: branching-framework
        annotations:
          summary: "High CPU usage"
          description: "CPU usage is above 3.5 cores for 5 minutes"
          
      # AI Model performance alerts
      - alert: AIModelPredictionLatency
        expr: histogram_quantile(0.95, rate(ai_prediction_duration_seconds_bucket[5m])) > 0.2
        for: 3m
        labels:
          severity: warning
          service: ai-predictor
        annotations:
          summary: "AI model prediction latency is high"
          description: "95th percentile AI prediction latency is above 200ms"
          
      - alert: AIModelAccuracy
        expr: ai_model_accuracy < 0.94
        for: 10m
        labels:
          severity: critical
          service: ai-predictor
        annotations:
          summary: "AI model accuracy below threshold"
          description: "AI model accuracy is below 94% threshold"
          
      # 8-Level Framework specific alerts
      - alert: Level8QuantumCoherence
        expr: quantum_coherence_time_seconds < 3600
        for: 5m
        labels:
          severity: warning
          service: quantum-branching
        annotations:
          summary: "Quantum coherence time is low"
          description: "Level 8 quantum coherence time is below 1 hour"
          
      - alert: Level6PredictionTimeout
        expr: increase(ai_prediction_timeouts_total[5m]) > 10
        for: 2m
        labels:
          severity: warning
          service: predictive-ai
        annotations:
          summary: "AI prediction timeouts increasing"
          description: "Level 6 AI predictions are timing out frequently"
          
      # Database alerts
      - alert: PostgreSQLConnectionsHigh
        expr: pg_stat_database_numbackends / pg_settings_max_connections * 100 > 80
        for: 5m
        labels:
          severity: warning
          service: postgresql
        annotations:
          summary: "PostgreSQL connections high"
          description: "PostgreSQL connection usage is above 80%"
          
      - alert: RedisMemoryUsageHigh
        expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 > 90
        for: 5m
        labels:
          severity: critical
          service: redis
        annotations:
          summary: "Redis memory usage high"
          description: "Redis memory usage is above 90%"
          
    - name: kubernetes-infrastructure
      rules:
      # Node alerts
      - alert: NodeNotReady
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 10m
        labels:
          severity: critical
        annotations:
          summary: "Kubernetes node not ready"
          description: "Node {{ $labels.node }} has been not ready for more than 10 minutes"
          
      # Pod alerts
      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) * 60 * 15 > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"
          
      # Storage alerts
      - alert: PersistentVolumeUsageHigh
        expr: kubelet_volume_stats_used_bytes / kubelet_volume_stats_capacity_bytes * 100 > 85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Persistent volume usage high"
          description: "PV usage is above 85%"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-enterprise
  namespace: branching-framework-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.0.0"
    environment: production
    tier: enterprise
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "2.0.0"
        environment: production
        tier: enterprise
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus-enterprise
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=100GB'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--web.route-prefix=/'
        - '--web.enable-admin-api'
        - '--log.level=info'
        - '--log.format=json'
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
            ephemeral-storage: "10Gi"
          limits:
            memory: "8Gi"
            cpu: "2000m"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
          readOnly: true
        - name: storage
          mountPath: /prometheus
        - name: rules
          mountPath: /etc/prometheus/rules
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: prometheus-enterprise-config
          defaultMode: 0444
      - name: rules
        configMap:
          name: prometheus-enterprise-config
          defaultMode: 0444
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "monitoring"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-enterprise
  namespace: branching-framework-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.0.0"
    environment: production
    tier: enterprise
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9090
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: branching-framework-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.0.0"
    environment: production
    tier: enterprise
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
