# Enterprise Redis Cluster Configuration
# Ultra-Advanced 8-Level Branching Framework - Redis Cluster
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-enterprise-config
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.2"
    environment: production
    tier: enterprise
data:
  redis.conf: |
    # Redis Enterprise Configuration for Branching Framework
    
    # Network and Security
    bind 0.0.0.0
    port 6379
    protected-mode yes
    requirepass CHANGE_ME_ENTERPRISE_REDIS_PASSWORD
    
    # TLS Configuration
    tls-port 6380
    tls-cert-file /etc/ssl/certs/redis.crt
    tls-key-file /etc/ssl/private/redis.key
    tls-ca-cert-file /etc/ssl/certs/ca.crt
    tls-protocols "TLSv1.2 TLSv1.3"
    tls-ciphersuites "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256"
    tls-ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
    tls-prefer-server-ciphers yes
    
    # Memory Management
    maxmemory 6gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 10
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF Configuration
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    
    # Replication
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync yes
    repl-diskless-sync-delay 5
    repl-ping-replica-period 10
    repl-timeout 60
    repl-disable-tcp-nodelay no
    repl-backlog-size 128mb
    repl-backlog-ttl 3600
    
    # Cluster Configuration
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 15000
    cluster-require-full-coverage no
    cluster-migration-barrier 1
    cluster-allow-reads-when-down no
    
    # Logging
    loglevel notice
    logfile /var/log/redis/redis.log
    syslog-enabled yes
    syslog-ident redis
    syslog-facility local0
    
    # Performance Tuning
    tcp-keepalive 300
    tcp-backlog 511
    timeout 0
    databases 16
    hz 10
    dynamic-hz yes
    
    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Latency Monitoring
    latency-monitor-threshold 100
    
    # Client Output Buffer Limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Memory Usage Optimization
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    
    # Active Rehashing
    activerehashing yes
    
    # RDB and AOF Loading
    rdb-save-incremental-fsync yes
    aof-rewrite-incremental-fsync yes
    
    # Lua Scripting
    lua-time-limit 5000
    
    # Redis Modules (if needed)
    # loadmodule /usr/lib/redis/modules/redisearch.so
    # loadmodule /usr/lib/redis/modules/redisjson.so
    # loadmodule /usr/lib/redis/modules/redistimeseries.so
    
  sentinel.conf: |
    # Redis Sentinel Configuration
    
    port 26379
    sentinel announce-ip auto
    sentinel announce-port 26379
    
    # Monitor the Redis master
    sentinel monitor mymaster redis-enterprise-0.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local 6379 2
    sentinel auth-pass mymaster CHANGE_ME_ENTERPRISE_REDIS_PASSWORD
    sentinel down-after-milliseconds mymaster 30000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 180000
    sentinel deny-scripts-reconfig yes
    
    # Logging
    logfile /var/log/redis/sentinel.log
    loglevel notice
    
    # Security
    requirepass CHANGE_ME_ENTERPRISE_REDIS_SENTINEL_PASSWORD
    
  redis-exporter.env: |
    REDIS_ADDR=redis://localhost:6379
    REDIS_PASSWORD=CHANGE_ME_ENTERPRISE_REDIS_PASSWORD
    REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
    REDIS_EXPORTER_SKIP_TLS_VERIFICATION=false
    REDIS_EXPORTER_LOG_FORMAT=json
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-enterprise
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.2"
    environment: production
    tier: enterprise
spec:
  serviceName: redis-enterprise-headless
  replicas: 6  # 3 masters + 3 replicas for HA
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/version: "7.2"
        environment: production
        tier: enterprise
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: redis-enterprise
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - redis
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: redis-cluster-init
        image: redis:7.2-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Initializing Redis cluster configuration..."
          
          # Wait for DNS resolution
          until nslookup redis-enterprise-headless; do
            echo "Waiting for DNS..."
            sleep 2
          done
          
          # Initialize cluster configuration
          if [ ! -f /data/nodes.conf ]; then
            echo "Creating initial cluster configuration..."
            touch /data/nodes.conf
            chmod 644 /data/nodes.conf
          fi
          
          echo "Redis cluster initialization complete"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsUser: 999
          runAsGroup: 999
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: redis-tls
          containerPort: 6380
          protocol: TCP
        - name: cluster
          containerPort: 16379
          protocol: TCP
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-enterprise-credentials
              key: password
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
          limits:
            memory: "8Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-ssl
          mountPath: /etc/ssl
          readOnly: true
        - name: redis-logs
          mountPath: /var/log/redis
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.54.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-enterprise-credentials
              key: password
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        - name: REDIS_EXPORTER_LOG_FORMAT
          value: "json"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
      volumes:
      - name: redis-config
        configMap:
          name: redis-enterprise-config
          defaultMode: 0444
      - name: redis-ssl
        secret:
          secretName: redis-ssl-certificates
          defaultMode: 0400
      - name: redis-logs
        emptyDir:
          sizeLimit: 2Gi
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: redis-enterprise
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.2"
    environment: production
    tier: enterprise
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: redis-tls
    port: 6380
    targetPort: redis-tls
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
---
apiVersion: v1
kind: Service
metadata:
  name: redis-enterprise-headless
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.2"
    environment: production
    tier: enterprise
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: cluster
    port: 16379
    targetPort: cluster
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
---
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-setup
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cluster-setup
    app.kubernetes.io/version: "7.2"
    environment: production
    tier: enterprise
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cluster-setup
    spec:
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-setup
        image: redis:7.2-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Setting up Redis cluster..."
          
          # Wait for all Redis pods to be ready
          for i in $(seq 0 5); do
            until redis-cli -h redis-enterprise-$i.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local -p 6379 -a $REDIS_PASSWORD ping; do
              echo "Waiting for redis-enterprise-$i..."
              sleep 5
            done
          done
          
          # Create cluster
          redis-cli --cluster create \
            redis-enterprise-0.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            redis-enterprise-1.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            redis-enterprise-2.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            redis-enterprise-3.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            redis-enterprise-4.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            redis-enterprise-5.redis-enterprise-headless.branching-framework-enterprise.svc.cluster.local:6379 \
            --cluster-replicas 1 \
            --cluster-yes \
            -a $REDIS_PASSWORD
          
          echo "Redis cluster setup complete!"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-enterprise-credentials
              key: password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
