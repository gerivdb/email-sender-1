# Enterprise Qdrant Vector Database Deployment
# Ultra-Advanced 8-Level Branching Framework - AI Vector Storage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    environment: production
data:
  config.yaml: |
    log_level: INFO
    web:
      host: 0.0.0.0
      port: 6333
    grpc:
      host: 0.0.0.0
      port: 6334
    service:
      max_request_size_mb: 32
      max_workers: 0
      enable_cors: true
      grpc_timeout_ms: 30000
    storage:
      storage_path: /qdrant/storage
      snapshots_path: /qdrant/snapshots
      temp_path: /qdrant/temp
      on_disk_payload: true
      wal_capacity_mb: 32
      wal_segments_ahead: 0
      performance:
        max_search_threads: 0
      hnsw_config:
        m: 16
        ef_construct: 100
        full_scan_threshold: 10000
        max_indexing_threads: 0
      optimizers:
        deleted_threshold: 0.2
        vacuum_min_vector_number: 1000
        default_segment_number: 0
        max_segment_size_kb: null
        memmap_threshold_kb: null
        indexing_threshold_kb: 20000
        flush_interval_sec: 5
        max_optimization_threads: 1
    telemetry_disabled: false
    cluster:
      enabled: true
      p2p:
        port: 6335
      consensus:
        tick_period_ms: 100
        tick_timeout_ms: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-headless
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    environment: production
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
  ports:
  - name: http
    port: 6333
    targetPort: 6333
  - name: grpc
    port: 6334
    targetPort: 6334
  - name: p2p
    port: 6335
    targetPort: 6335

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-service
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "6333"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
  ports:
  - name: http
    port: 6333
    targetPort: 6333
    protocol: TCP
  - name: grpc
    port: 6334
    targetPort: 6334
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    app.kubernetes.io/version: "1.7.0"
    environment: production
    tier: enterprise
spec:
  serviceName: qdrant-headless
  replicas: 3  # High availability cluster
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: qdrant
      app.kubernetes.io/component: vector-database
      environment: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qdrant
        app.kubernetes.io/component: vector-database
        app.kubernetes.io/version: "1.7.0"
        environment: production
        tier: enterprise
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6333"
        prometheus.io/path: "/metrics"
        co.elastic.logs/enabled: "true"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - qdrant
              topologyKey: kubernetes.io/hostname
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.7.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 6333
          protocol: TCP
        - name: grpc
          containerPort: 6334
          protocol: TCP
        - name: p2p
          containerPort: 6335
          protocol: TCP
        env:
        - name: QDRANT__SERVICE__HOST
          value: "0.0.0.0"
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__CLUSTER__ENABLED
          value: "true"
        - name: QDRANT__CLUSTER__P2P__PORT
          value: "6335"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: QDRANT__CLUSTER__P2P__HOST
          value: "$(POD_NAME).qdrant-headless.branching-framework-enterprise.svc.cluster.local"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            ephemeral-storage: "10Gi"
          limits:
            memory: "8Gi"
            cpu: "2000m"
            ephemeral-storage: "50Gi"
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
        - name: qdrant-config
          mountPath: /qdrant/config
          readOnly: true
        - name: temp-storage
          mountPath: /qdrant/temp
        livenessProbe:
          httpGet:
            path: /readyz
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 6333
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /readyz
            port: 6333
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: qdrant-config
        configMap:
          name: qdrant-config
      - name: temp-storage
        emptyDir:
          sizeLimit: 5Gi
  volumeClaimTemplates:
  - metadata:
      name: qdrant-storage
      labels:
        app.kubernetes.io/name: qdrant
        app.kubernetes.io/component: vector-database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Gi  # Enterprise-grade storage
      storageClassName: fast-ssd  # High-performance storage

---
apiVersion: v1
kind: Secret
metadata:
  name: qdrant-auth
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    environment: production
type: Opaque
stringData:
  api-key: "enterprise-qdrant-api-key-secure-token-2024"
  admin-token: "qdrant-admin-secure-token-enterprise-level"

---
# Qdrant Cluster Bootstrap Job
apiVersion: batch/v1
kind: Job
metadata:
  name: qdrant-cluster-init
  namespace: branching-framework-enterprise
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: cluster-init
    environment: production
spec:
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qdrant
        app.kubernetes.io/component: cluster-init
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: cluster-init
        image: curlimages/curl:8.4.0
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for Qdrant nodes to be ready..."
          sleep 30
          
          # Wait for all nodes to be ready
          for i in 0 1 2; do
            echo "Checking qdrant-${i}..."
            until curl -s http://qdrant-${i}.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/readyz; do
              echo "Waiting for qdrant-${i} to be ready..."
              sleep 10
            done
            echo "qdrant-${i} is ready"
          done
          
          # Initialize collections for the 8-level framework
          echo "Creating enterprise vector collections..."
          
          # Level 5: Temporal Operations Collection
          curl -X PUT http://qdrant-0.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/collections/temporal_operations \
            -H "Content-Type: application/json" \
            -d '{
              "vectors": {
                "size": 768,
                "distance": "Cosine"
              },
              "optimizers_config": {
                "default_segment_number": 2,
                "max_optimization_threads": 2
              },
              "hnsw_config": {
                "m": 16,
                "ef_construct": 200,
                "full_scan_threshold": 10000
              },
              "shard_number": 3,
              "replication_factor": 2
            }'
          
          # Level 6: Predictive AI Collection
          curl -X PUT http://qdrant-0.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/collections/predictive_patterns \
            -H "Content-Type: application/json" \
            -d '{
              "vectors": {
                "size": 1024,
                "distance": "Cosine"
              },
              "optimizers_config": {
                "default_segment_number": 3,
                "max_optimization_threads": 4
              },
              "hnsw_config": {
                "m": 32,
                "ef_construct": 400,
                "full_scan_threshold": 20000
              },
              "shard_number": 3,
              "replication_factor": 2
            }'
          
          # Level 7: Branching-as-Code Collection
          curl -X PUT http://qdrant-0.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/collections/code_semantics \
            -H "Content-Type: application/json" \
            -d '{
              "vectors": {
                "size": 512,
                "distance": "Cosine"
              },
              "optimizers_config": {
                "default_segment_number": 2,
                "max_optimization_threads": 2
              },
              "hnsw_config": {
                "m": 16,
                "ef_construct": 200,
                "full_scan_threshold": 15000
              },
              "shard_number": 3,
              "replication_factor": 2
            }'
          
          # Level 8: Quantum Superposition Collection
          curl -X PUT http://qdrant-0.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/collections/quantum_states \
            -H "Content-Type: application/json" \
            -d '{
              "vectors": {
                "size": 2048,
                "distance": "Cosine"
              },
              "optimizers_config": {
                "default_segment_number": 4,
                "max_optimization_threads": 6
              },
              "hnsw_config": {
                "m": 64,
                "ef_construct": 800,
                "full_scan_threshold": 50000
              },
              "shard_number": 6,
              "replication_factor": 3
            }'
          
          # Enterprise Analytics Collection
          curl -X PUT http://qdrant-0.qdrant-headless.branching-framework-enterprise.svc.cluster.local:6333/collections/enterprise_analytics \
            -H "Content-Type: application/json" \
            -d '{
              "vectors": {
                "size": 384,
                "distance": "Cosine"
              },
              "optimizers_config": {
                "default_segment_number": 2,
                "max_optimization_threads": 2
              },
              "hnsw_config": {
                "m": 16,
                "ef_construct": 200,
                "full_scan_threshold": 10000
              },
              "shard_number": 3,
              "replication_factor": 2
            }'
          
          echo "Enterprise Qdrant cluster initialization completed successfully!"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"

---
# Qdrant Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: qdrant-network-policy
  namespace: branching-framework-enterprise
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: qdrant
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: branching-framework
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: qdrant
    ports:
    - protocol: TCP
      port: 6333
    - protocol: TCP
      port: 6334
    - protocol: TCP
      port: 6335
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: qdrant
    ports:
    - protocol: TCP
      port: 6335
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Pod Disruption Budget for Qdrant
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qdrant-pdb
  namespace: branching-framework-enterprise
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: qdrant
      app.kubernetes.io/component: vector-database
