# Points de Communication - Analyse Syst√®me
scan_info:
  timestamp: 2025-06-18 20:43:49
  branch: dev
  files_scanned: 761
  total_points: 1893

categories:
  redis_pubsub:
    count: 155
    unique_files: 17
    patterns_used: 6
  grpc_calls:
    count: 4
    unique_files: 2
    patterns_used: 4
  websockets:
    count: 226
    unique_files: 22
    patterns_used: 4
  http_endpoints:
    count: 457
    unique_files: 61
    patterns_used: 9
  channels:
    count: 1049
    unique_files: 98
    patterns_used: 4
  message_queues:
    count: 2
    unique_files: 2
    patterns_used: 5
communication_points:
  channels:
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "c := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 89
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "serverErrors := make(chan error, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 58
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdown := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 233
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "batchChan := make(chan []Point, len(batches))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 236
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan BatchResult, len(batches))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 235
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errChan := make(chan error, numGoroutines)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 67
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdown: make(chan os.Signal, 1),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 31
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "signalChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 188
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 184
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigCh := make(chan os.Signal, 1)"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "cmeb.eventChannels[channelName] = make(chan *CoordinationEvent, cmeb.config.BufferSize)"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 605
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "syncChannel: make(chan *StateUpdate, 100),"
      is_manager: true
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 327
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ResultChan:     make(chan *OperationResult, 1),"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 107
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "operationQueue:       make(chan *OrchestrationOperation, 1000),"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 81
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:     make(chan struct{}),"
      is_manager: false
    - file: "manager_discovery.go"
      package: "unknown"
      line: 162
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultsChan := make(chan *ManagerConnection, len(mds.config.ExpectedManagers))"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errorsChan := make(chan error, len(mds.config.ExpectedManagers))"
      is_manager: true
    - file: "health_monitoring.go"
      package: "unknown"
      line: 47
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopCh:        make(chan struct{}),"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 199
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopCh:        make(chan struct{}),"
      is_manager: false
    - file: "security_manager.go"
      package: "unknown"
      line: 515
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eventChan: make(chan AuditEvent, 100),"
      is_manager: true
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 82
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "done:   make(chan struct{}),"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 136
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "workersDone := make(chan struct{})"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 86
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 35
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "branching_manager.go"
      package: "unknown"
      line: 128
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eventQueue:        make(chan interfaces.BranchingEvent, config.EventQueueSize),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:          make(chan struct{}),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 147
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eventQueue:        make(chan interfaces.BranchingEvent, config.EventQueueSize),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:          make(chan struct{}),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1622
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan interfaces.ApproachResult, len(quantumBranch.Approaches))"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1623
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errorChan := make(chan error, len(quantumBranch.Approaches))"
      is_manager: true
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "tokens:    make(chan struct{}, requestsPerMinute),"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 106
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errors := make(chan error, len(cc.managers))"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errors := make(chan error, len(cc.managers))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 64
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eventQueue:  make(chan *ManagerEvent, bufferSize),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 195
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errorChan := make(chan error, len(handlers))"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 161
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan error, 1)"
      is_manager: false
    - file: "email_manager.go"
      package: "unknown"
      line: 92
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "emailQueue:      make(chan *interfaces.Email, config.QueueSize),"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 93
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "workerPool:      make(chan struct{}, config.Workers),"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 98
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:        make(chan struct{}),"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 57
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "emailQueue:     make(chan *interfaces.Email, queueSize),"
      is_manager: true
    - file: "main.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 118
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errorQueue:       make(chan ErrorEntry, 100),"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 150
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "connectionPool: &ConnectionPool{connections: make(chan interface{}, 20), logger: logger},"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errors := make(chan error, vectorsToInsert)"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 322
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "requestErrors := make(chan error, totalRequests)"
      is_manager: false
    - file: "integration_manager.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdownCh:     make(chan struct{}),"
      is_manager: true
    - file: "scheduler.go"
      package: "unknown"
      line: 87
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "taskQueue:      make(chan *TaskExecution, 100), // Buffer for 100 tasks"
      is_manager: false
    - file: "templates.go"
      package: "unknown"
      line: 514
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 41
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eventQueue:   make(chan *Event, 1000), // Buffered channel for events"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 45
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdownCh:   make(chan struct{}),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 61
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "eb.workerPool[i] = make(chan *Event, 100)"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 47
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopCh:          make(chan struct{}),"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdownCh:       make(chan struct{}),"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopEvaluation:     make(chan struct{}),"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "am.stopEvaluation = make(chan struct{}) // Reset for next initialization"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 109
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "notificationQueue: make(chan *interfaces.Notification, config.QueueSize),"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: true
    - file: "bridge_server.go"
      package: "unknown"
      line: 466
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 60
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "flushChan: make(chan struct{}, 1),"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 61
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "closeChan: make(chan struct{}),"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:       make(chan struct{}),"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "jobChan := make(chan BatchJob, len(batches))"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 100
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan BatchResult, len(batches))"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "commands:       make(chan NavigationCommand, 100),"
      is_manager: true
    - file: "context.go"
      package: "unknown"
      line: 536
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "recoveryChan:     make(chan RecoveryResult, 10),"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 597
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "result := make(chan RecoveryResult, 1)"
      is_manager: false
    - file: "metrics_collector.go"
      package: "unknown"
      line: 73
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "metricsBuffer:    make(chan *interfaces.MetricsCollection, config.BufferSize),"
      is_manager: false
    - file: "metrics_collector.go"
      package: "unknown"
      line: 78
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:        make(chan struct{}),"
      is_manager: false
    - file: "adaptive_engine.go"
      package: "unknown"
      line: 93
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "available:   make(chan Connection, maxSize),"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 165
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan SearchResult, len(queries)*topK)"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errChan := make(chan error, len(queries))"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan struct {"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "resultChan := make(chan SearchResult, len(queries)*topK)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 91
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 137
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "connections: make(chan interface{}, size),"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 308
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch1 := make(chan interface{}, 10)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 309
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch2 := make(chan interface{}, 10)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 347
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errors := make(chan error, 1000)"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 222
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "done := make(chan error, 1)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 87
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "taskQueue: make(chan Task, config.QueueSize),"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 198
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "done := make(chan error, 1)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "done := make(chan struct{})"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 92
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "done := make(chan *ValidationResult, 1)"
      is_manager: false
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 81
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan:       make(chan struct{}),"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 297
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan: make(chan struct{}),"
      is_manager: true
    - file: "engine.go"
      package: "unknown"
      line: 145
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "jobs:    make(chan VectorizationRequest, 100),"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "results: make(chan VectorizationResult, 100),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 370
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 396
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 201
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 62
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errChan := make(chan error, 3)"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "shutdownCh:      make(chan struct{}),"
      is_manager: false
    - file: "memory.go"
      package: "unknown"
      line: 41
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "queue: make(chan *Message, 100),"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "queue: make(chan *Message, 100),"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 225
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "queue: make(chan *Message, 100),"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 290
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "queue: make(chan *Message, 100),"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 111
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch := make(chan *config.MCPConfig, 10)"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch := make(chan *config.MCPConfig, 10)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch := make(chan *config.MCPConfig, 10)"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 51
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 91
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "ch := make(chan *config.MCPConfig, 10) // Buffered channel to prevent blocking"
      is_manager: false
    - file: "batch_indexer.go"
      package: "unknown"
      line: 102
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "sem := make(chan struct{}, 4)"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 54
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "errChan       = make(chan error, 1)"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 55
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore     = make(chan struct{}, em.config.Batch.MaxConcurrent)"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 27
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "stopChan: make(chan struct{}),"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, s.config.MaxConcurrency)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 203
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "results := make(chan TestResult, len(packages))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 204
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, runtime.NumCPU())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "results := make(chan buildResult, len(availableTools))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "bidirectional"
      pattern: "make\s*\(\s*chan\s+"
      content: "semaphore := make(chan struct{}, runtime.NumCPU())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "c := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 89
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "serverErrors := make(chan error, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 58
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdown := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 236
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan BatchResult, len(batches))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func (em *EmbeddingMigrator) worker(ctx context.Context, batchChan <-chan []Point, resultChan chan<- BatchResult, newCollectionName string, wg *sync.WaitGroup) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 235
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errChan := make(chan error, numGoroutines)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 33
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdown chan os.Signal"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 67
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdown: make(chan os.Signal, 1),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 31
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "signalChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 188
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 184
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigCh := make(chan os.Signal, 1)"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "ResultChan  chan *OperationResult"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan        chan struct{}"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 81
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:     make(chan struct{}),"
      is_manager: false
    - file: "manager_discovery.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errorsChan := make(chan error, len(mds.config.ExpectedManagers))"
      is_manager: true
    - file: "health_monitoring.go"
      package: "unknown"
      line: 47
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopCh:        make(chan struct{}),"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopCh        chan struct{}"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 199
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopCh:        make(chan struct{}),"
      is_manager: false
    - file: "security_manager.go"
      package: "unknown"
      line: 507
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventChan chan AuditEvent"
      is_manager: true
    - file: "security_manager.go"
      package: "unknown"
      line: 515
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventChan: make(chan AuditEvent, 100),"
      is_manager: true
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 35
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "done   chan struct{}"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 82
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "done:   make(chan struct{}),"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 136
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "workersDone := make(chan struct{})"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 86
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 35
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "branching_manager.go"
      package: "unknown"
      line: 30
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventQueue        chan interfaces.BranchingEvent"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 40
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan chan struct{}"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 128
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventQueue:        make(chan interfaces.BranchingEvent, config.EventQueueSize),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:          make(chan struct{}),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 147
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventQueue:        make(chan interfaces.BranchingEvent, config.EventQueueSize),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:          make(chan struct{}),"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1622
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan interfaces.ApproachResult, len(quantumBranch.Approaches))"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1623
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errorChan := make(chan error, len(quantumBranch.Approaches))"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2125
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "func (bm *BranchingManagerImpl) executeApproach(ctx context.Context, approach interfaces.BranchApproach, resultChan chan interfaces.ApproachResult, errorChan chan error) {"
      is_manager: true
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 82
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "tokens    chan struct{}"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "tokens:    make(chan struct{}, requestsPerMinute),"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 106
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errors := make(chan error, len(cc.managers))"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errors := make(chan error, len(cc.managers))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 195
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errorChan := make(chan error, len(handlers))"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 161
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan error, 1)"
      is_manager: false
    - file: "email_manager.go"
      package: "unknown"
      line: 37
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "workerPool     chan struct{}"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 46
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan       chan struct{}"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 93
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "workerPool:      make(chan struct{}, config.Workers),"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 98
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:        make(chan struct{}),"
      is_manager: true
    - file: "main.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 84
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errorQueue   chan ErrorEntry"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 118
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errorQueue:       make(chan ErrorEntry, 100),"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 128
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "subscribers map[string][]chan interface{}"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 138
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "connections chan interface{}"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 148
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "eventBus:       &EventBus{subscribers: make(map[string][]chan interface{}), logger: logger},"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 150
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "connectionPool: &ConnectionPool{connections: make(chan interface{}, 20), logger: logger},"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errors := make(chan error, vectorsToInsert)"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 322
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "requestErrors := make(chan error, totalRequests)"
      is_manager: false
    - file: "integration_manager.go"
      package: "unknown"
      line: 51
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh     chan struct{}"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh:     make(chan struct{}),"
      is_manager: true
    - file: "templates.go"
      package: "unknown"
      line: 514
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 20
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh     chan struct{}"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 45
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh:   make(chan struct{}),"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 32
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopCh          chan struct{}"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 47
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopCh:          make(chan struct{}),"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 31
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh      chan struct{}"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh:       make(chan struct{}),"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 117
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan        chan struct{}"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 32
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopEvaluation     chan struct{}"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopEvaluation:     make(chan struct{}),"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "am.stopEvaluation = make(chan struct{}) // Reset for next initialization"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 41
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan         chan struct{}"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: true
    - file: "bridge_server.go"
      package: "unknown"
      line: 466
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 37
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "flushChan      chan struct{}"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 38
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "closeChan      chan struct{}"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 60
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "flushChan: make(chan struct{}, 1),"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 61
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "closeChan: make(chan struct{}),"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 17
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan         chan struct{}"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:       make(chan struct{}),"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "jobChan := make(chan BatchJob, len(batches))"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 100
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan BatchResult, len(batches))"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 162
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "jobChan <-chan BatchJob,"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "resultChan chan<- BatchResult,"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 22
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "commands        chan NavigationCommand"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "commands:       make(chan NavigationCommand, 100),"
      is_manager: true
    - file: "context.go"
      package: "unknown"
      line: 494
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "recoveryChan     chan RecoveryResult"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 536
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "recoveryChan:     make(chan RecoveryResult, 10),"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 596
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func (sr *SessionRestore) LoadLastAsync(options *RecoveryOptions) <-chan RecoveryResult {"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 597
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "result := make(chan RecoveryResult, 1)"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 644
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func (sr *SessionRestore) GetRecoveryChannel() <-chan RecoveryResult {"
      is_manager: false
    - file: "metrics_collector.go"
      package: "unknown"
      line: 26
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan          chan struct{}"
      is_manager: false
    - file: "metrics_collector.go"
      package: "unknown"
      line: 78
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 23
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan        chan struct{}"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:        make(chan struct{}),"
      is_manager: false
    - file: "adaptive_engine.go"
      package: "unknown"
      line: 27
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan         chan struct{}"
      is_manager: false
    - file: "adaptive_engine.go"
      package: "unknown"
      line: 93
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:         make(chan struct{}),"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 16
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "available   chan Connection"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "available:   make(chan Connection, maxSize),"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 165
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan SearchResult, len(queries)*topK)"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errChan := make(chan error, len(queries))"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan struct {"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "resultChan := make(chan SearchResult, len(queries)*topK)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 91
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, 10) // Limiter √† 10 goroutines concurrentes"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 131
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "connections chan interface{}"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 137
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "connections: make(chan interface{}, size),"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "subscribers map[string][]chan interface{}"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 193
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "subscribers: make(map[string][]chan interface{}),"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 198
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "func (eb *EventBus) Subscribe(topic string, ch chan interface{}) {"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 308
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "ch1 := make(chan interface{}, 10)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 309
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "ch2 := make(chan interface{}, 10)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 347
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errors := make(chan error, 1000)"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 222
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "done := make(chan error, 1)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 26
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "taskQueue chan Task"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 87
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "taskQueue: make(chan Task, config.QueueSize),"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 198
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "done := make(chan error, 1)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "done := make(chan struct{})"
      is_manager: false
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 55
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan          chan struct{}"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 81
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan:       make(chan struct{}),"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan chan struct{}"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 297
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan: make(chan struct{}),"
      is_manager: true
    - file: "engine.go"
      package: "unknown"
      line: 124
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "jobs    chan VectorizationRequest"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 125
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "results chan VectorizationResult"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 145
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "jobs:    make(chan VectorizationRequest, 100),"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "results: make(chan VectorizationResult, 100),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 370
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 396
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 201
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "quit := make(chan os.Signal, 1)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 62
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errChan := make(chan error, 3)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func startHTTPServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func startStdioServer(_ context.Context, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "chan\s+\w+"
      content: "func startSSEServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 36
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh chan struct{}"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 52
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "shutdownCh:      make(chan struct{}),"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 51
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sigChan := make(chan os.Signal, 1)"
      is_manager: false
    - file: "batch_indexer.go"
      package: "unknown"
      line: 102
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "sem := make(chan struct{}, 4)"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 54
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "errChan       = make(chan error, 1)"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 55
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore     = make(chan struct{}, em.config.Batch.MaxConcurrent)"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 20
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan  chan struct{}"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 27
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "stopChan: make(chan struct{}),"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 146
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, s.config.MaxConcurrency)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 203
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "results := make(chan TestResult, len(packages))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 204
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, runtime.NumCPU())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "results := make(chan buildResult, len(availableTools))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "bidirectional"
      pattern: "chan\s+\w+"
      content: "semaphore := make(chan struct{}, runtime.NumCPU())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 56
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-c"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 79
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 138
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 91
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-quit"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 54
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "serverErrors <- apiHandler.StartServer(*port)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 62
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-serverErrors:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 65
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case sig := <-shutdown:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 247
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "batchChan <- batch"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (em *EmbeddingMigrator) worker(ctx context.Context, batchChan <-chan []Point, resultChan chan<- BatchResult, newCollectionName string, wg *sync.WaitGroup) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- result"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 572
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 574
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 636
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 638
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 245
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"goroutine %d: SET failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 251
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"goroutine %d: GET failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"goroutine %d: DEL failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 261
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- nil"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 267
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "if err := <-errChan; err != nil {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-server.shutdown"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 35
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-signalChan"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 151
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 190
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-quit"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 92
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 94
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 109
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigChan"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 126
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-shutdownCtx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigCh"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 317
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case cmeb.eventChannels[target] <- event:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 409
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 411
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 423
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 425
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 438
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 440
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 449
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event := <-channel:"
      is_manager: true
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 609
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 611
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 623
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 625
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 637
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 639
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "global_state_manager.go"
      package: "unknown"
      line: 442
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 444
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 456
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 458
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 470
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 472
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 484
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 486
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 619
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ss.syncWorkers[workerIndex].syncChannel <- update:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 671
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 673
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case update := <-sw.syncChannel:"
      is_manager: true
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 334
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case mcl.orchestrator.operationQueue <- operation:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 337
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case result := <-operation.ResultChan:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 355
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(operation.Timeout):"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 357
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 361
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 474
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 476
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 488
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 490
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 502
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 504
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 352
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mo.ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 354
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 367
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 369
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case operation := <-ow.operationQueue:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 391
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case operation.ResultChan <- result:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 527
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 529
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 109
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ids.stopChan:"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ids.scanTicker.C:"
      is_manager: false
    - file: "manager_discovery.go"
      package: "unknown"
      line: 173
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errorsChan <- fmt.Errorf(\"failed to discover %s: %w\", name, err)"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 178
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultsChan <- connection"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 196
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case connection, ok := <-resultsChan:"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 212
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err, ok := <-errorsChan:"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 220
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-discoveryCtx.Done():"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 455
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 457
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 381
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(10 * time.Millisecond):"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 383
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 493
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(50 * time.Millisecond):"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "health_monitoring.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "health_monitoring.go"
      package: "unknown"
      line: 65
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-m.stopCh:"
      is_manager: false
    - file: "health_monitoring.go"
      package: "unknown"
      line: 67
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 587
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 590
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "security_manager.go"
      package: "unknown"
      line: 555
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case al.eventChan <- event:"
      is_manager: true
    - file: "security_manager.go"
      package: "unknown"
      line: 565
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event, ok := <-al.eventChan:"
      is_manager: true
    - file: "security_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "startup_sequencer.go"
      package: "unknown"
      line: 211
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "startup_sequencer.go"
      package: "unknown"
      line: 214
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 94
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 142
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-worker.done:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 144
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(2 * time.Second):"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-workersDone:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 155
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(5 * time.Second):"
      is_manager: false
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 476
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 478
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 492
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 511
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 513
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "main_simple.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-sigChan:"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "ai_template_manager.go"
      package: "unknown"
      line: 569
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "ai_template_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "gateway.go"
      package: "unknown"
      line: 259
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigChan"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 39
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigChan"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "branching_manager.go"
      package: "unknown"
      line: 460
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case bm.eventQueue <- event:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 495
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case bm.eventQueue <- event:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1636
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case result := <-resultChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1638
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-errorChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1640
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2073
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2077
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2151
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- result"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2388
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event := <-bm.eventQueue:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2392
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2395
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2422
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2424
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2427
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2471
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2473
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2476
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "rl.tokens <- struct{}{}"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case rl.tokens <- struct{}{}:"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-rl.tokens:"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 118
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 113
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errors <- fmt.Errorf(\"failed to start manager %s: %w\", n, err)"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errors <- fmt.Errorf(\"failed to stop manager %s: %w\", n, err)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 147
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case eb.eventQueue <- event:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 155
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(time.Second * 5): // Timeout apr√®s 5s"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event := <-eb.eventQueue:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-eb.ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 206
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errorChan <- err"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- fmt.Errorf(\"panic recovered: %v\", r)"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- fn()"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 173
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-resultChan:"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 175
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 402
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 404
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "webhook_integration_manager.go"
      package: "unknown"
      line: 379
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "webhook_integration_manager.go"
      package: "unknown"
      line: 381
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(time.Duration(attempt) * time.Second):"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 313
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case em.emailQueue <- email:"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 316
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 508
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case email := <-em.emailQueue:"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 521
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-em.stopChan:"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 523
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 185
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case qm.emailQueue <- email:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 209
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case email := <-qm.emailQueue:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 216
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 294
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-qm.emailQueue:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 326
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case qm.emailQueue <- email:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 399
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case qm.emailQueue <- scheduledEmail.Email:"
      is_manager: true
    - file: "duplication_handler.go"
      package: "unknown"
      line: 88
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 66
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigChan"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 293
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event, ok := <-rb.watcher.Events:"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 311
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err, ok := <-rb.watcher.Errors:"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 317
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-rb.ctx.Done():"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 404
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 406
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-rb.ctx.Done():"
      is_manager: false
    - file: "integration_demo.go"
      package: "unknown"
      line: 125
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-timeoutCtx.Done()"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 181
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case iem.errorQueue <- entry:"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 300
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 302
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-iem.ctx.Done():"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 291
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errors <- nil"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 331
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "requestErrors <- nil"
      is_manager: false
    - file: "integration_manager.go"
      package: "unknown"
      line: 567
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 569
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 583
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 585
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 587
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 599
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 601
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 456
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mm.ctx.Done():"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 458
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 471
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mm.ctx.Done():"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 473
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "scheduler.go"
      package: "unknown"
      line: 274
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 276
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 312
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ms.taskQueue <- execution:"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 342
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 345
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case execution, ok := <-w.scheduler.taskQueue:"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 409
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case w.scheduler.taskQueue <- execution:"
      is_manager: false
    - file: "templates.go"
      package: "unknown"
      line: 516
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-quit"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 130
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case eb.eventQueue <- event:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 157
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 159
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(5 * time.Second): // Timeout"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 238
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event, ok := <-eb.eventQueue:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 248
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case eb.workerPool[workerIndex] <- event:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 256
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 268
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event, ok := <-eventCh:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 276
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 389
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 391
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 292
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 298
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-dhc.stopCh:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 546
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 548
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ih.shutdownCh:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 593
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 595
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ih.shutdownCh:"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 227
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case mm.stopChan <- struct{}{}:"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 241
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 243
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-mm.stopChan:"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 245
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 483
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-am.evaluationTicker.C:"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 488
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-am.stopEvaluation:"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 283
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case nm.notificationQueue <- notification:"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 518
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case notification := <-nm.notificationQueue:"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 522
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-nm.stopChan:"
      is_manager: true
    - file: "bridge_server.go"
      package: "unknown"
      line: 476
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-sigChan"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case bs.flushChan <- struct{}{}:"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-bs.flushChan:"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 266
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-bs.closeChan:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-pm.stopChan:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case jobChan <- batch:"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 162
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "jobChan <-chan BatchJob,"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan chan<- BatchResult,"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 170
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 174
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- result"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 497
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case cmd := <-nm.commands:"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 499
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-nm.ctx.Done():"
      is_manager: true
    - file: "context.go"
      package: "unknown"
      line: 583
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 596
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (sr *SessionRestore) LoadLastAsync(options *RecoveryOptions) <-chan RecoveryResult {"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "result <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 627
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 631
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case result := <-sr.recoveryChan:"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 644
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (sr *SessionRestore) GetRecoveryChannel() <-chan RecoveryResult {"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 944
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 953
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "script_manager.go"
      package: "unknown"
      line: 647
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(delay):"
      is_manager: true
    - file: "script_manager.go"
      package: "unknown"
      line: 648
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-sm.ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 503
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 515
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 517
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "metrics_collector.go"
      package: "unknown"
      line: 548
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 406
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 408
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "duplicate_type_detector.go"
      package: "unknown"
      line: 110
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "import_conflict_resolver.go"
      package: "unknown"
      line: 125
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "struct_validator.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "pool.available <- conn"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 88
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case conn := <-cp.available:"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 129
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case conn := <-cp.available:"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 139
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 141
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(time.Second * 30): // Timeout apr√®s 30s"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case cp.available <- conn:"
      is_manager: false
    - file: "error_handler.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "error_handler.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 181
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 182
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-semaphore }()"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"√©chec de la recherche pour la requ√™te %d: %w\", idx, err)"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- result"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 167
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 168
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-semaphore }()"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- struct {"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 259
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 260
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 98
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-semaphore }()"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "resultChan <- result"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 143
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "pool.connections <- fmt.Sprintf(\"connection_%d\", i)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 150
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "return <-cp.connections"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "cp.connections <- conn"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 210
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ch <- event:"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 372
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errors <- err"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 228
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "done <- err"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 232
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err = <-done:"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 250
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(suite.Timeout):"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 371
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-timeout.C:"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 373
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 561
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 582
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 584
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "advanced-autonomy-manager.go"
      package: "unknown"
      line: 339
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced-autonomy-manager.go"
      package: "unknown"
      line: 341
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "advanced-infrastructure-monitor.go"
      package: "unknown"
      line: 335
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "advanced-infrastructure-monitor.go"
      package: "unknown"
      line: 337
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "alert-system.go"
      package: "unknown"
      line: 259
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "alert-system.go"
      package: "unknown"
      line: 261
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "neural-auto-healing.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "neural-auto-healing.go"
      package: "unknown"
      line: 605
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "vectorization-metrics.go"
      package: "unknown"
      line: 298
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "vectorization-metrics.go"
      package: "unknown"
      line: 300
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 108
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case wp.taskQueue <- task:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 111
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 149
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case task := <-wp.taskQueue:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 168
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 177
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(time.Second):"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 201
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "done <- task.Execute(task.Payload)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 205
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-done:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 207
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 219
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 221
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-done:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(timeout):"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 96
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "done <- result"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 100
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case result := <-done:"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-timeout:"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(latency * 3): // Extended timeout"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 107
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(latency):"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 132
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(delay):"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 134
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 192
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-rm.healthCheckTicker.C:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-rm.stopChan:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 316
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 318
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-hc.stopChan:"
      is_manager: true
    - file: "analyzer.go"
      package: "unknown"
      line: 525
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 527
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(interval):"
      is_manager: false
    - file: "cachemetrics.go"
      package: "unknown"
      line: 30
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "cachemetrics.go"
      package: "unknown"
      line: 32
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(interval):"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 255
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-tm.ctx.Done():"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "native.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-nm.ctx.Done():"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 168
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-nm.collectionTicker.C:"
      is_manager: false
    - file: "unified_client.go"
      package: "unknown"
      line: 185
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(backoff):"
      is_manager: false
    - file: "unified_client.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 309
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 311
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-time.After(ve.retryDelay * time.Duration(attempt)):"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 302
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ve.workerPool.jobs <- req:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 303
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 312
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case result := <-ve.workerPool.results:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 314
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 342
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case req, ok := <-ve.workerPool.jobs:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 351
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ve.workerPool.results <- result:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 352
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 356
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "consistency-validator.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 379
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case sig := <-sigChan:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 400
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-sigChan:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 403
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 665
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 668
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 692
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 695
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 749
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 752
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 210
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-quit:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 226
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case updateMCPConfig := <-updateCh:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 235
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 156
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-quit"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-errChan:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 79
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func startHTTPServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 86
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"HTTP server error: %w\", err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func startStdioServer(_ context.Context, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"stdio server error: %w\", err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func startSSEServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "errChan <- fmt.Errorf(\"SSE server error: %w\", err)"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 120
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event := <-conn.EventQueue():"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-c.Request.Context().Done():"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-s.shutdownCh:"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 70
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case event := <-conn.EventQueue():"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 80
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-c.Request.Context().Done():"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 82
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-s.shutdownCh:"
      is_manager: false
    - file: "memory.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (c *MemoryConnection) EventQueue() <-chan *Message {"
      is_manager: false
    - file: "memory.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case c.queue <- msg:"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case conn.queue <- update.Message:"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 317
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (c *RedisConnection) EventQueue() <-chan *Message {"
      is_manager: false
    - file: "session.go"
      package: "unknown"
      line: 34
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "EventQueue() <-chan *Message"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ch <- mcpConfig:"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ch <- nil:"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 103
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (n *APINotifier) Watch(ctx context.Context) (<-chan *config.MCPConfig, error) {"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 50
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "go func(notifierCh <-chan *config.MCPConfig) {"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 53
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case cfg := <-notifierCh:"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 55
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 70
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case watcher <- cfg:"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 79
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (n *CompositeNotifier) Watch(ctx context.Context) (<-chan *config.MCPConfig, error) {"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 88
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "notifier.go"
      package: "unknown"
      line: 12
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "Watch(ctx context.Context) (<-chan *config.MCPConfig, error)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 47
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (r *RedisNotifier) Watch(ctx context.Context) (<-chan *config.MCPConfig, error) {"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 64
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 56
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case sig := <-sigChan:"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 60
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case ch <- nil:"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "func (n *SignalNotifier) Watch(ctx context.Context) (<-chan *config.MCPConfig, error) {"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 96
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-ctx.Done()"
      is_manager: false
    - file: "detector.go"
      package: "unknown"
      line: 141
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "resolver.go"
      package: "unknown"
      line: 172
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "batch_indexer.go"
      package: "unknown"
      line: 110
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "sem <- struct{}{}"
      is_manager: false
    - file: "batch_indexer.go"
      package: "unknown"
      line: 111
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-sem }()"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 70
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{}        // Acquire semaphore"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-semaphore }() // Release semaphore"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case errChan <- fmt.Errorf(\"error generating embeddings for batch starting at %d: %v\", startIdx, err):"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 123
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case err := <-errChan:"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 39
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-m.stopChan:"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 41
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "performance-test.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-analysisCtx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 135
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "defer func() { <-semaphore }()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 211
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{} // Acquire"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 213
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-semaphore // Release"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 215
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "results <- result"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 192
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "semaphore <- struct{}{} // Acquire"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "<-semaphore // Release"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 195
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "results <- buildResult{tool: t, err: err}"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 202
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "result := <-results"
      is_manager: false
    - file: "drift-detector.go"
      package: "unknown"
      line: 101
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-dd.ctx.Done():"
      is_manager: false
    - file: "drift-detector.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "<-\s*\w+"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 138
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 54
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "serverErrors <- apiHandler.StartServer(*port)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 247
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "batchChan <- batch"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 273
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "func (em *EmbeddingMigrator) worker(ctx context.Context, batchChan <-chan []Point, resultChan chan<- BatchResult, newCollectionName string, wg *sync.WaitGroup) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- result"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 572
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 574
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 636
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 638
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 245
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"goroutine %d: SET failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 251
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"goroutine %d: GET failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"goroutine %d: DEL failed: %w\", id, err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 261
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- nil"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 151
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 92
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 94
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 126
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-shutdownCtx.Done():"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 409
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 411
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 423
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 425
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 438
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-cmeb.ctx.Done():"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 440
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 609
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 611
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 623
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 625
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 637
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ers.ctx.Done():"
      is_manager: false
    - file: "emergency_response_system.go"
      package: "unknown"
      line: 639
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "global_state_manager.go"
      package: "unknown"
      line: 442
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 444
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 456
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 458
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 470
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 472
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 484
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-gsm.ctx.Done():"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 486
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 619
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ss.syncWorkers[workerIndex].syncChannel <- update:"
      is_manager: true
    - file: "global_state_manager.go"
      package: "unknown"
      line: 671
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 334
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case mcl.orchestrator.operationQueue <- operation:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 355
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(operation.Timeout):"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 357
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 361
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 474
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 476
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 488
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 490
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 502
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mcl.coordinationCtx.Done():"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 504
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 352
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mo.ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 354
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 367
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 391
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case operation.ResultChan <- result:"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 527
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "master_orchestrator.go"
      package: "unknown"
      line: 529
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 109
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ids.stopChan:"
      is_manager: false
    - file: "infrastructure_discovery.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ids.scanTicker.C:"
      is_manager: false
    - file: "manager_discovery.go"
      package: "unknown"
      line: 173
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errorsChan <- fmt.Errorf(\"failed to discover %s: %w\", name, err)"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 178
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultsChan <- connection"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 220
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-discoveryCtx.Done():"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 455
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 457
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 381
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(10 * time.Millisecond):"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 383
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 493
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(50 * time.Millisecond):"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "health_monitoring.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "health_monitoring.go"
      package: "unknown"
      line: 65
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-m.stopCh:"
      is_manager: false
    - file: "health_monitoring.go"
      package: "unknown"
      line: 67
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 587
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "infrastructure_orchestrator.go"
      package: "unknown"
      line: 590
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "security_manager.go"
      package: "unknown"
      line: 555
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case al.eventChan <- event:"
      is_manager: true
    - file: "security_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "startup_sequencer.go"
      package: "unknown"
      line: 211
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "startup_sequencer.go"
      package: "unknown"
      line: 214
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 94
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 142
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-worker.done:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 144
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(2 * time.Second):"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-workersDone:"
      is_manager: false
    - file: "simple_freeze_fix.go"
      package: "unknown"
      line: 155
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(5 * time.Second):"
      is_manager: false
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 476
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 478
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 492
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 511
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 513
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "main_simple.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-sigChan:"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main_simple.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "ai_template_manager.go"
      package: "unknown"
      line: 569
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "ai_template_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 460
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case bm.eventQueue <- event:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 495
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case bm.eventQueue <- event:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1640
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2073
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2077
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2151
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- result"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2392
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2395
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2422
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2424
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2427
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2471
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2473
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-bm.stopChan:"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2476
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "rl.tokens <- struct{}{}"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case rl.tokens <- struct{}{}:"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-rl.tokens:"
      is_manager: false
    - file: "mcp_gateway.go"
      package: "unknown"
      line: 118
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 113
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errors <- fmt.Errorf(\"failed to start manager %s: %w\", n, err)"
      is_manager: false
    - file: "coordinator.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errors <- fmt.Errorf(\"failed to stop manager %s: %w\", n, err)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 147
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case eb.eventQueue <- event:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 153
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 155
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(time.Second * 5): // Timeout apr√®s 5s"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-eb.ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 206
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errorChan <- err"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- fmt.Errorf(\"panic recovered: %v\", r)"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 169
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- fn()"
      is_manager: false
    - file: "circuit_breaker.go"
      package: "unknown"
      line: 175
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 402
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 404
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "webhook_integration_manager.go"
      package: "unknown"
      line: 379
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "webhook_integration_manager.go"
      package: "unknown"
      line: 381
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(time.Duration(attempt) * time.Second):"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 313
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case em.emailQueue <- email:"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 316
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 521
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-em.stopChan:"
      is_manager: true
    - file: "email_manager.go"
      package: "unknown"
      line: 523
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 185
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case qm.emailQueue <- email:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 216
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 294
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-qm.emailQueue:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 326
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case qm.emailQueue <- email:"
      is_manager: true
    - file: "queue_manager.go"
      package: "unknown"
      line: 399
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case qm.emailQueue <- scheduledEmail.Email:"
      is_manager: true
    - file: "duplication_handler.go"
      package: "unknown"
      line: 88
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 317
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-rb.ctx.Done():"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 404
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 406
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-rb.ctx.Done():"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 251
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "fmt.Printf(\"Corr√©lation %d: %s:%s <-> %s:%s (Score: %.2f, √âcart moyen: %s)\n\","
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 387
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "fmt.Printf(\"Corr√©lation %d: %s:%s <-> %s:%s (Score: %.2f, √âcart moyen: %s)\n\","
      is_manager: false
    - file: "report_generator.go"
      package: "unknown"
      line: 123
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "fmt.Sprintf(\"ATTENTION: Corr√©lation forte d√©tect√©e %s:%s <-> %s:%s (%.2f)\","
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 181
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case iem.errorQueue <- entry:"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 300
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "error_integration.go"
      package: "unknown"
      line: 302
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-iem.ctx.Done():"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 291
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errors <- nil"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 331
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "requestErrors <- nil"
      is_manager: false
    - file: "integration_manager.go"
      package: "unknown"
      line: 567
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 569
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 571
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 583
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 585
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 587
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 599
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 601
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-im.shutdownCh:"
      is_manager: true
    - file: "integration_manager.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 456
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mm.ctx.Done():"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 458
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 471
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mm.ctx.Done():"
      is_manager: true
    - file: "maintenance_manager.go"
      package: "unknown"
      line: 473
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "scheduler.go"
      package: "unknown"
      line: 274
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 276
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 312
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ms.taskQueue <- execution:"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 342
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "scheduler.go"
      package: "unknown"
      line: 409
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case w.scheduler.taskQueue <- execution:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 130
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case eb.eventQueue <- event:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 157
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 159
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(5 * time.Second): // Timeout"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 256
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 276
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 389
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 391
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-eb.shutdownCh:"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 292
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "health_checker.go"
      package: "unknown"
      line: 298
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-dhc.stopCh:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 546
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 548
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ih.shutdownCh:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 593
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 595
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ih.shutdownCh:"
      is_manager: false
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 227
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case mm.stopChan <- struct{}{}:"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 241
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 243
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-mm.stopChan:"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 245
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 483
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-am.evaluationTicker.C:"
      is_manager: true
    - file: "alert_manager.go"
      package: "unknown"
      line: 488
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-am.stopEvaluation:"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 283
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case nm.notificationQueue <- notification:"
      is_manager: true
    - file: "notification_manager.go"
      package: "unknown"
      line: 522
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-nm.stopChan:"
      is_manager: true
    - file: "batch_storage.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case bs.flushChan <- struct{}{}:"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-bs.flushChan:"
      is_manager: false
    - file: "batch_storage.go"
      package: "unknown"
      line: 266
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-bs.closeChan:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-pm.stopChan:"
      is_manager: false
    - file: "performance.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case jobChan <- batch:"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 162
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "jobChan <-chan BatchJob,"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 163
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan chan<- BatchResult,"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 170
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "processor.go"
      package: "unknown"
      line: 174
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- result"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 499
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-nm.ctx.Done():"
      is_manager: true
    - file: "context.go"
      package: "unknown"
      line: 583
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "result <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 627
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 944
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 953
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "sr.recoveryChan <- RecoveryResult{"
      is_manager: false
    - file: "script_manager.go"
      package: "unknown"
      line: 647
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(delay):"
      is_manager: true
    - file: "script_manager.go"
      package: "unknown"
      line: 648
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-sm.ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 501
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 503
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 515
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "smart_variable_manager.go"
      package: "unknown"
      line: 517
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "metrics_collector.go"
      package: "unknown"
      line: 548
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 406
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 408
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "duplicate_type_detector.go"
      package: "unknown"
      line: 110
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "import_conflict_resolver.go"
      package: "unknown"
      line: 125
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "struct_validator.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "pool.available <- conn"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 139
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 141
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(time.Second * 30): // Timeout apr√®s 30s"
      is_manager: false
    - file: "connection_pool.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case cp.available <- conn:"
      is_manager: false
    - file: "error_handler.go"
      package: "unknown"
      line: 115
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "error_handler.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 181
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 187
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"√©chec de la recherche pour la requ√™te %d: %w\", idx, err)"
      is_manager: false
    - file: "vector_client.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- result"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 167
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 171
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- struct {"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 259
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "vector_operations.go"
      package: "unknown"
      line: 260
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 97
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "resultChan <- result"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 143
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "pool.connections <- fmt.Sprintf(\"connection_%d\", i)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 150
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "return <-cp.connections"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "cp.connections <- conn"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 210
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ch <- event:"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 372
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errors <- err"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 228
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "done <- err"
      is_manager: false
    - file: "validate_phase5.go"
      package: "unknown"
      line: 250
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(suite.Timeout):"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 371
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-timeout.C:"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 373
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "smart_orchestrator.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 582
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 584
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "advanced-autonomy-manager.go"
      package: "unknown"
      line: 339
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "advanced-autonomy-manager.go"
      package: "unknown"
      line: 341
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "advanced-infrastructure-monitor.go"
      package: "unknown"
      line: 335
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "advanced-infrastructure-monitor.go"
      package: "unknown"
      line: 337
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "alert-system.go"
      package: "unknown"
      line: 259
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "alert-system.go"
      package: "unknown"
      line: 261
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "neural-auto-healing.go"
      package: "unknown"
      line: 603
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "neural-auto-healing.go"
      package: "unknown"
      line: 605
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "vectorization-metrics.go"
      package: "unknown"
      line: 298
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "vectorization-metrics.go"
      package: "unknown"
      line: 300
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 108
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case wp.taskQueue <- task:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 111
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 168
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 177
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(time.Second):"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 201
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "done <- task.Execute(task.Payload)"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 207
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 219
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 221
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-wp.ctx.Done():"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-done:"
      is_manager: false
    - file: "worker-pool.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(timeout):"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 96
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "done <- result"
      is_manager: false
    - file: "search.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-timeout:"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(latency * 3): // Extended timeout"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 107
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 114
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(latency):"
      is_manager: false
    - file: "qdrant_client.go"
      package: "unknown"
      line: 116
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 132
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(delay):"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 134
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 192
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-rm.healthCheckTicker.C:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 194
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-rm.stopChan:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 316
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "reconnection_manager.go"
      package: "unknown"
      line: 318
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-hc.stopChan:"
      is_manager: true
    - file: "analyzer.go"
      package: "unknown"
      line: 525
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 527
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(interval):"
      is_manager: false
    - file: "cachemetrics.go"
      package: "unknown"
      line: 30
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "cachemetrics.go"
      package: "unknown"
      line: 32
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(interval):"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 255
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-tm.ctx.Done():"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 257
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: true
    - file: "native.go"
      package: "unknown"
      line: 166
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-nm.ctx.Done():"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 168
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-nm.collectionTicker.C:"
      is_manager: false
    - file: "unified_client.go"
      package: "unknown"
      line: 185
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(backoff):"
      is_manager: false
    - file: "unified_client.go"
      package: "unknown"
      line: 186
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 309
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 311
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(delay):"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 280
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 282
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-time.After(ve.retryDelay * time.Duration(attempt)):"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 302
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ve.workerPool.jobs <- req:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 303
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 314
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 351
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ve.workerPool.results <- result:"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 352
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 356
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ve.workerPool.ctx.Done():"
      is_manager: false
    - file: "consistency-validator.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 400
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-sigChan:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 403
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 665
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 668
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 692
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 695
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 749
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "workflow_orchestrator.go"
      package: "unknown"
      line: 752
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 210
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-quit:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 235
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 71
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "func startHTTPServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 86
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"HTTP server error: %w\", err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 90
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "func startStdioServer(_ context.Context, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 95
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"stdio server error: %w\", err)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 99
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "func startSSEServer(_ context.Context, addr string, errChan chan<- error) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "errChan <- fmt.Errorf(\"SSE server error: %w\", err)"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 154
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-c.Request.Context().Done():"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 160
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-s.shutdownCh:"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 80
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-c.Request.Context().Done():"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 82
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-s.shutdownCh:"
      is_manager: false
    - file: "memory.go"
      package: "unknown"
      line: 112
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case c.queue <- msg:"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 105
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case conn.queue <- update.Message:"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 24
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "watchers  map[chan<- *config.MCPConfig]struct{}"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 36
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "watchers:  make(map[chan<- *config.MCPConfig]struct{}),"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ch <- mcpConfig:"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ch <- nil:"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 16
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "watchers  map[chan<- *config.MCPConfig]struct{}"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 24
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "watchers:  make(map[chan<- *config.MCPConfig]struct{}),"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 50
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "go func(notifierCh <-chan *config.MCPConfig) {"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 55
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "composite.go"
      package: "unknown"
      line: 70
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case watcher <- cfg:"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 63
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ch <- &cfg:"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 64
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 60
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "signal.go"
      package: "unknown"
      line: 74
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case ch <- nil:"
      is_manager: false
    - file: "detector.go"
      package: "unknown"
      line: 141
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "resolver.go"
      package: "unknown"
      line: 172
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "batch_indexer.go"
      package: "unknown"
      line: 110
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "sem <- struct{}{}"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 70
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{}        // Acquire semaphore"
      is_manager: false
    - file: "embeddings.go"
      package: "unknown"
      line: 83
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case errChan <- fmt.Errorf(\"error generating embeddings for batch starting at %d: %v\", startIdx, err):"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 39
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-m.stopChan:"
      is_manager: false
    - file: "monitoring.go"
      package: "unknown"
      line: 41
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "performance-test.go"
      package: "unknown"
      line: 377
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ctx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 133
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-analysisCtx.Done():"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 135
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 152
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{}"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 211
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{} // Acquire"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 215
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "results <- result"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 192
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "semaphore <- struct{}{} // Acquire"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 195
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "results <- buildResult{tool: t, err: err}"
      is_manager: false
    - file: "drift-detector.go"
      package: "unknown"
      line: 101
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-dd.ctx.Done():"
      is_manager: false
    - file: "drift-detector.go"
      package: "unknown"
      line: 104
      type: "channels"
      direction: "receive"
      pattern: "\w+\s*<-"
      content: "case <-ticker.C:"
      is_manager: false
  grpc_calls:
    - file: "vector_registry.go"
      package: "unknown"
      line: 65
      type: "grpc_calls"
      direction: "bidirectional"
      pattern: "grpc\."
      content: "conn           *grpc.ClientConn"
      is_manager: false
    - file: "vector_registry.go"
      package: "unknown"
      line: 87
      type: "grpc_calls"
      direction: "bidirectional"
      pattern: "grpc\."
      content: "conn, err := grpc.Dial("
      is_manager: false
    - file: "vector_registry.go"
      package: "unknown"
      line: 89
      type: "grpc_calls"
      direction: "bidirectional"
      pattern: "grpc\."
      content: "grpc.WithTransportCredentials(insecure.NewCredentials()),"
      is_manager: false
    - file: "context.go"
      package: "unknown"
      line: 1044
      type: "grpc_calls"
      direction: "bidirectional"
      pattern: "protobuf"
      content: "FormatProtobuf ExportFormat = \"protobuf\""
      is_manager: false
  http_endpoints:
    - file: "main.go"
      package: "unknown"
      line: 127
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "s.router.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 354
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (s *Server) loggingMiddleware(next http.Handler) http.Handler {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 355
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 362
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (s *Server) corsMiddleware(next http.Handler) http.Handler {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 363
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 254
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "md.router.Handle(\"/metrics\", promhttp.HandlerFor(md.metrics.registry, promhttp.HandlerOpts{}))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 20
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 137
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "metricsRouter.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 56
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "type MiddlewareFunc func(http.Handler) http.Handler"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 153
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "apiEndpoints  map[string]http.HandlerFunc"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 222
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "var handler http.Handler = mux"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 317
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (pb *PowerShellBridge) corsMiddleware(next http.Handler) http.Handler {"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 318
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 333
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (pb *PowerShellBridge) loggingMiddleware(next http.Handler) http.Handler {"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 334
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 285
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "// RegisterHandlers creates http.Handler with routing matching OpenAPI spec."
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 290
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "// RegisterHandlersWithOptions creates http.Handler with additional options"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 491
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (m *RAGMetrics) MetricsMiddleware() func(http.Handler) http.Handler {"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 492
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return func(next http.Handler) http.Handler {"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 493
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 532
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "func (m *RAGMetrics) GetHandler() http.Handler {"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 533
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "return promhttp.HandlerFor(m.registry, promhttp.HandlerOpts{"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 48
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/\", s.handleHome)"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 49
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/view/\", s.handleView)"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 122
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "mux.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 340
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 94
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "r.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 83
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/\", rd.handleDashboardPage)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 84
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/api/metrics\", rd.handleMetricsAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 85
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/api/health\", rd.handleHealthAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 86
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/api/alerts\", rd.handleAlertsAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/ws\", rd.handleWebSocket)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 88
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.Handle"
      content: "http.HandleFunc(\"/static/\", rd.handleStatic)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 20
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 48
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/\", s.handleHome)"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 49
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/view/\", s.handleView)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 83
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/\", rd.handleDashboardPage)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 84
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/api/metrics\", rd.handleMetricsAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 85
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/api/health\", rd.handleHealthAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 86
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/api/alerts\", rd.handleAlertsAPI)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/ws\", rd.handleWebSocket)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 88
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "http\.HandleFunc"
      content: "http.HandleFunc(\"/static/\", rd.handleStatic)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 66
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "gin.SetMode(gin.ReleaseMode)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 69
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router := gin.New()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 72
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 63
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "gin.SetMode(gin.ReleaseMode)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 66
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router := gin.New()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 69
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 70
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 44
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "gin.SetMode(gin.ReleaseMode)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 45
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router := gin.New()"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 46
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 28
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "gin.SetMode(gin.ReleaseMode)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 29
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router := gin.New()"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 32
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 33
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 143
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "r := gin.Default()"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 48
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router := gin.Default()"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 48
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router:          gin.Default(),"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 37
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "router:    gin.Default(),"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 101
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "gin.SetMode(gin.ReleaseMode)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 105
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "webServer:     gin.New(),"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 118
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "sd.webServer.Use(gin.Recovery())"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 119
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "gin\.\w+\("
      content: "sd.webServer.Use(gin.Logger())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 101
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/health\", s.healthHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 102
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/health/detailed\", s.detailedHealthHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 105
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/templates/{id}\", s.getTemplateHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 106
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/templates/{id}/invalidate\", s.invalidateTemplateHandler).Methods(\"POST\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 107
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/templates/invalidate-all\", s.invalidateAllTemplatesHandler).Methods(\"POST\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 110
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/users/{id}/preferences\", s.getUserPreferencesHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 111
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/users/{id}/preferences\", s.updateUserPreferencesHandler).Methods(\"PUT\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 114
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/stats\", s.getStatsHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 117
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/ml/{modelId}/results\", s.getMLResultsHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 118
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/ml/{modelId}/invalidate\", s.invalidateMLResultsHandler).Methods(\"POST\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 121
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/cache/metrics\", s.getCacheMetricsHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 122
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/cache/analysis\", s.getCacheAnalysisHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 123
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/cache/optimize\", s.optimizeCacheHandler).Methods(\"POST\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 124
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/api/v1/cache/recommendations\", s.getCacheRecommendationsHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 127
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 130
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Use(s.loggingMiddleware)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 131
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Use(s.corsMiddleware)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 245
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "api := md.router.PathPrefix(\"/api/v1\").Subrouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 254
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "md.router.Handle(\"/metrics\", promhttp.HandlerFor(md.metrics.registry, promhttp.HandlerOpts{}))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 257
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "md.router.PathPrefix(\"/dashboard/\").Handler(http.StripPrefix(\"/dashboard/\", http.FileServer(http.Dir(\"./dashboard/\"))))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 258
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "md.router.HandleFunc(\"/\", md.handleRoot).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 112
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.HandleFunc(\"/health\", s.healthHandler).Methods(\"GET\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 115
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "v1 := s.router.PathPrefix(\"/api/v1\").Subrouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 132
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Use(s.metrics.MetricsMiddleware())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 137
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "metricsRouter.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 72
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 76
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 90
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 100
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 120
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 133
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "v1 := router.Group(\"/api/v1\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 216
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := router.Run(\":\" + port); err != nil {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 69
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 70
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 73
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 97
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 117
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 132
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "v1 := router.Group(\"/api/v1\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 216
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := router.Run(\":\" + port); err != nil {"
      is_manager: false
    - file: "branching_manager.go"
      package: "unknown"
      line: 32
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := router.ValidateRoutingDecision(decision); err != nil {"
      is_manager: true
    - file: "main.go"
      package: "unknown"
      line: 62
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "routingDecision, err := ci.router.RouteCommit(analysis)"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 309
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "targets, err := cmeb.eventRouter.GetTargets(event)"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 386
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := cmeb.eventRouter.cleanup(); err != nil {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 487
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.initializeDefaultRoutingTable()"
      is_manager: true
    - file: "gateway.go"
      package: "unknown"
      line: 46
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 65
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "ag.router.Use(ag.corsMiddleware())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 66
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "ag.router.Use(ag.rateLimitMiddleware())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 67
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "ag.router.Use(ag.loggingMiddleware())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 68
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "ag.router.Use(ag.authMiddleware())"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 71
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "ag.router.GET(\"/health\", ag.healthCheck)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 72
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "ag.router.GET(\"/ready\", ag.readinessCheck)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 75
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "ag.router.GET(\"/docs/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 78
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "v1 := ag.router.Group(\"/api/v1\")"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 32
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Logger())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 33
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(gin.Recovery())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 34
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(corsMiddleware())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 35
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "router.Use(authMiddleware())"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "v1 := s.router.Group(\"/api/conformity\")"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 80
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "s.router.GET(\"/api/docs/conformity\", s.getAPIDocumentation)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 305
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(options.BaseURL+\"/collections\", wrapper.ListCollections)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 306
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(options.BaseURL+\"/collections\", wrapper.CreateCollection)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 307
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(options.BaseURL+\"/documents\", wrapper.ListDocuments)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 308
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(options.BaseURL+\"/documents\", wrapper.IndexDocuments)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 309
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.DELETE(options.BaseURL+\"/documents/:document_id\", wrapper.DeleteDocument)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 310
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(options.BaseURL+\"/documents/:document_id\", wrapper.GetDocument)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 311
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(options.BaseURL+\"/health\", wrapper.HealthCheck)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 312
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(options.BaseURL+\"/metrics\", wrapper.GetMetrics)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 313
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(options.BaseURL+\"/search\", wrapper.PerformSearch)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 314
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(options.BaseURL+\"/search/stream\", wrapper.PerformStreamingSearch)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 239
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := router.Run(\":\" + port); err != nil {"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(\"/users\", func(c *gin.Context) {"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 75
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.GET(\"/users/email/:email\", func(c *gin.Context) {"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.PUT(\"/users/:email/preferences\", func(c *gin.Context) {"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 112
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "router.POST(\"/users/:email/avatar\", func(c *gin.Context) {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 55
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Use(s.loggerMiddleware())"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 56
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.Use(s.recoveryMiddleware())"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 62
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "s.router.GET(\"/health_check\", func(c *gin.Context) {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 85
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "s.router.NoRoute(s.handleRoot)"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 157
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "router\.\w+\("
      content: "if err := s.router.Run(fmt.Sprintf(\":%d\", s.port)); err != nil {"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 44
      type: "http_endpoints"
      direction: "inbound"
      pattern: "router\.\w+\("
      content: "n.router.POST(\"/_reload\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 98
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "s.router = mux.NewRouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 173
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 187
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 220
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 234
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 273
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 293
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 242
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "md.router = mux.NewRouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 64
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "router:   mux.NewRouter(),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 136
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "metricsRouter := mux.NewRouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 127
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "r := mux.NewRouter()"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 587
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/health\", rtmd.handleHealthAPI)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 588
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/metrics\", rtmd.handleMetricsAPI)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 589
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/alerts\", rtmd.handleAlertsAPI)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 590
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/events\", rtmd.handleEventsAPI)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 591
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/historical\", rtmd.handleHistoricalAPI)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 595
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/ws\", rtmd.handleWebSocket)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 599
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/\", rtmd.webDashboard.ServeHTTP)"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 166
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/events\", rb.handleEvents)"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 169
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/health\", rb.handleHealth)"
      is_manager: false
    - file: "realtime_bridge.go"
      package: "unknown"
      line: 172
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/status\", rb.handleStatus)"
      is_manager: false
    - file: "templates.go"
      package: "unknown"
      line: 195
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/{{.Package}}/{{.Name | lower}}\", h.Handle{{.Name}})"
      is_manager: false
    - file: "templates.go"
      package: "unknown"
      line: 196
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/{{.Package}}/{{.Name | lower}}/status\", h.HandleStatus)"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 213
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/errors\", pb.handleErrors)"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 216
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/health\", pb.handleHealth)"
      is_manager: false
    - file: "bridge_server.go"
      package: "unknown"
      line: 219
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/stats\", pb.handleStats)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 32
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/infrastructure/status\", h.handleGetStatus)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 33
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/infrastructure/health\", h.handleHealthCheck)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 34
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/infrastructure/start\", h.handleStartServices)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 35
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/infrastructure/stop\", h.handleStopServices)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 36
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/infrastructure/recover\", h.handleAutoRecover)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 39
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/monitoring/start\", h.handleStartAdvancedMonitoring)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 40
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/monitoring/stop\", h.handleStopAdvancedMonitoring)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 41
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/monitoring/status\", h.handleGetMonitoringStatus)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 42
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/monitoring/health-advanced\", h.handleGetAdvancedHealthStatus)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 45
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/auto-healing/enable\", h.handleEnableAutoHealing)"
      is_manager: false
    - file: "infrastructure_endpoints.go"
      package: "unknown"
      line: 46
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/api/v1/auto-healing/disable\", h.handleDisableAutoHealing)"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 541
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.Handle(\"/metrics\", m.GetHandler())"
      is_manager: false
    - file: "metrics.go"
      package: "unknown"
      line: 542
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/health\", func(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 122
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.Handle(\"/metrics\", promhttp.Handler())"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 123
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/health\", monitor.healthHandler)"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 124
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/metrics/json\", monitor.jsonMetricsHandler)"
      is_manager: false
    - file: "native.go"
      package: "unknown"
      line: 125
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "mux.HandleFunc(\"/\", monitor.dashboardHandler)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 81
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "r := mux.NewRouter()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 153
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 167
      type: "http_endpoints"
      direction: "bidirectional"
      pattern: "mux\.\w+\("
      content: "vars := mux.Vars(r)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 177
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/auto-healing/enable\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/auto-healing/disable\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 176
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/auto-healing/enable\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 185
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/auto-healing/disable\", func(c *gin.Context) {"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 83
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/managers/:name/action\", ag.executeManagerAction)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 89
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "vectors.POST(\"/search\", ag.searchVectors)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 90
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "vectors.POST(\"/upsert\", ag.upsertVectors)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 99
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "config.POST(\"/:key\", ag.setConfig)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 107
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "events.POST(\"/\", ag.publishEvent)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 137
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "resp, err := http.Post(baseURL+\"/events\", \"application/json\", bytes.NewBuffer(eventJSON))"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 55
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/managers/:name/verify\", s.verifyManagerConformity)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 60
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/ecosystem/verify\", s.verifyEcosystemConformity)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 63
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "v1.POST(\"/reports/generate\", s.generateConformityReport)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 306
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(options.BaseURL+\"/collections\", wrapper.CreateCollection)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 308
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(options.BaseURL+\"/documents\", wrapper.IndexDocuments)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 313
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(options.BaseURL+\"/search\", wrapper.PerformSearch)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 314
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(options.BaseURL+\"/search/stream\", wrapper.PerformStreamingSearch)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 161
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "authG.POST(\"/login\", authH.Login)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 172
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "protected.POST(\"/auth/change-password\", authH.ChangePassword)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 182
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "userMgmt.POST(\"\", authH.CreateUser)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 192
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "tenantMgmt.POST(\"\", authH.CreateTenant)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 206
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "mcpGroup.POST(\"/configs/:tenant/:name/versions/:version/active\", mcpHandler.HandleSetActiveVersion)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 209
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "mcpGroup.POST(\"/configs\", mcpHandler.HandleMCPServerCreate)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 212
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "mcpGroup.POST(\"/configs/sync\", mcpHandler.HandleMCPServerSync)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 216
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "protected.POST(\"/openapi/import\", openapiHandler.HandleImport)"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(\"/users\", func(c *gin.Context) {"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 112
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "router.POST(\"/users/:email/avatar\", func(c *gin.Context) {"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 44
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "n.router.POST(\"/_reload\", func(c *gin.Context) {"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 146
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.POST\("
      content: "sd.webServer.POST(\"/api/sync/resolve\", sd.handleResolveConflict)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 275
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "inputHash := r.URL.Query().Get(\"input_hash\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 295
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "version := r.URL.Query().Get(\"version\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 100
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "retrievedValue, err = hybridClient.Get(ctx, testKey)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 134
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "retrievedEnvValue, err := hybridClient.Get(ctx, envKey)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 65
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "retrievedValue, err := localCache.Get(ctx, key)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 110
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "retrievedHybridValue, err := hybridClient.Get(ctx, hybridKey)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "retrievedValue, err := client.Get(ctx, testKey).Result()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 250
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if _, err := client.Get(ctx, key).Result(); err != nil {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 293
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "_, err := client.Get(ctx, \"retry-test-key\").Result()"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 168
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Query: r.URL.Query().Get(\"q\"),"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 90
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 100
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 120
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 135
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 147
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 166
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/monitoring/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 195
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 97
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 117
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 134
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 146
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 165
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/monitoring/status\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 194
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/infrastructure/health\", func(c *gin.Context) {"
      is_manager: false
    - file: "manager_discovery.go"
      package: "unknown"
      line: 364
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(fmt.Sprintf(\"http://%s/health\", endpoint))"
      is_manager: true
    - file: "manager_discovery.go"
      package: "unknown"
      line: 371
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "managerType := resp.Header.Get(\"X-Manager-Type\")"
      is_manager: true
    - file: "manager_proxies.go"
      package: "unknown"
      line: 133
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := nmp.client.Get(fmt.Sprintf(\"%s/health\", nmp.endpoint))"
      is_manager: true
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 860
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "manager := r.URL.Query().Get(\"manager\")"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 861
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "duration := r.URL.Query().Get(\"duration\")"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 71
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "ag.router.GET(\"/health\", ag.healthCheck)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 72
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "ag.router.GET(\"/ready\", ag.readinessCheck)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 75
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "ag.router.GET(\"/docs/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 81
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/managers\", ag.listManagers)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 82
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/managers/:name/status\", ag.getManagerStatus)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 84
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/managers/:name/metrics\", ag.getManagerMetrics)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 91
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "vectors.GET(\"/list\", ag.listVectors)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 98
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "config.GET(\"/:key\", ag.getConfig)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 100
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "config.GET(\"/\", ag.getAllConfigs)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 106
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "events.GET(\"/\", ag.getEvents)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 108
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "events.GET(\"/subscribe/:topic\", ag.subscribeToEvents)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 114
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "monitoring.GET(\"/status\", ag.getSystemStatus)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 115
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "monitoring.GET(\"/metrics\", ag.getSystemMetrics)"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 116
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "monitoring.GET(\"/performance\", ag.getPerformanceMetrics)"
      is_manager: false
    - file: "branching_manager.go"
      package: "unknown"
      line: 1242
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "snapshotData, err := bm.storageManager.Get(ctx, \"snapshots\", snapshotID)"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 1966
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "templateData, err := bm.storageManager.Get(ctx, \"templates\", templateID)"
      is_manager: true
    - file: "branching_manager.go"
      package: "unknown"
      line: 2561
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "branchData, err := bm.storageManager.Get(ctx, \"branches\", branchID)"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 245
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "hits := mm.cacheHits.Get()"
      is_manager: true
    - file: "monitoring_manager.go"
      package: "unknown"
      line: 246
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "misses := mm.cacheMisses.Get()"
      is_manager: true
    - file: "main.go"
      package: "unknown"
      line: 221
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := http.Get(baseURL + \"/health\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 239
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err = http.Get(baseURL + \"/status\")"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 129
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "pr, _, err := m.client.PullRequests.Get(ctx, m.owner, m.repo, prID)"
      is_manager: true
    - file: "manager.go"
      package: "unknown"
      line: 404
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "_, _, err := m.client.Users.Get(ctx, \"\")"
      is_manager: true
    - file: "conformity_api.go"
      package: "unknown"
      line: 54
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/managers/:name\", s.getManagerConformity)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 59
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/ecosystem/status\", s.getEcosystemStatus)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 64
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/reports/formats\", s.getReportFormats)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 67
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/badges/:manager/:type\", s.generateConformityBadge)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 68
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/badges/ecosystem/:type\", s.generateEcosystemBadge)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 71
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/config\", s.getConformityConfig)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 75
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/health\", s.healthCheck)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 76
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "v1.GET(\"/metrics\", s.getMetrics)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 80
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "s.router.GET(\"/api/docs/conformity\", s.getAPIDocumentation)"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 83
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "\"user_agent\": request.Header.Get(\"User-Agent\"),"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 242
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "signature := request.Header.Get(\"X-Hub-Signature-256\")"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 244
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "signature = request.Header.Get(\"X-Signature-256\")"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 269
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if eventType := request.Header.Get(\"X-Event-Type\"); eventType != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 272
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if eventType := request.Header.Get(\"X-GitHub-Event\"); eventType != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 275
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if eventType := request.Header.Get(\"X-GitLab-Event\"); eventType != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 518
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if value := request.Header.Get(header); value != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 529
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if xff := request.Header.Get(\"X-Forwarded-For\"); xff != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 536
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if xri := request.Header.Get(\"X-Real-IP\"); xri != \"\" {"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 578
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "\"user_agent\":       request.Header.Get(\"User-Agent\"),"
      is_manager: false
    - file: "webhook_management.go"
      package: "unknown"
      line: 579
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "\"content_type\":     request.Header.Get(\"Content-Type\"),"
      is_manager: false
    - file: "vector_registry.go"
      package: "unknown"
      line: 123
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "info, err := collectionsClient.Get(ctx, &qdrant.GetCollectionInfoRequest{"
      is_manager: false
    - file: "vector_registry.go"
      package: "unknown"
      line: 436
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "response, err := vr.client.Get(ctx, &qdrant.GetPoints{"
      is_manager: false
    - file: "vector_registry.go"
      package: "unknown"
      line: 539
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "info, err := collectionsClient.Get(ctx, &qdrant.GetCollectionInfoRequest{"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 290
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "cached, found := cache.Get(\"test_query\")"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 359
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if _, found := cache.Get(cacheKey); found {"
      is_manager: false
    - file: "phase_7_deployment_validation.go"
      package: "unknown"
      line: 223
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(healthURL)"
      is_manager: false
    - file: "phase_7_deployment_validation.go"
      package: "unknown"
      line: 293
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(qdrantURL)"
      is_manager: false
    - file: "phase_7_deployment_validation.go"
      package: "unknown"
      line: 443
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(metricsURL)"
      is_manager: false
    - file: "phase_7_deployment_validation.go"
      package: "unknown"
      line: 555
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(apiURL)"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 91
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := c.HTTPClient.Get(fmt.Sprintf(\"%s/healthz\", c.BaseURL))"
      is_manager: false
    - file: "client.go"
      package: "unknown"
      line: 117
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := shortClient.Get(fmt.Sprintf(\"%s/\", c.BaseURL))"
      is_manager: false
    - file: "searchservice.go"
      package: "unknown"
      line: 129
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if cached, found := s.cache.Get(cacheKey); found {"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 305
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(options.BaseURL+\"/collections\", wrapper.ListCollections)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 307
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(options.BaseURL+\"/documents\", wrapper.ListDocuments)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 310
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(options.BaseURL+\"/documents/:document_id\", wrapper.GetDocument)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 311
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(options.BaseURL+\"/health\", wrapper.HealthCheck)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 312
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(options.BaseURL+\"/metrics\", wrapper.GetMetrics)"
      is_manager: false
    - file: "generator.go"
      package: "unknown"
      line: 347
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if cached, found := s.cache.Get(cacheKey); found {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if formatParam := r.URL.Query().Get(\"format\"); formatParam != \"\" {"
      is_manager: false
    - file: "fallback_cache.go"
      package: "unknown"
      line: 222
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "result, err := hrc.client.Get(ctx, key).Result()"
      is_manager: false
    - file: "fallback_cache.go"
      package: "unknown"
      line: 234
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "return hrc.localCache.Get(ctx, key)"
      is_manager: false
    - file: "manager.go"
      package: "unknown"
      line: 180
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "result, err := tm.redis.Get(ctx, key).Result()"
      is_manager: true
    - file: "redis_client.go"
      package: "unknown"
      line: 80
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "return r.client.Get(ctx, key).Result()"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 144
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "found, err := s.cacheManager.Get(cacheKey, &template)"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 193
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "found, err := s.cacheManager.Get(cacheKey, &prefs)"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 255
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "found, err := s.cacheManager.Get(cacheKey, &stats)"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 293
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "found, err := s.cacheManager.Get(cacheKey, &model)"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 185
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if cached, found := ve.cache.Get(text); found {"
      is_manager: false
    - file: "engine.go"
      package: "unknown"
      line: 217
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if cached, found := ve.cache.Get(text); found {"
      is_manager: false
    - file: "api_analyzer.go"
      package: "unknown"
      line: 305
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if authHeader := resp.Header.Get(\"WWW-Authenticate\"); authHeader != \"\" {"
      is_manager: false
    - file: "api_analyzer.go"
      package: "unknown"
      line: 350
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if value := resp.Header.Get(header); value != \"\" {"
      is_manager: false
    - file: "auth_security.go"
      package: "unknown"
      line: 437
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if req.Header.Get(header) == \"\" {"
      is_manager: false
    - file: "auth_security.go"
      package: "unknown"
      line: 444
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "origin := req.Header.Get(\"Origin\")"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 36
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "fmt.Printf(\"apiserver version %s\n\", version.Get())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 173
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "protected.GET(\"/auth/user/info\", authH.GetUserInfo)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 174
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "protected.GET(\"/auth/user\", authH.GetUserWithTenants)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 175
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "protected.GET(\"/auth/tenants\", authH.ListTenants)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 181
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "userMgmt.GET(\"\", authH.ListUsers)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 185
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "userMgmt.GET(\"/:username\", authH.GetUserWithTenants)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 193
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "tenantMgmt.GET(\"/:name\", authH.GetTenantInfo)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 204
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "mcpGroup.GET(\"/configs/names\", mcpHandler.HandleGetConfigNames)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 205
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "mcpGroup.GET(\"/configs/versions\", mcpHandler.HandleGetConfigVersions)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 208
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "mcpGroup.GET(\"/configs\", mcpHandler.HandleListMCPServers)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 218
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "protected.GET(\"/chat/sessions\", chatHandler.HandleGetChatSessions)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 219
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "protected.GET(\"/chat/sessions/:sessionId/messages\", chatHandler.HandleGetChatMessages)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 225
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "r.GET(\"/api/ws/chat\", wsHandler.HandleWebSocket)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 267
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "logger.Info(\"Starting apiserver\", zap.String(\"version\", version.Get()))"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 35
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "fmt.Printf(\"mcp-gateway version %s\n\", version.Get())"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 158
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "logger.Info(\"Starting mcp-gateway\", zap.String(\"version\", version.Get()))"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 75
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "router.GET(\"/users/email/:email\", func(c *gin.Context) {"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 42
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "fmt.Printf(\"mock-server version %s\n\", version.Get())"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 122
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 189
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 208
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 241
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 470
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "auth.go"
      package: "unknown"
      line: 519
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 52
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 157
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "oldCfg, err := h.store.Get(c.Request.Context(), cfg.Tenant, cfg.Name)"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 244
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 408
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "_, err = h.store.Get(c.Request.Context(), cfg.Tenant, cfg.Name)"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 480
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "existingCfg, err := h.store.Get(c.Request.Context(), tenant, name)"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 523
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 570
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 706
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "existingCfg, err := h.store.Get(c.Request.Context(), tenant, name)"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 761
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "tenant.go"
      package: "unknown"
      line: 21
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "tenant.go"
      package: "unknown"
      line: 295
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "claims, exists := c.Get(\"claims\")"
      is_manager: false
    - file: "apikey.go"
      package: "unknown"
      line: 18
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "apiKey := r.Header.Get(a.Header)"
      is_manager: false
    - file: "basic.go"
      package: "unknown"
      line: 20
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "auth := r.Header.Get(\"Authorization\")"
      is_manager: false
    - file: "bearer.go"
      package: "unknown"
      line: 19
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "token := r.Header.Get(a.Header)"
      is_manager: false
    - file: "oauth2.go"
      package: "unknown"
      line: 33
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "authHeader := r.Header.Get(\"Authorization\")"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Version: version.Get(),"
      is_manager: false
    - file: "stdio.go"
      package: "unknown"
      line: 62
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Version: version.Get(),"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Version: version.Get(),"
      is_manager: false
    - file: "handler.go"
      package: "unknown"
      line: 103
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "contentType := resp.Header.Get(\"Content-Type\")"
      is_manager: false
    - file: "handler.go"
      package: "unknown"
      line: 121
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "return mcp.NewCallToolResultImage(base64Image, resp.Header.Get(\"Content-Type\")), nil"
      is_manager: false
    - file: "handler.go"
      package: "unknown"
      line: 130
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "contentType := resp.Header.Get(\"Content-Type\")"
      is_manager: false
    - file: "handler.go"
      package: "unknown"
      line: 148
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "return mcp.NewCallToolResultAudio(base64Audio, resp.Header.Get(\"Content-Type\")), nil"
      is_manager: false
    - file: "middleware.go"
      package: "unknown"
      line: 146
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "origin := c.Request.Header.Get(\"Origin\")"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 16
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 51
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 83
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 116
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 137
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 158
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 179
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "response.go"
      package: "unknown"
      line: 205
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if logger, exists := c.Get(\"logger\"); exists {"
      is_manager: false
    - file: "server.go"
      package: "unknown"
      line: 62
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "s.router.GET(\"/health_check\", func(c *gin.Context) {"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 241
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "conn, err := s.sessions.Get(c.Request.Context(), sessionId)"
      is_manager: false
    - file: "sse.go"
      package: "unknown"
      line: 315
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Version: version.Get(),"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 125
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "conn, err = s.sessions.Get(c.Request.Context(), sessionID)"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 155
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "conn, err = s.sessions.Get(c.Request.Context(), sessionID)"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 201
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "Version: version.Get(),"
      is_manager: false
    - file: "streamable.go"
      package: "unknown"
      line: 307
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "conn, err := s.sessions.Get(c.Request.Context(), sessionID)"
      is_manager: false
    - file: "core.go"
      package: "unknown"
      line: 113
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "lang, exists := c.Get(cnst.XLang)"
      is_manager: false
    - file: "core.go"
      package: "unknown"
      line: 129
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "lang := r.Header.Get(cnst.XLang)"
      is_manager: false
    - file: "core.go"
      package: "unknown"
      line: 135
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "acceptLang := r.Header.Get(\"Accept-Language\")"
      is_manager: false
    - file: "core.go"
      package: "unknown"
      line: 164
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "lang, exists := c.Get(cnst.XLang)"
      is_manager: false
    - file: "error.go"
      package: "unknown"
      line: 113
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "lang, exists := c.Get(cnst.XLang)"
      is_manager: false
    - file: "error.go"
      package: "unknown"
      line: 224
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "lang, exists := c.Get(cnst.XLang)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 197
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "data, err := s.client.Get(ctx, key).Bytes()"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 271
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "data, err := s.client.Get(ctx, key).Bytes()"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 127
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(s.url)"
      is_manager: false
    - file: "api.go"
      package: "unknown"
      line: 147
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "result := gjson.Get(jsonString, s.configJSONPath)"
      is_manager: false
    - file: "factory.go"
      package: "unknown"
      line: 119
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := client.Get(cf.baseURL + \"/\")"
      is_manager: false
    - file: "qdrant.go"
      package: "unknown"
      line: 69
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := q.HTTPClient.Get(q.BaseURL + \"/\")"
      is_manager: false
    - file: "searchservice.go"
      package: "unknown"
      line: 120
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "if cached, found := s.cache.Get(cacheKey); found {"
      is_manager: false
    - file: "qdrant.go"
      package: "unknown"
      line: 50
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "resp, err := q.HTTPClient.Get(q.BaseURL + \"/\")"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 143
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/\", sd.handleDashboard)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 144
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/api/sync/status\", sd.handleSyncStatus)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 145
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/api/sync/conflicts\", sd.handleConflicts)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 147
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/api/sync/history\", sd.handleSyncHistory)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 148
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/ws\", sd.handleWebSocket)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 151
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.GET\("
      content: "sd.webServer.GET(\"/health\", sd.handleHealthCheck)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 56
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "v1.PUT(\"/managers/:name/status\", s.updateManagerStatus)"
      is_manager: false
    - file: "conformity_api.go"
      package: "unknown"
      line: 72
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "v1.PUT(\"/config\", s.updateConformityConfig)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 183
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "userMgmt.PUT(\"\", authH.UpdateUser)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 186
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "userMgmt.PUT(\"/tenants\", authH.UpdateUserTenants)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 197
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "tenantMgmt.PUT(\"\", authH.UpdateTenant)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 210
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "mcpGroup.PUT(\"/configs\", mcpHandler.HandleMCPServerUpdate)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 221
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "protected.PUT(\"/chat/sessions/:sessionId/title\", chatHandler.HandleUpdateChatSessionTitle)"
      is_manager: false
    - file: "http-server.go"
      package: "unknown"
      line: 87
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.PUT\("
      content: "router.PUT(\"/users/:email/preferences\", func(c *gin.Context) {"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 92
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "vectors.DELETE(\"/:id\", ag.deleteVector)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 233
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := c.manager.Delete(ctx, docID); err != nil {"
      is_manager: false
    - file: "contextual_memory_manager.go"
      package: "unknown"
      line: 111
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return c.indexManager.Delete(ctx, documentID)"
      is_manager: true
    - file: "suggestion_engine.go"
      package: "unknown"
      line: 504
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "c.Delete()"
      is_manager: false
    - file: "conformity_manager.go"
      package: "unknown"
      line: 598
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 759
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 920
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1081
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1242
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1403
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1564
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1725
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "conformity_manager.go"
      package: "unknown"
      line: 1887
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "cm.cache.Delete(managerName)"
      is_manager: true
    - file: "qdrant_manager.go"
      package: "unknown"
      line: 364
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "_, err := qm.client.Delete(ctx, &qdrant.DeletePoints{"
      is_manager: true
    - file: "vector_registry.go"
      package: "unknown"
      line: 507
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "_, err := vr.client.Delete(ctx, &qdrant.DeletePoints{"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 309
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "router.DELETE(options.BaseURL+\"/documents/:document_id\", wrapper.DeleteDocument)"
      is_manager: false
    - file: "fallback_cache.go"
      package: "unknown"
      line: 256
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := hrc.localCache.Delete(ctx, key); err != nil {"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 178
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return s.cacheManager.Delete(cacheKey)"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 231
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "err := s.cacheManager.Delete(cacheKey)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 184
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "userMgmt.DELETE(\"/:username\", authH.DeleteUser)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 198
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "tenantMgmt.DELETE(\"/:name\", authH.DeleteTenant)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 211
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "mcpGroup.DELETE(\"/configs/:tenant/:name\", mcpHandler.HandleMCPServerDelete)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 220
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "protected.DELETE(\"/chat/sessions/:sessionId\", chatHandler.HandleDeleteChatSession)"
      is_manager: false
    - file: "mysql.go"
      package: "unknown"
      line: 141
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&User{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "mysql.go"
      package: "unknown"
      line: 189
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&Tenant{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "mysql.go"
      package: "unknown"
      line: 231
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ? AND tenant_id = ?\", userID, tenantID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "mysql.go"
      package: "unknown"
      line: 266
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ?\", userID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "postgres.go"
      package: "unknown"
      line: 148
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&User{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "postgres.go"
      package: "unknown"
      line: 196
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&Tenant{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "postgres.go"
      package: "unknown"
      line: 238
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ? AND tenant_id = ?\", userID, tenantID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "postgres.go"
      package: "unknown"
      line: 273
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ?\", userID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 148
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&User{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 196
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return db.db.WithContext(ctx).Delete(&Tenant{}, \"id = ?\", id).Error"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 238
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ? AND tenant_id = ?\", userID, tenantID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 273
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "return dbSession.Where(\"user_id = ?\", userID).Delete(&UserTenant{}).Error"
      is_manager: false
    - file: "mcp.go"
      package: "unknown"
      line: 500
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := h.store.Delete(c.Request.Context(), existingCfg.Tenant, name); err != nil {"
      is_manager: false
    - file: "db.go"
      package: "unknown"
      line: 297
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := tx.Delete(&v).Error; err != nil {"
      is_manager: false
    - file: "db.go"
      package: "unknown"
      line: 355
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := tx.Where(\"tenant = ? AND name = ?\", tenant, name).Delete(&ActiveVersion{}).Error; err != nil {"
      is_manager: false
    - file: "db.go"
      package: "unknown"
      line: 360
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := tx.Where(\"tenant = ? AND name = ?\", tenant, name).Delete(&MCPConfig{}).Error; err != nil {"
      is_manager: false
    - file: "db.go"
      package: "unknown"
      line: 427
      type: "http_endpoints"
      direction: "inbound"
      pattern: "\.DELETE\("
      content: "if err := tx.Where(\"tenant = ? AND name = ? AND version = ?\", tenant, name, version).Delete(&MCPConfigVersion{}).Error; err != nil {"
      is_manager: false
  message_queues:
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 607
      type: "message_queues"
      direction: "bidirectional"
      pattern: "queue\."
      content: "ef.priorityQueue.Add(event, int(event.Priority))"
      is_manager: true
    - file: "metrics.go"
      package: "unknown"
      line: 456
      type: "message_queues"
      direction: "bidirectional"
      pattern: "queue\."
      content: "m.indexingQueue.Set(size)"
      is_manager: false
  redis_pubsub:
    - file: "redis.go"
      package: "unknown"
      line: 72
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "pubsub\."
      content: "ch := s.pubsub.Channel()"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 300
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "pubsub\."
      content: "if err := s.pubsub.Close(); err != nil {"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 57
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "pubsub\."
      content: "defer pubsub.Close()"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 59
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "pubsub\."
      content: "for msg := range pubsub.Channel() {"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 296
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// PublishEvent publie un √©v√©nement dans le bus"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 297
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (cmeb *CrossManagerEventBus) PublishEvent(event *CoordinationEvent) error {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 318
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "cmeb.logger.Debug(fmt.Sprintf(\"Event %s published to %s\", event.ID, target))"
      is_manager: true
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 343
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "mcl.eventBus.PublishEvent(&CoordinationEvent{"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 556
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "mcl.eventBus.PublishEvent(&CoordinationEvent{"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 107
      type: "redis_pubsub"
      direction: "inbound"
      pattern: "PUBLISH"
      content: "events.POST(\"/\", ag.publishEvent)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 498
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// PublishEvent publie un nouvel √©v√©nement"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 499
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// @Summary Publish event"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 507
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (ag *APIGateway) publishEvent(c *gin.Context) {"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 519
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "\"message\": \"Event published successfully\","
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 128
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// Publish publie un √©v√©nement sur le bus"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 129
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) Publish(ctx context.Context, event *ManagerEvent) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 148
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "eb.logger.Debug(\"Event published\","
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 159
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return fmt.Errorf(\"timeout publishing event: queue is full\")"
      is_manager: false
    - file: "persistent_event_bus.go"
      package: "unknown"
      line: 322
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "if err := peb.Publish(ctx, event); err != nil {"
      is_manager: false
    - file: "manager_common.go"
      package: "unknown"
      line: 79
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "Publish(ctx context.Context, event *ManagerEvent) error"
      is_manager: true
    - file: "types.go"
      package: "unknown"
      line: 54
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "PublishedAt time.Time `json:\"published_at,omitempty\"` // Added"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 108
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// Publish publishes an event to the bus"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 109
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) Publish(event *Event) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 139
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "}).Debug(\"Event published\")"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 148
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// PublishSync publishes an event synchronously and waits for processing"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 149
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) PublishSync(ctx context.Context, event *Event) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 150
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "if err := eb.Publish(event); err != nil {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 333
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// validateEvent validates an event before publishing"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 425
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// Common event publishers"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 426
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) PublishManagerRegistered(managerName string, capabilities []string) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 427
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return eb.Publish(&Event{"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 439
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) PublishOperationStarted(operationID string, operationType string, managers []string) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 440
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return eb.Publish(&Event{"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 453
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) PublishOperationCompleted(operationID string, success bool, duration time.Duration) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 459
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return eb.Publish(&Event{"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 472
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) PublishSystemAlert(level string, message string, component string) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 473
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return eb.Publish(&Event{"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 221
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "ih.eventBus.Publish(&Event{"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 297
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "ih.eventBus.Publish(&Event{"
      is_manager: false
    - file: "security_manager.go"
      package: "unknown"
      line: 250
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "PublishedAt: time.Now().Add(-30 * 24 * time.Hour), // Example date"
      is_manager: true
    - file: "security_manager.go"
      package: "unknown"
      line: 262
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "PublishedAt: time.Now().Add(-60 * 24 * time.Hour),"
      is_manager: true
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 204
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (eb *EventBus) Publish(topic string, event interface{}) {"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 318
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "bus.Publish(\"test_topic\", event)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 360
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "bus.Publish(\"cache_hit\", fmt.Sprintf(\"query_%d\", id))"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 378
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "bus.Publish(\"search_completed\", fmt.Sprintf(\"query_%d\", id))"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 123
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// publishUpdate publishes a session update to the topic"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 124
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "func (s *RedisStore) publishUpdate(ctx context.Context, action string, meta *Meta, msg *Message) error {"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 140
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return s.client.Publish(ctx, s.topic, data).Err()"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 177
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// Publish update"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 178
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "if err := s.publishUpdate(ctx, \"create\", meta, nil); err != nil {"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 179
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return nil, fmt.Errorf(\"failed to publish session creation: %w\", err)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 255
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// Publish delete"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 257
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return s.publishUpdate(ctx, \"delete\", meta, nil)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 336
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return c.store.publishUpdate(ctx, \"event\", c.meta, msg)"
      is_manager: false
    - file: "session.go"
      package: "unknown"
      line: 33
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "// EventQueue returns a read-only channel where outbound messages are published."
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 85
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "PUBLISH"
      content: "return r.client.Publish(ctx, r.topic, data).Err()"
      is_manager: false
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 22
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers     map[string][]EventSubscriber"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 215
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers:   make(map[string][]EventSubscriber),"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 330
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// SubscribeToManager souscrit aux √©v√©nements d'un manager"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 331
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (cmeb *CrossManagerEventBus) SubscribeToManager(managerName string, subscriber EventSubscriber) error {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 335
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if cmeb.subscribers[managerName] == nil {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 336
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "cmeb.subscribers[managerName] = make([]EventSubscriber, 0)"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 339
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "cmeb.subscribers[managerName] = append(cmeb.subscribers[managerName], subscriber)"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 340
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "cmeb.logger.Info(fmt.Sprintf(\"Subscriber added for manager %s\", managerName))"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 459
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if subscribers, exists := cmeb.subscribers[event.Target]; exists {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 460
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "for _, subscriber := range subscribers {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 461
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "go func(s EventSubscriber, e *CoordinationEvent) {"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 463
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "cmeb.logger.Error(fmt.Sprintf(\"Subscriber failed to handle event %s: %v\", e.ID, err))"
      is_manager: true
    - file: "cross_manager_event_bus.go"
      package: "unknown"
      line: 465
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "}(subscriber, event)"
      is_manager: true
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 309
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "mcl.eventBus.SubscribeToManager(name, mcl.handleManagerEvent)"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 671
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// EventSubscriber repr√©sente un abonn√© aux √©v√©nements"
      is_manager: false
    - file: "master_coordination_layer.go"
      package: "unknown"
      line: 672
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "type EventSubscriber interface {"
      is_manager: false
    - file: "gateway.go"
      package: "unknown"
      line: 108
      type: "redis_pubsub"
      direction: "inbound"
      pattern: "SUBSCRIBE"
      content: "events.GET(\"/subscribe/:topic\", ag.subscribeToEvents)"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 524
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// SubscribeToEvents souscrit aux √©v√©nements d'un topic"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 525
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// @Summary Subscribe to events"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 532
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// @Router /api/v1/events/subscribe/{topic} [get]"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 533
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (ag *APIGateway) subscribeToEvents(c *gin.Context) {"
      is_manager: false
    - file: "handlers.go"
      package: "unknown"
      line: 538
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "\"message\":       \"Subscribed to events\","
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 15
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers map[string][]EventHandler"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 54
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "Subscribers     int           `json:\"subscribers\"`"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 63
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers: make(map[string][]EventHandler),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 74
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "Subscribers:     0,"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 85
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Subscribe s'abonne √† un type d'√©v√©nement"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 86
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) Subscribe(eventType string, handler EventHandler) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 90
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if eb.subscribers[eventType] == nil {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 91
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = make([]EventHandler, 0)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 94
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = append(eb.subscribers[eventType], handler)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 95
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.metrics.Subscribers = eb.getTotalSubscribers()"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 97
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.logger.Info(\"New subscriber registered\","
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 99
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "zap.Int(\"total_subscribers\", eb.metrics.Subscribers))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 104
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Unsubscribe se d√©sabonne d'un type d'√©v√©nement"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 105
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) Unsubscribe(eventType string, handler EventHandler) error {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 109
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "handlers := eb.subscribers[eventType]"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 111
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "return fmt.Errorf(\"no subscribers for event type: %s\", eventType)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 117
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = append(handlers[:i], handlers[i+1:]...)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 118
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.metrics.Subscribers = eb.getTotalSubscribers()"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 120
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.logger.Info(\"Subscriber unregistered\", zap.String(\"event_type\", eventType))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 183
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "handlers := eb.subscribers[event.Type]"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 187
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.logger.Debug(\"No subscribers for event\","
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 244
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// getTotalSubscribers calcule le nombre total de souscripteurs"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 245
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) getTotalSubscribers() int {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 247
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "for _, handlers := range eb.subscribers {"
      is_manager: false
    - file: "persistent_event_bus.go"
      package: "unknown"
      line: 86
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eventBus.Subscribe(\"*\", persistentBus.persistEventHandler)"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 128
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers map[string][]chan interface{}"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 148
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eventBus:       &EventBus{subscribers: make(map[string][]chan interface{}), logger: logger},"
      is_manager: false
    - file: "complete_ecosystem_integration.go"
      package: "unknown"
      line: 450
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "\"events\":     {\"/api/v1/events\", \"/api/v1/events/subscribe/test\"},"
      is_manager: false
    - file: "manager_common.go"
      package: "unknown"
      line: 80
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "Subscribe(ctx context.Context, eventType string, handler EventHandler) error"
      is_manager: true
    - file: "manager_common.go"
      package: "unknown"
      line: 81
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "Unsubscribe(ctx context.Context, eventType string, handler EventHandler) error"
      is_manager: true
    - file: "event_bus.go"
      package: "unknown"
      line: 14
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers    map[string][]EventHandler"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 33
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "SubscriberCount map[string]int             `json:\"subscriber_count\"`"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 40
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers:  make(map[string][]EventHandler),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 50
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "SubscriberCount: make(map[string]int),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 75
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Subscribe subscribes to specific event types"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 76
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) Subscribe(eventType string, handler EventHandler) {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 80
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if eb.subscribers[eventType] == nil {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 81
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = make([]EventHandler, 0)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 84
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = append(eb.subscribers[eventType], handler)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 85
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.metrics.SubscriberCount[eventType] = len(eb.subscribers[eventType])"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 89
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "\"subscribers\": len(eb.subscribers[eventType]),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 93
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Unsubscribe removes a handler from event type (simplified implementation)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 94
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) Unsubscribe(eventType string, handler EventHandler) {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 98
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if handlers, exists := eb.subscribers[eventType]; exists {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 102
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[eventType] = handlers[:len(handlers)-1]"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 103
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.metrics.SubscriberCount[eventType] = len(eb.subscribers[eventType])"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 197
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "SubscriberCount: make(map[string]int),"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 204
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "for k, v := range eb.metrics.SubscriberCount {"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 205
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "metrics.SubscriberCount[k] = v"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 293
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Get subscribers for this event type"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 295
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "handlers := make([]EventHandler, len(eb.subscribers[event.Type]))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 296
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "copy(handlers, eb.subscribers[event.Type])"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 298
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Also get wildcard subscribers (*)"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 299
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "wildcardHandlers := make([]EventHandler, len(eb.subscribers[\"*\"]))"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 300
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "copy(wildcardHandlers, eb.subscribers[\"*\"])"
      is_manager: false
    - file: "event_bus.go"
      package: "unknown"
      line: 407
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "\"subscribers\":      len(metrics.SubscriberCount),"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 369
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// SubscribeToEvents subscribes to specific event types"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 370
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (ih *IntegrationHub) SubscribeToEvents(eventType string, handler EventHandler) {"
      is_manager: false
    - file: "integration_hub.go"
      package: "unknown"
      line: 371
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "ih.eventBus.Subscribe(eventType, handler)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 186
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers map[string][]chan interface{}"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 193
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "subscribers: make(map[string][]chan interface{}),"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 198
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "func (eb *EventBus) Subscribe(topic string, ch chan interface{}) {"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 201
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "eb.subscribers[topic] = append(eb.subscribers[topic], ch)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 208
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "for _, ch := range eb.subscribers[topic] {"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 311
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "bus.Subscribe(\"test_topic\", ch1)"
      is_manager: false
    - file: "phase_4_performance_validation.go"
      package: "unknown"
      line: 312
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "bus.Subscribe(\"test_topic\", ch2)"
      is_manager: false
    - file: "phase_5_validation_simple.go"
      package: "unknown"
      line: 55
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "\"GET /api/v1/events/subscribe/:topic - Souscription\","
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 43
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "UnsubscribeList []string  `json:\"unsubscribe_list\"`"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 54
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "UnsubscribeRate float64   `json:\"unsubscribe_rate\"`"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 210
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "UnsubscribeList: []string{},"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 236
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Invalidate related patterns if user unsubscribed"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 237
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "if len(prefs.UnsubscribeList) > 0 {"
      is_manager: false
    - file: "service.go"
      package: "unknown"
      line: 272
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "UnsubscribeRate: 0.001,"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 63
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "// Subscribe to session updates"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 64
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "store.pubsub = client.Subscribe(context.Background(), cfg.Topic)"
      is_manager: false
    - file: "redis.go"
      package: "unknown"
      line: 54
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "pubsub := r.client.Subscribe(ctx, r.topic)"
      is_manager: false
    - file: "server_types.go"
      package: "unknown"
      line: 177
      type: "redis_pubsub"
      direction: "bidirectional"
      pattern: "SUBSCRIBE"
      content: "Subscribe   bool `json:\"subscribe\"`"
      is_manager: false
  websockets:
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 94
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "// et fournit une visualisation web temps r√©el avec WebSocket."
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 40
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "var upgrader = websocket.Upgrader{"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 22
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "upgrader      websocket.Upgrader"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 23
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "connections   map[string]*websocket.Conn"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 68
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "upgrader: websocket.Upgrader{"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 73
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "connections: make(map[string]*websocket.Conn),"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 535
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 51
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "wsConnections map[string]*websocket.Conn"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 93
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "var upgrader = websocket.Upgrader{"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 106
      type: "websockets"
      direction: "bidirectional"
      pattern: "websocket\."
      content: "wsConnections: make(map[string]*websocket.Conn),"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 18
      type: "websockets"
      direction: "bidirectional"
      pattern: "gorilla/websocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 11
      type: "websockets"
      direction: "bidirectional"
      pattern: "gorilla/websocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 11
      type: "websockets"
      direction: "bidirectional"
      pattern: "gorilla/websocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 333
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 336
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 340
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 360
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "return sessions, rows.Err()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 479
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 482
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 486
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 507
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "return events, rows.Err()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 554
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 557
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 561
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 580
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "return snapshots, rows.Err()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 711
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 713
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 717
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "postgresql_storage.go"
      package: "unknown"
      line: 740
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "return qb, rows.Err()"
      is_manager: false
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 79
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 82
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 86
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 170
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 173
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 177
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 216
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 219
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: true
    - file: "retrieval_manager.go"
      package: "unknown"
      line: 222
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: true
    - file: "sqlite_index_manager.go"
      package: "unknown"
      line: 371
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: true
    - file: "sqlite_index_manager.go"
      package: "unknown"
      line: 374
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: true
    - file: "sqlite_index_manager.go"
      package: "unknown"
      line: 379
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&doc.ID, &doc.Content, &metadataJSON, &createdAt, &updatedAt)"
      is_manager: true
    - file: "sqlite_index_manager.go"
      package: "unknown"
      line: 391
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "if err := rows.Err(); err != nil {"
      is_manager: true
    - file: "analyzer.go"
      package: "unknown"
      line: 33
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 36
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 40
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 85
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 89
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 93
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&module, &errorCode, &frequency)"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 128
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 133
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "analyzer.go"
      package: "unknown"
      line: 137
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&errorCode1, &module1, &errorCode2, &module2, &timeDiffSeconds)"
      is_manager: false
    - file: "sync.go"
      package: "unknown"
      line: 39
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "fmt.Println(\"Syncing with n8n workflows...\")"
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 54
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 57
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 60
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 160
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 163
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "items.go"
      package: "unknown"
      line: 165
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "storage_manager.go"
      package: "unknown"
      line: 284
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: true
    - file: "storage_manager.go"
      package: "unknown"
      line: 287
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: true
    - file: "storage_manager.go"
      package: "unknown"
      line: 290
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: true
    - file: "storage_manager.go"
      package: "unknown"
      line: 302
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "if err := rows.Err(); err != nil { return nil, fmt.Errorf(\"error reading dependency rows: %w\", err) }"
      is_manager: true
    - file: "object_storage.go"
      package: "unknown"
      line: 110
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "object_storage.go"
      package: "unknown"
      line: 113
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "object_storage.go"
      package: "unknown"
      line: 115
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "if err := rows.Scan(&key); err != nil {"
      is_manager: false
    - file: "operations.go"
      package: "unknown"
      line: 30
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "operations.go"
      package: "unknown"
      line: 33
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "operations.go"
      package: "unknown"
      line: 38
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 224
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 226
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 228
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&tableName, &comment)"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 274
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 276
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 280
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&colName, &dataType, &isNullable, &defaultValue, &comment)"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 327
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 329
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 331
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&fromTable, &fromColumn, &toTable, &toColumn)"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 374
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 376
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "vectorization_utils.go"
      package: "unknown"
      line: 381
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan(&indexName, &tableName, &isUnique, &columns)"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 122
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 125
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 127
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "sqlite.go"
      package: "unknown"
      line: 143
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "return values, rows.Err()"
      is_manager: false
    - file: "plan_synchronizer.go"
      package: "unknown"
      line: 445
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "plan_synchronizer.go"
      package: "unknown"
      line: 448
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "plan_synchronizer.go"
      package: "unknown"
      line: 450
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "if err := rows.Scan(&planID); err != nil {"
      is_manager: false
    - file: "plan_synchronizer.go"
      package: "unknown"
      line: 456
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "if err := rows.Err(); err != nil {"
      is_manager: false
    - file: "sql_storage.go"
      package: "unknown"
      line: 275
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "defer rows.Close()"
      is_manager: false
    - file: "sql_storage.go"
      package: "unknown"
      line: 278
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "for rows.Next() {"
      is_manager: false
    - file: "sql_storage.go"
      package: "unknown"
      line: 282
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "err := rows.Scan("
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 416
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "sc create EmailSender binpath= \"C:\Program Files\EmailSender\email-sender-windows.exe\" ^"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 480
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "1. Copy email-sender-windows.exe to C:\Program Files\EmailSender\"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 315
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "ws.onopen = function() {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 321
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "ws.onmessage = function(event) {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 326
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "ws.onclose = function() {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 334
      type: "websockets"
      direction: "bidirectional"
      pattern: "ws\."
      content: "ws.onerror = function(error) {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 21
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "WebSocketEnabled     bool          `yaml:\"websocket_enabled\" json:\"websocket_enabled\"`"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 94
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// et fournit une visualisation web temps r√©el avec WebSocket."
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 103
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "websocketServer   *WebSocketServer"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 118
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "wsConnections     map[string]*WebSocketConnection"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 157
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocketServer serveur WebSocket pour les mises √† jour temps r√©el"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 158
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocketServer struct {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 159
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "config      *WebSocketConfig"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 161
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "connections map[string]*WebSocketConnection"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 175
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocketConnection connexion WebSocket active"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 176
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocketConnection struct {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 182
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "Connection   interface{} // WebSocket connection"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 244
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "wsConnections: make(map[string]*WebSocketConnection),"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 283
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Initialiser le serveur WebSocket si activ√©"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 284
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 285
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if err := rtmd.websocketServer.Initialize(ctx); err != nil {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 286
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return fmt.Errorf(\"failed to initialize WebSocket server: %w\", err)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 341
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// V√©rifier le serveur WebSocket si activ√©"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 342
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 343
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if err := rtmd.websocketServer.HealthCheck(ctx); err != nil {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 344
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return fmt.Errorf(\"WebSocket server health check failed: %w\", err)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 396
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Fermer toutes les connexions WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 399
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if err := rtmd.closeWebSocketConnection(conn); err != nil {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 400
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.logger.WithError(err).Warn(fmt.Sprintf(\"Failed to close WebSocket connection %s\", conn.ID))"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 403
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.wsConnections = make(map[string]*WebSocketConnection)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 413
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "{\"WebSocketServer\", rtmd.websocketServer.Cleanup},"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 488
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// ConnectWebSocket connecte un client WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 489
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (rtmd *RealTimeMonitoringDashboard) ConnectWebSocket(userID string, subscriptions []string) (*WebSocketConnection, error) {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 490
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if !rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 491
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return nil, fmt.Errorf(\"WebSocket is disabled\")"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 494
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "conn := &WebSocketConnection{"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 506
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.logger.Info(fmt.Sprintf(\"WebSocket client connected: %s (user: %s)\", conn.ID, userID))"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 511
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// BroadcastUpdate diffuse une mise √† jour √† tous les clients WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 513
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if !rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 517
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return rtmd.websocketServer.BroadcastMessage(updateType, data)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 571
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Initialiser le serveur WebSocket si activ√©"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 572
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 573
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "websocketServer, err := NewWebSocketServer(&WebSocketConfig{}, rtmd.logger)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 575
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return fmt.Errorf(\"failed to create WebSocket server: %w\", err)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 577
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.websocketServer = websocketServer"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 593
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Route WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 594
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 595
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "mux.HandleFunc(\"/ws\", rtmd.handleWebSocket)"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 694
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Diffuser les mises √† jour via WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 695
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 776
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Diffuser l'alerte via WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 777
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 812
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Diffuser l'√©v√©nement via WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 813
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if rtmd.config.WebSocketEnabled {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 885
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (rtmd *RealTimeMonitoringDashboard) handleWebSocket(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 886
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Ici serait impl√©ment√©e la logique de mise √† niveau WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 887
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.logger.Info(\"WebSocket connection attempted\")"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 1011
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (rtmd *RealTimeMonitoringDashboard) closeWebSocketConnection(conn *WebSocketConnection) error {"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 1012
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Ici serait impl√©ment√©e la logique de fermeture de connexion WebSocket"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 1013
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rtmd.logger.Info(fmt.Sprintf(\"Closing WebSocket connection %s\", conn.ID))"
      is_manager: false
    - file: "real_time_monitoring_dashboard.go"
      package: "unknown"
      line: 1054
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocketConfig struct {"
      is_manager: false
    - file: "advanced_autonomy_manager.go"
      package: "unknown"
      line: 108
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "WebSocketEnabled     bool          `yaml:\"websocket_enabled\" json:\"websocket_enabled\"`"
      is_manager: true
    - file: "handlers.go"
      package: "unknown"
      line: 540
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "\"websocket_url\": \"/ws/events/\" + topic,"
      is_manager: false
    - file: "integration_demo.go"
      package: "unknown"
      line: 174
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "map[string]interface{}{\"server\": \"localhost:8080\", \"protocol\": \"websocket\"},"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 224
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "wsHandler := apiserverHandler.NewWebSocket(db, openaiClient, jwtService, logger)"
      is_manager: false
    - file: "main.go"
      package: "unknown"
      line: 225
      type: "websockets"
      direction: "inbound"
      pattern: "WebSocket"
      content: "r.GET(\"/api/ws/chat\", wsHandler.HandleWebSocket)"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 18
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 24
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocket struct {"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 31
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func NewWebSocket(db database.Database, openaiCli *openai.Client, jwtService *jwt.Service, logger *zap.Logger) *WebSocket {"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 32
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "return &WebSocket{"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 36
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "logger:     logger.Named(\"apiserver.handler.websocket\"),"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 40
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "var upgrader = websocket.Upgrader{"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 46
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (h *WebSocket) HandleWebSocket(c *gin.Context) {"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 49
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Warn(\"websocket connection attempt without token\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 57
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Warn(\"invalid token for websocket connection\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 64
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Debug(\"token validated successfully for websocket connection\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 70
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Warn(\"websocket connection attempt without sessionId\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 121
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Info(\"new websocket connection attempt\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 128
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Error(\"failed to upgrade websocket connection\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 137
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Info(\"websocket connection established\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 143
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "var message dto.WebSocketMessage"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 146
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Warn(\"error reading websocket message\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 155
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "h.logger.Debug(\"websocket message received\","
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 349
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "response := dto.WebSocketResponse{"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 384
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "response := dto.WebSocketResponse{"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 519
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "response := dto.WebSocketResponse{"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 3
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocketMessage represents a message sent over WebSocket"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 4
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocketMessage struct {"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 14
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocketResponse represents a response sent over WebSocket"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 15
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "type WebSocketResponse struct {"
      is_manager: false
    - file: "websocket.go"
      package: "unknown"
      line: 63
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// MsgType represents the type of WebSocket message"
      is_manager: false
    - file: "sync-integration-test.go"
      package: "unknown"
      line: 462
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Test WebSocket connection count"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 11
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 21
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocket connections"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 22
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "upgrader      websocket.Upgrader"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 23
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "connections   map[string]*websocket.Conn"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 68
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "upgrader: websocket.Upgrader{"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 73
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "connections: make(map[string]*websocket.Conn),"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 87
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "http.HandleFunc(\"/ws\", rd.handleWebSocket)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 309
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "function connectWebSocket() {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 313
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "ws = new WebSocket(wsUrl);"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 316
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "console.log('WebSocket connected');"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 327
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "console.log('WebSocket connection closed');"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 330
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "setTimeout(connectWebSocket, 2000 * connectionAttempts);"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 335
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "console.error('WebSocket error:', error);"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 444
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Fallback API polling if WebSocket fails"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 453
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "connectWebSocket();"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 500
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// handleWebSocket handles WebSocket connections for real-time updates"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 501
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (rd *RealtimeDashboard) handleWebSocket(w http.ResponseWriter, r *http.Request) {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 504
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.logger.Printf(\"WebSocket upgrade failed: %v\", err)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 515
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.logger.Printf(\"New WebSocket connection: %s\", connID)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 528
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.logger.Printf(\"WebSocket connection closed: %s\", connID)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 535
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 536
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.logger.Printf(\"WebSocket error: %v\", err)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 549
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// broadcastUpdates sends periodic updates to all connected WebSocket clients"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 553
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.broadcastToWebSockets(data)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 558
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// broadcastToWebSockets sends data to all connected WebSocket clients"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 559
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (rd *RealtimeDashboard) broadcastToWebSockets(data *DashboardData) {"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 566
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "rd.logger.Printf(\"Failed to send WebSocket message to %s: %v\", connID, err)"
      is_manager: false
    - file: "realtime-dashboard.go"
      package: "unknown"
      line: 621
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// GetConnectionCount returns the number of active WebSocket connections"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 11
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "\"github.com/gorilla/websocket\""
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 51
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "wsConnections map[string]*websocket.Conn"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 92
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// WebSocket upgrader"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 93
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "var upgrader = websocket.Upgrader{"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 106
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "wsConnections: make(map[string]*websocket.Conn),"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 148
      type: "websockets"
      direction: "inbound"
      pattern: "WebSocket"
      content: "sd.webServer.GET(\"/ws\", sd.handleWebSocket)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 226
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Broadcast update to WebSocket clients"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 252
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// handleWebSocket handles WebSocket connections for real-time updates"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 253
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "func (sd *SyncDashboard) handleWebSocket(c *gin.Context) {"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 256
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "sd.logger.Printf(\"WebSocket upgrade failed: %v\", err)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 264
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "sd.logger.Printf(\"WebSocket client connected: %s\", clientID)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 278
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "sd.logger.Printf(\"WebSocket client disconnected: %s\", clientID)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 305
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// broadcastUpdate sends updates to all connected WebSocket clients"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 316
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "sd.logger.Printf(\"Failed to send WebSocket message to %s: %v\", clientID, err)"
      is_manager: false
    - file: "sync_dashboard.go"
      package: "unknown"
      line: 330
      type: "websockets"
      direction: "bidirectional"
      pattern: "WebSocket"
      content: "// Close all WebSocket connections"
      is_manager: false
