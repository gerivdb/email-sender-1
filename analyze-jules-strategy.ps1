# Analyse de la strat√©gie de branching et contributions Jules
# V√©rification de la qualit√© des commits et remont√©e qualitative

Write-Host "üîç ANALYSE DE LA STRAT√âGIE DE BRANCHING JULES" -ForegroundColor Cyan
Write-Host "=" * 50

# 1. Identifier toutes les branches Jules
Write-Host "`n1Ô∏è‚É£ BRANCHES D√âDI√âES √Ä JULES:" -ForegroundColor Yellow
$julesBranches = git branch -a | Where-Object { $_ -match "jules" }
$julesBranches | ForEach-Object { 
   Write-Host "   üìÇ $_" -ForegroundColor Green 
}

# 2. Analyser les commits de Jules par branch
Write-Host "`n2Ô∏è‚É£ COMMITS JULES PAR BRANCHE:" -ForegroundColor Yellow
foreach ($branch in $julesBranches) {
   $cleanBranch = $branch.Trim().Replace("remotes/origin/", "").Replace("* ", "")
   Write-Host "`n   üåø Branche: $cleanBranch" -ForegroundColor Magenta
    
   # Obtenir les commits de cette branche
   $commits = git log $cleanBranch --oneline --author="jules" -5 2>$null
   if ($commits) {
      $commits | ForEach-Object { Write-Host "      üíæ $_" -ForegroundColor Gray }
   }
   else {
      Write-Host "      ‚ö†Ô∏è Aucun commit jules trouv√©" -ForegroundColor DarkYellow
   }
}

# 3. Analyser la qualit√© des commits (SOLID, KISS, DRY)
Write-Host "`n3Ô∏è‚É£ ANALYSE QUALITATIVE DES COMMITS:" -ForegroundColor Yellow

$qualityKeywords = @(
   "SOLID", "DRY", "KISS", "refactor", "optimize", "clean", 
   "improve", "enhance", "fix", "resolve", "implement", "update"
)

Write-Host "   üéØ Mots-cl√©s qualit√© recherch√©s: $($qualityKeywords -join ', ')" -ForegroundColor Cyan

$allJulesCommits = git log --all --author="jules" --oneline -20 2>$null
$qualityCommits = @()

if ($allJulesCommits) {
   foreach ($commit in $allJulesCommits) {
      foreach ($keyword in $qualityKeywords) {
         if ($commit -match $keyword) {
            $qualityCommits += $commit
            break
         }
      }
   }
}

Write-Host "`n   üìä COMMITS DE QUALIT√â D√âTECT√âS:" -ForegroundColor Green
if ($qualityCommits.Count -gt 0) {
   $qualityCommits | ForEach-Object { 
      Write-Host "      ‚úÖ $_" -ForegroundColor Green 
   }
    
   $qualityRatio = [math]::Round(($qualityCommits.Count / $allJulesCommits.Count) * 100, 2)
   Write-Host "`n   üìà Ratio qualit√©: $qualityRatio% ($($qualityCommits.Count)/$($allJulesCommits.Count))" -ForegroundColor Cyan
}
else {
   Write-Host "      ‚ö†Ô∏è Aucun commit de qualit√© d√©tect√© avec les crit√®res SOLID/KISS/DRY" -ForegroundColor DarkYellow
}

# 4. Analyse des merges et remont√©es
Write-Host "`n4Ô∏è‚É£ STRAT√âGIE DE REMONT√âE:" -ForegroundColor Yellow

# V√©rifier les merges vers les branches principales
$mainBranches = @("main", "dev", "manager-ecosystem")
foreach ($mainBranch in $mainBranches) {
   Write-Host "`n   üîÄ Remont√©es vers $mainBranch:" -ForegroundColor Magenta
   $merges = git log $mainBranch --grep="jules" --grep="Merge.*jules" --oneline -10 2>$null
   if ($merges) {
      $merges | ForEach-Object { Write-Host "      üîÑ $_" -ForegroundColor Blue }
   }
   else {
      Write-Host "      ‚ö†Ô∏è Aucune remont√©e jules d√©tect√©e" -ForegroundColor DarkYellow
   }
}

# 5. Recommandations pour am√©liorer la strat√©gie
Write-Host "`n5Ô∏è‚É£ RECOMMANDATIONS STRAT√âGIQUES:" -ForegroundColor Yellow
Write-Host "   üí° Pour optimiser la remont√©e qualitative:" -ForegroundColor Cyan
Write-Host "      - Utiliser des tags [SOLID], [DRY], [KISS] dans les messages de commit"
Write-Host "      - Cr√©er une branche jules-quality pour les commits de haute qualit√©"
Write-Host "      - Automatiser l'analyse de qualit√© avec des hooks Git"
Write-Host "      - Impl√©menter un syst√®me de scoring des commits"
Write-Host "      - Cr√©er des PR templates pour les contributions Jules"

# 6. Status actuel
Write-Host "`n6Ô∏è‚É£ STATUS ACTUEL:" -ForegroundColor Yellow
$currentBranch = git branch --show-current
Write-Host "   üìç Branche actuelle: $currentBranch" -ForegroundColor Green
Write-Host "   üìà Nombre total de branches Jules: $($julesBranches.Count)" -ForegroundColor Cyan
Write-Host "   üíª Derni√®re activit√© Jules:" -ForegroundColor Cyan
$lastJulesCommit = git log --all --author="jules" --oneline -1 2>$null
if ($lastJulesCommit) {
   Write-Host "      $lastJulesCommit" -ForegroundColor Gray
}
else {
   Write-Host "      ‚ö†Ô∏è Aucun commit jules r√©cent trouv√©" -ForegroundColor DarkYellow
}

Write-Host "`n‚úÖ ANALYSE TERMIN√âE" -ForegroundColor Green
