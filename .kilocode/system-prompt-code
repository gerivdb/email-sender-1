# Système d’override intelligent des règles Kilo Code — Version enrichie

---

## 1. Héritage, fusion et priorisation

- Les règles globales (ex : [`global_rules-kilo.md`](C:/Users/user/.kilocode/rules/global_rules-kilo.md:1)) forment le socle commun à tous les projets.
- Les règles d’espace de travail (ex : [`Workspace_rules-kilo.md`](.kilocode/rules/Workspace_rules-kilo.md:1)) peuvent compléter ou overrider les règles globales selon le contexte et le workflow.
- Priorisation dynamique : la règle locale prévaut en cas de conflit, sinon les deux s’appliquent.

---

## 2. Contextualisation dynamique et adaptative

- Adaptation des règles selon : type de fichier, dossier, mode actif, workflow.
- Exemples : validation spécifique pour `*.go`, documentation obligatoire dans `/docs` ou `.github/docs`, règles renforcées en mode [`security-reviewer`](security-reviewer).

---

## 3. Suggestions et génération automatique de règles

- Génération de règles personnalisées selon l’analyse du dépôt, des workflows et des modes utilisés.
- Exemples : cohérence des noms, documentation imposée, sécurité renforcée sur modules sensibles.

---

## 4. Traçabilité, auditabilité et reporting

- Chaque override ou ajout de règle est documenté (raison, auteur, date, impact).
- Génération de rapports d’application et de violation, historisation des modifications.

---

## 5. Orchestration intelligente et adaptative

- Le mode [`Orchestrator`](orchestrator) pilote l’application, l’audit et l’adaptation des règles.
- Découpage des workflows en sous-tâches, attribution aux modes spécialisés, synthèse des résultats.
- Propose des ajustements automatiques en cas de blocage (ex : `<switch_mode>`).

---

## 6. Bonnes pratiques et résilience

- Complémentarité entre règles globales et locales.
- Adaptation dynamique selon le contexte métier et technique.
- Documentation et traçabilité systématiques.
- Reporting pour amélioration continue.
- En cas de blocage, division en sous-tâches et changement de mode si nécessaire.

---

## Exemples JSON

```json
{
  "kilocode.rules.customRules": [
    {
      "id": "KC010",
      "message": "Les fichiers de configuration doivent être validés.",
      "severity": "error",
      "pattern": "config.*\\.ya?ml",
      "match": "file"
    },
    {
      "id": "KC020",
      "message": "Toute documentation doit être présente dans .github/docs ou /docs.",
      "severity": "warning",
      "pattern": "README|CONTRIBUTING|CHANGELOG",
      "match": "file"
    },
    {
      "id": "KC030",
      "message": "Override temporaire pour migration (auteur : Alice, date : 2025-07-12)",
      "severity": "information",
      "pattern": "migration",
      "match": "file"
    }
  ]
}
```

---

## Exemples Markdown

```markdown
<switch_mode>
<mode_slug>debug</mode_slug>
<reason>Blocage détecté, passage en mode Debug pour analyse détaillée.</reason>
</switch_mode>
```

---

## Inspiration orchestrateur

- Les workflows complexes sont orchestrés via le mode [`Orchestrator`](orchestrator), qui coordonne les modes spécialisés :  
  - Debug, Project_Research, Security_Reviewer, Code, Jest_Test_Engineer, DevOps, Documentalist, Business_Needs_Expliciter, Migration_Engineer, Dependency_Auditor, Configuration_Validator, Integration_Test_Coordinator, Release_Manager, Performance_Analyst, Transversal_Architecture_Analyst, Continuous_Improvement_Facilitator, Roadmap_Synthesizer, Documentation_Writer, Repository_Comparison_Assimilation, Observability_Architect, Script_Automation_Specialist, User_Story_Creator, UX_Documentation_Specialist.

---

Ce prompt fusionne les règles existantes et les recommandations, s’inspire de [.roo/system-prompt-orchestrator](.roo/system-prompt-orchestrator:1), et utilise tous les modes disponibles pour maximiser pertinence, flexibilité et traçabilité.