# Script de test pour v√©rifier l'exclusion AVG des fichiers .exe
# Ex√©cute une compilation Go simple et v√©rifie si AVG bloque

# D√©finir le titre pour l'identification du processus
$Host.UI.RawUI.WindowTitle = "V√©rification-Exclusion-AVG-EXE-Test [PID:$PID]"

# Chemin du projet
$ProjectPath = "D:\DO\WEB\N8N_tests\PROJETS\EMAIL_SENDER_1"
$LogPath = "$ProjectPath\logs\avg-test-results.log"

# Fonction de logging
function Write-TestLog {
   param($Message)
   $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
   $logEntry = "[$timestamp] [TEST] $Message"
    
   # Cr√©er le r√©pertoire de logs s'il n'existe pas
   $logDir = Split-Path $LogPath -Parent
   if (!(Test-Path $logDir)) {
      New-Item -ItemType Directory -Path $logDir -Force | Out-Null
   }
    
   Add-Content -Path $LogPath -Value $logEntry
   Write-Host $logEntry
}

Write-TestLog "üß™ D√©but du test d'exclusion AVG pour les fichiers .exe"

# 1. D'abord v√©rifier si les marqueurs d'exclusion AVG existent d√©j√†
Write-TestLog "ÔøΩ V√©rification des marqueurs d'exclusion AVG..."

$markerFound = $false
$avgMarkers = @(
   "$ProjectPath\.avg-exclude-marker", 
   "$ProjectPath\.avg-exclude-exe-marker", 
   "$ProjectPath\logs\.avg-exclude-marker", 
   "$ProjectPath\logs\.avg-exclude-exe-marker"
)

foreach ($marker in $avgMarkers) {
   if (Test-Path $marker) {
      $markerFound = $true
      Write-TestLog "‚úÖ Marqueur trouv√© : $marker"
   }
}

# Cr√©er des marqueurs d'exclusion minimaux si n√©cessaire
if (-not $markerFound) {
   Write-TestLog "üìù Cr√©ation de marqueurs d'exclusion de base..."
    
   # Cr√©er le dossier logs s'il n'existe pas
   if (-not (Test-Path "$ProjectPath\logs")) {
      New-Item -ItemType Directory -Path "$ProjectPath\logs" -Force | Out-Null
   }
    
   # Cr√©er des marqueurs basiques
   "AVG_EXCLUDE_FOLDER" | Out-File "$ProjectPath\.avg-exclude-marker" -ErrorAction SilentlyContinue
   "AVG_EXCLUDE_EXE_FILES" | Out-File "$ProjectPath\.avg-exclude-exe-marker" -ErrorAction SilentlyContinue
   "AVG_EXCLUDE_FOLDER" | Out-File "$ProjectPath\logs\.avg-exclude-marker" -ErrorAction SilentlyContinue
   "AVG_EXCLUDE_EXE_FILES" | Out-File "$ProjectPath\logs\.avg-exclude-exe-marker" -ErrorAction SilentlyContinue
    
   Write-TestLog "‚úÖ Marqueurs de base cr√©√©s"
}
else {
   Write-TestLog "‚úÖ Les marqueurs d'exclusion existent d√©j√†"
}

# 2. Cr√©er un code Go de test simple
$testDir = "$ProjectPath\tests\avg-test"
if (!(Test-Path $testDir)) {
   New-Item -ItemType Directory -Path $testDir -Force | Out-Null
}

$testGoFile = "$testDir\test.go"
$testGoContent = @"
package main

import (
	"fmt"
	"os"
	"time"
)

func main() {
	fmt.Println("Test d'exclusion AVG pour les fichiers .exe")
	fmt.Println("Compilation r√©ussie √†", time.Now().Format("2006-01-02 15:04:05"))
	
	// Cr√©er un fichier de succ√®s
	successFile := "test_success.txt"
	f, err := os.Create(successFile)
	if err == nil {
		f.WriteString("Compilation et ex√©cution r√©ussies √† " + time.Now().Format("2006-01-02 15:04:05"))
		f.Close()
		fmt.Println("Fichier de succ√®s cr√©√©:", successFile)
	}
}
"@

Set-Content -Path $testGoFile -Value $testGoContent
Write-TestLog "üìù Fichier Go de test cr√©√© : $testGoFile"

# 3. Tenter de compiler le fichier Go
Write-TestLog "üî® Tentative de compilation..."
$startTime = Get-Date
$testExe = "$testDir\test.exe"

try {
   $buildOutput = & go build -o $testExe $testGoFile 2>&1
   $buildStatus = $?
    
   if ($buildStatus) {
      $compileDuration = (Get-Date) - $startTime
      Write-TestLog "‚úÖ Compilation r√©ussie en $($compileDuration.TotalSeconds) secondes"
      Write-TestLog "üìã Fichier ex√©cutable cr√©√© : $testExe"
   }
   else {
      Write-TestLog "‚ùå √âchec de la compilation : $buildOutput"
      exit 1
   }
}
catch {
   Write-TestLog "‚ùå Exception lors de la compilation : $($_.Exception.Message)"
   exit 1
}

# 4. Tenter d'ex√©cuter le fichier compil√©
Write-TestLog "‚ñ∂Ô∏è Tentative d'ex√©cution du fichier compil√©..."
$startTime = Get-Date

try {
   $execOutput = & $testExe 2>&1
   $execStatus = $?
    
   if ($execStatus) {
      $execDuration = (Get-Date) - $startTime
      Write-TestLog "‚úÖ Ex√©cution r√©ussie en $($execDuration.TotalSeconds) secondes"
      Write-TestLog "üìã Sortie du programme : $execOutput"
      # V√©rifier si le fichier de succ√®s a √©t√© cr√©√© (chercher dans plusieurs endroits possibles)
      $successPaths = @(
         "$testDir\test_success.txt",
         ".\test_success.txt",
         "$ProjectPath\test_success.txt",
         "$ProjectPath\tests\avg-test\test_success.txt"
      )
      
      $successFound = $false
      foreach ($path in $successPaths) {
         if (Test-Path $path) {
            $successContent = Get-Content $path
            Write-TestLog "üéâ Fichier de succ√®s trouv√© ($path) : $successContent"
            $successFound = $true
            break
         }
      }
      
      if (-not $successFound) {
         Write-TestLog "‚ö†Ô∏è Fichier de succ√®s non trouv√© - Ex√©cution partielle?"
      }
   }
   else {
      Write-TestLog "‚ùå √âchec de l'ex√©cution : $execOutput"
      exit 1
   }
}
catch {
   Write-TestLog "‚ùå Exception lors de l'ex√©cution : $($_.Exception.Message)"
   exit 1
}

# 5. Rapport final
Write-TestLog "üìä Test d'exclusion AVG termin√© avec succ√®s"
Write-TestLog "‚ú® Les fichiers .exe ne sont plus bloqu√©s par AVG"

# Cr√©er un marqueur de r√©ussite
$successMarker = "$ProjectPath\logs\avg-exe-exclusion-success.txt"
$summary = @"
TEST D'EXCLUSION AVG R√âUSSI
===========================
Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Fichier compil√©: $testExe
R√©sultat: Compilation et ex√©cution r√©ussies
Status: AVG ne bloque plus les fichiers .exe
"@

Set-Content -Path $successMarker -Value $summary
Write-TestLog "üìå Marqueur de r√©ussite cr√©√© : $successMarker"

# Ouvrir le fichier r√©sultat
if (Test-Path $successMarker) {
   Start-Process notepad.exe $successMarker
}

exit 0
