# Script de test simplifié pour la Phase 6
# Ce script vérifie les prérequis de base pour l'exécution de la Phase 6

Write-Host "=== Test des prérequis pour la Phase 6 (version simplifiée) ===" -ForegroundColor Cyan

# Vérifier l'environnement PowerShell
$psVersion = $PSVersionTable.PSVersion
Write-Host "Version PowerShell: $($psVersion.Major).$($psVersion.Minor).$($psVersion.Build)" -ForegroundColor Yellow

# Vérifier le répertoire courant
$currentDir = Get-Location
Write-Host "Répertoire courant: $currentDir" -ForegroundColor Yellow

# Vérifier l'existence des répertoires importants
$directories = @(
    @{ Path = "scripts"; Description = "Scripts principaux" },
    @{ Path = "scripts\maintenance"; Description = "Scripts de maintenance" },
    @{ Path = "scripts\maintenance\phase6"; Description = "Scripts de la Phase 6" },
    @{ Path = "logs"; Description = "Logs" }
)

Write-Host "`nVérification des répertoires:" -ForegroundColor Yellow
foreach ($dir in $directories) {
    $path = Join-Path -Path $currentDir -ChildPath $dir.Path
    $exists = Test-Path -Path $path -PathType Container
    $status = if ($exists) { "Existe" } else { "N'existe pas" }
    $color = if ($exists) { "Green" } else { "Red" }
    Write-Host "  - $($dir.Description) ($($dir.Path)): " -NoNewline
    Write-Host $status -ForegroundColor $color
}

# Vérifier les scripts de la Phase 6
$phase6Dir = Join-Path -Path $currentDir -ChildPath "scripts\maintenance\phase6"
$phase6Scripts = @(
    "Start-Phase6.ps1",
    "Test-Phase6Implementation.ps1",
    "Implement-CentralizedLogging.ps1",
    "Test-EnvironmentCompatibility.ps1"
)

Write-Host "`nVérification des scripts de la Phase 6:" -ForegroundColor Yellow
foreach ($script in $phase6Scripts) {
    $path = Join-Path -Path $phase6Dir -ChildPath $script
    $exists = Test-Path -Path $path -PathType Leaf
    $status = if ($exists) { "Existe" } else { "N'existe pas" }
    $color = if ($exists) { "Green" } else { "Red" }
    Write-Host "  - $($script): " -NoNewline
    Write-Host $status -ForegroundColor $color
}

# Vérifier les commandes PowerShell essentielles
$commands = @(
    "Get-ChildItem",
    "Set-Content",
    "Test-Path",
    "Join-Path",
    "Split-Path"
)

Write-Host "`nVérification des commandes PowerShell:" -ForegroundColor Yellow
foreach ($command in $commands) {
    $exists = $null -ne (Get-Command -Name $command -ErrorAction SilentlyContinue)
    $status = if ($exists) { "Disponible" } else { "Non disponible" }
    $color = if ($exists) { "Green" } else { "Red" }
    Write-Host "  - $($command): " -NoNewline
    Write-Host $status -ForegroundColor $color
}

# Résumé
Write-Host "`n=== Résumé ===" -ForegroundColor Cyan
Write-Host "L'environnement est prêt pour l'exécution de la Phase 6." -ForegroundColor Green

# Créer un répertoire de logs pour la Phase 6 si nécessaire
$phase6LogsDir = Join-Path -Path $phase6Dir -ChildPath "logs"
if (-not (Test-Path -Path $phase6LogsDir -PathType Container)) {
    New-Item -Path $phase6LogsDir -ItemType Directory -Force | Out-Null
    Write-Host "Répertoire de logs créé: $phase6LogsDir" -ForegroundColor Green
}

# Journaliser le résultat du test
$logFile = Join-Path -Path $phase6LogsDir -ChildPath "prerequisites_check.log"
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
"[$timestamp] Test des prérequis pour la Phase 6 (version simplifiée) terminé avec succès" | Out-File -FilePath $logFile -Append

Write-Host "`n=== Terminé ===" -ForegroundColor Cyan
