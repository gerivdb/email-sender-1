#Requires -Version 5.1

<#
.SYNOPSIS
    Valide l'utilisation des verbes approuv√©s PowerShell dans le projet EMAIL_SENDER_1.

.DESCRIPTION
    Ce script analyse tous les fichiers PowerShell du projet pour d√©tecter l'utilisation 
    de verbes non approuv√©s dans les noms de fonctions et propose des corrections.

.PARAMETER Path
    Chemin racine du projet √† analyser. Par d√©faut, utilise le r√©pertoire courant.

.PARAMETER IncludePath
    Chemins sp√©cifiques √† inclure dans l'analyse (patterns de fichiers).

.PARAMETER ExcludePath
    Chemins √† exclure de l'analyse (patterns de fichiers).

.PARAMETER OutputFormat
    Format de sortie : Console, Csv, Json, Html.

.PARAMETER OutputPath
    Chemin de fichier pour sauvegarder le rapport.

.PARAMETER FixIssues
    Si sp√©cifi√©, applique automatiquement les corrections sugg√©r√©es.

.EXAMPLE
    .\Validate-PowerShellApprovedVerbs.ps1
    Analyse le projet actuel et affiche les r√©sultats dans la console.

.EXAMPLE
    .\Validate-PowerShellApprovedVerbs.ps1 -Path "C:\MonProjet" -OutputFormat Csv -OutputPath "rapport.csv"
    Analyse un projet sp√©cifique et sauvegarde le rapport en CSV.

.EXAMPLE
    .\Validate-PowerShellApprovedVerbs.ps1 -FixIssues
    Analyse le projet et applique automatiquement les corrections.

.NOTES
    Auteur: EMAIL_SENDER_1 Team
    Version: 1.0
    Date: 2025-05-24
    D√©pendances: PSScriptAnalyzer (optionnel pour validation avanc√©e)
#>

[CmdletBinding(SupportsShouldProcess)]
[OutputType([System.Object[]])]
param(
    [Parameter(Mandatory = $false)]
    [ValidateScript({ Test-Path -Path $_ -PathType Container })]
    [string]$Path = (Get-Location).Path,

    [Parameter(Mandatory = $false)]
    [string[]]$IncludePath = @("*.ps1", "*.psm1"),

    [Parameter(Mandatory = $false)]
    [string[]]$ExcludePath = @("*\node_modules\*", "*\packages\*", "*\.git\*"),

    [Parameter(Mandatory = $false)]
    [ValidateSet("Console", "Csv", "Json", "Html")]
    [string]$OutputFormat = "Console",

    [Parameter(Mandatory = $false)]
    [string]$OutputPath,

    [Parameter(Mandatory = $false)]
    [switch]$FixIssues
)

# Variables globales du script
$script:ApprovedVerbs = @()
$script:VerbSuggestions = @{}
$script:Issues = @()

#region Functions

function Initialize-ApprovedVerbs {
    <#
    .SYNOPSIS
        Initialise la liste des verbes approuv√©s et les suggestions de correction.
    #>
    [CmdletBinding()]
    param()

    Write-Information "Initialisation de la liste des verbes approuv√©s..." -InformationAction Continue

    try {
        # Obtenir la liste des verbes approuv√©s
        $script:ApprovedVerbs = (Get-Verb).Verb
        Write-Information "‚úÖ $($script:ApprovedVerbs.Count) verbes approuv√©s charg√©s" -InformationAction Continue

        # Dictionnaire des suggestions de correction
        $script:VerbSuggestions = @{
            'Analyze'    = @('Test', 'Measure')
            'Build'      = @('New')
            'Calculate'  = @('Measure')
            'Check'      = @('Test')
            'Create'     = @('New')
            'Delete'     = @('Remove')
            'Deploy'     = @('Install', 'Publish')
            'Destroy'    = @('Remove')
            'Execute'    = @('Invoke')
            'Extract'    = @('Export', 'Get')
            'Fix'        = @('Repair')
            'Generate'   = @('New')
            'Kill'       = @('Stop')
            'Launch'     = @('Start')
            'Load'       = @('Import')
            'Make'       = @('New')
            'Modify'     = @('Set', 'Edit')
            'Retrieve'   = @('Get')
            'Run'        = @('Start', 'Invoke')
            'Validate'   = @('Test')
            'Verify'     = @('Test')
        }

        Write-Information "‚úÖ Suggestions de correction initialis√©es" -InformationAction Continue
    }
    catch {
        Write-Error "‚ùå Erreur lors de l'initialisation des verbes approuv√©s : $_"
        throw
    }
}

function Get-PowerShellFiles {
    <#
    .SYNOPSIS
        R√©cup√®re la liste des fichiers PowerShell √† analyser.
    #>
    [CmdletBinding()]
    param(
        [string]$BasePath,
        [string[]]$Include,
        [string[]]$Exclude
    )

    Write-Information "Recherche des fichiers PowerShell dans '$BasePath'..." -InformationAction Continue

    $files = @()
    
    foreach ($pattern in $Include) {
        $foundFiles = Get-ChildItem -Path $BasePath -Filter $pattern -Recurse -ErrorAction SilentlyContinue
        $files += $foundFiles
    }

    # Appliquer les exclusions
    foreach ($excludePattern in $Exclude) {
        $files = $files | Where-Object { $_.FullName -notlike $excludePattern }
    }

    $files = $files | Sort-Object FullName -Unique

    Write-Information "‚úÖ $($files.Count) fichiers PowerShell trouv√©s" -InformationAction Continue
    return $files
}

function Test-FunctionVerb {
    <#
    .SYNOPSIS
        Teste si une fonction utilise un verbe approuv√©.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string]$FunctionName,
        
        [Parameter(Mandatory = $true)]
        [string]$FilePath,
        
        [Parameter(Mandatory = $true)]
        [int]$LineNumber
    )

    # V√©rifier le format Verbe-Nom
    if ($FunctionName -notmatch '^([A-Z][a-z]+)-(.+)$') {
        return [PSCustomObject]@{
            File = $FilePath
            Function = $FunctionName
            LineNumber = $LineNumber
            Issue = "Format incorrect"
            Description = "La fonction ne suit pas le format 'Verbe-Nom'"
            Verb = $null
            SuggestedVerbs = @()
            Severity = "Error"
        }
    }

    $verb = $Matches[1]
    $noun = $Matches[2]

    # V√©rifier si le verbe est approuv√©
    if ($verb -notin $script:ApprovedVerbs) {
        $suggestions = if ($script:VerbSuggestions.ContainsKey($verb)) { $script:VerbSuggestions[$verb] } else { @() }
        
        return [PSCustomObject]@{
            File = $FilePath
            Function = $FunctionName
            LineNumber = $LineNumber
            Issue = "Verbe non approuv√©"
            Description = "Le verbe '$verb' n'est pas approuv√© par PowerShell"
            Verb = $verb
            Noun = $noun
            SuggestedVerbs = $suggestions
            Severity = "Warning"
        }
    }

    return $null
}

function Find-FunctionDefinitions {
    <#
    .SYNOPSIS
        Trouve toutes les d√©finitions de fonctions dans un fichier PowerShell.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [System.IO.FileInfo]$File
    )

    try {
        $content = Get-Content -Path $File.FullName -Raw -Encoding UTF8
        
        # Pattern pour capturer les d√©finitions de fonctions
        $pattern = '(?im)^\s*function\s+([A-Z][a-zA-Z0-9\-]+)'
        $matches = [regex]::Matches($content, $pattern)

        $functions = @()
        foreach ($match in $matches) {
            $functionName = $match.Groups[1].Value
            $lineNumber = ($content.Substring(0, $match.Index) -split "`n").Count

            $functions += [PSCustomObject]@{
                Name = $functionName
                LineNumber = $lineNumber
                Match = $match
            }
        }

        return $functions
    }
    catch {
        Write-Warning "‚ö†Ô∏è Erreur lors de l'analyse du fichier '$($File.FullName)' : $_"
        return @()
    }
}

function Invoke-FileAnalysis {
    <#
    .SYNOPSIS
        Analyse un fichier PowerShell pour d√©tecter les verbes non approuv√©s.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [System.IO.FileInfo]$File
    )

    Write-Verbose "Analyse du fichier : $($File.FullName)"

    $functions = Find-FunctionDefinitions -File $File
    $issues = @()

    foreach ($function in $functions) {
        $issue = Test-FunctionVerb -FunctionName $function.Name -FilePath $File.FullName -LineNumber $function.LineNumber
        
        if ($issue) {
            $issues += $issue
        }
    }

    return $issues
}

function Repair-FunctionName {
    <#
    .SYNOPSIS
        R√©pare automatiquement le nom d'une fonction avec un verbe non approuv√©.
    #>
    [CmdletBinding(SupportsShouldProcess)]
    param(
        [Parameter(Mandatory = $true)]
        [PSCustomObject]$Issue
    )

    if (-not $Issue.SuggestedVerbs -or $Issue.SuggestedVerbs.Count -eq 0) {
        Write-Warning "‚ö†Ô∏è Aucune suggestion disponible pour la fonction '$($Issue.Function)'"
        return $false
    }

    $suggestedVerb = $Issue.SuggestedVerbs[0]
    $newFunctionName = "$suggestedVerb-$($Issue.Noun)"

    if ($PSCmdlet.ShouldProcess($Issue.File, "Remplacer '$($Issue.Function)' par '$newFunctionName'")) {
        try {
            $content = Get-Content -Path $Issue.File -Raw -Encoding UTF8
            $newContent = $content -replace "function\s+$($Issue.Function)\b", "function $newFunctionName"
            
            Set-Content -Path $Issue.File -Value $newContent -Encoding UTF8
            Write-Information "‚úÖ Fonction '$($Issue.Function)' renomm√©e en '$newFunctionName' dans '$($Issue.File)'" -InformationAction Continue
            return $true
        }
        catch {
            Write-Error "‚ùå Erreur lors de la correction de '$($Issue.Function)' : $_"
            return $false
        }
    }

    return $false
}

function Format-ConsoleOutput {
    <#
    .SYNOPSIS
        Formate la sortie pour l'affichage console.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [System.Object[]]$Issues
    )

    if ($Issues.Count -eq 0) {
        Write-Host "üéâ " -ForegroundColor Green -NoNewline
        Write-Host "Aucun probl√®me de verbe non approuv√© d√©tect√© !" -ForegroundColor Green
        return
    }

    Write-Host "`nüìã " -ForegroundColor Yellow -NoNewline
    Write-Host "R√©sum√© de l'analyse :" -ForegroundColor White

    $groupedIssues = $Issues | Group-Object Severity
    foreach ($group in $groupedIssues) {
        $color = switch ($group.Name) {
            "Error" { "Red" }
            "Warning" { "Yellow" }
            default { "White" }
        }
        Write-Host "  $($group.Name): $($group.Count) probl√®me(s)" -ForegroundColor $color
    }

    Write-Host "`nüîç " -ForegroundColor Cyan -NoNewline
    Write-Host "D√©tails des probl√®mes :" -ForegroundColor White

    foreach ($issue in $Issues) {
        $severityColor = switch ($issue.Severity) {
            "Error" { "Red" }
            "Warning" { "Yellow" }
            default { "White" }
        }

        Write-Host "`nüìÑ " -ForegroundColor Blue -NoNewline
        Write-Host "$($issue.File):$($issue.LineNumber)" -ForegroundColor Blue
        Write-Host "  üî∏ Fonction: " -ForegroundColor Gray -NoNewline
        Write-Host "$($issue.Function)" -ForegroundColor White
        Write-Host "  üî∏ Probl√®me: " -ForegroundColor Gray -NoNewline
        Write-Host "$($issue.Description)" -ForegroundColor $severityColor

        if ($issue.SuggestedVerbs -and $issue.SuggestedVerbs.Count -gt 0) {
            Write-Host "  üí° Suggestions: " -ForegroundColor Gray -NoNewline
            Write-Host "$($issue.SuggestedVerbs -join ', ')" -ForegroundColor Green
        }
    }
}

function Export-Report {
    <#
    .SYNOPSIS
        Exporte le rapport dans le format sp√©cifi√©.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [System.Object[]]$Issues,

        [Parameter(Mandatory = $true)]
        [string]$Format,

        [Parameter(Mandatory = $true)]
        [string]$Path
    )

    switch ($Format) {
        "Csv" {
            $Issues | Export-Csv -Path $Path -NoTypeInformation -Encoding UTF8
            Write-Information "‚úÖ Rapport CSV export√© vers '$Path'" -InformationAction Continue
        }
        "Json" {
            $Issues | ConvertTo-Json -Depth 3 | Set-Content -Path $Path -Encoding UTF8
            Write-Information "‚úÖ Rapport JSON export√© vers '$Path'" -InformationAction Continue
        }
        "Html" {
            $html = ConvertTo-HtmlReport -Issues $Issues
            Set-Content -Path $Path -Value $html -Encoding UTF8
            Write-Information "‚úÖ Rapport HTML export√© vers '$Path'" -InformationAction Continue
        }
    }
}

function ConvertTo-HtmlReport {
    <#
    .SYNOPSIS
        Convertit les issues en rapport HTML.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [System.Object[]]$Issues
    )

    $html = @"
<!DOCTYPE html>
<html>
<head>
    <title>Rapport des Verbes PowerShell - EMAIL_SENDER_1</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f8ff; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .issue { border-left: 4px solid #ffa500; padding: 10px; margin: 10px 0; background-color: #fafafa; }
        .error { border-left-color: #ff4444; }
        .warning { border-left-color: #ffa500; }
        .function-name { font-weight: bold; color: #0066cc; }
        .suggestion { color: #009900; font-style: italic; }
        .file-path { font-family: monospace; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç Rapport d'Analyse des Verbes PowerShell</h1>
        <p>Projet: EMAIL_SENDER_1 | Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    </div>
    
    <div class="summary">
        <h2>üìä R√©sum√©</h2>
        <p>Nombre total de probl√®mes d√©tect√©s: <strong>$($Issues.Count)</strong></p>
    </div>
    
    <div class="issues">
        <h2>üìã D√©tails des Probl√®mes</h2>
"@

    foreach ($issue in $Issues) {
        $cssClass = $issue.Severity.ToLower()
        $suggestions = if ($issue.SuggestedVerbs) { $issue.SuggestedVerbs -join ", " } else { "Aucune suggestion" }
        
        $html += @"
        <div class="issue $cssClass">
            <div class="file-path">üìÑ $($issue.File):$($issue.LineNumber)</div>
            <div>üî∏ Fonction: <span class="function-name">$($issue.Function)</span></div>
            <div>üî∏ Probl√®me: $($issue.Description)</div>
            <div>üí° Suggestions: <span class="suggestion">$suggestions</span></div>
        </div>
"@
    }

    $html += @"
    </div>
</body>
</html>
"@

    return $html
}

#endregion

#region Main Script

try {
    Write-Information "üöÄ D√©marrage de l'analyse des verbes PowerShell approuv√©s" -InformationAction Continue
    Write-Information "üìÅ Chemin d'analyse: $Path" -InformationAction Continue

    # Initialisation
    Initialize-ApprovedVerbs

    # R√©cup√©ration des fichiers
    $files = Get-PowerShellFiles -BasePath $Path -Include $IncludePath -Exclude $ExcludePath

    if ($files.Count -eq 0) {
        Write-Warning "‚ö†Ô∏è Aucun fichier PowerShell trouv√© √† analyser"
        exit 0
    }

    # Analyse des fichiers
    Write-Information "üîç Analyse en cours..." -InformationAction Continue
    $allIssues = @()

    foreach ($file in $files) {
        $issues = Invoke-FileAnalysis -File $file
        $allIssues += $issues
    }

    $script:Issues = $allIssues

    # Application des corrections si demand√©
    if ($FixIssues -and $allIssues.Count -gt 0) {
        Write-Information "üîß Application des corrections automatiques..." -InformationAction Continue
        $fixedCount = 0

        foreach ($issue in $allIssues | Where-Object { $_.SuggestedVerbs.Count -gt 0 }) {
            if (Repair-FunctionName -Issue $issue) {
                $fixedCount++
            }
        }

        Write-Information "‚úÖ $fixedCount correction(s) appliqu√©e(s)" -InformationAction Continue
    }

    # Affichage/Export des r√©sultats
    if ($OutputFormat -eq "Console") {
        Format-ConsoleOutput -Issues $allIssues
    }

    if ($OutputPath) {
        Export-Report -Issues $allIssues -Format $OutputFormat -Path $OutputPath
    }

    # Code de sortie
    $exitCode = if ($allIssues.Count -eq 0) { 0 } else { 1 }
    Write-Information "üèÅ Analyse termin√©e avec le code de sortie: $exitCode" -InformationAction Continue
    
    return $allIssues
}
catch {
    Write-Error "‚ùå Erreur fatale lors de l'analyse : $_"
    exit 2
}

#endregion
