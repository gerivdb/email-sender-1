# Comparaison des performances entre version originale et modulaire
param(
    [string]$TestPath = "."
)

Write-Host "üî¨ Comparaison des versions Original vs Modulaire" -ForegroundColor Magenta
Write-Host "=" * 60 -ForegroundColor Magenta

# Test version originale (archiv√©e)
Write-Host "`nüìä Version ORIGINALE (archiv√©e):" -ForegroundColor Cyan
$originalStart = Get-Date
try {
    $originalResult = & ".\archive\legacy-versions\Fix-PowerShellFunctionNames.ps1" -Path $TestPath -DryRun 2>&1
    $originalEnd = Get-Date
    $originalDuration = ($originalEnd - $originalStart).TotalSeconds
    $originalSuccess = $true
} catch {
    $originalDuration = -1
    $originalSuccess = $false
    Write-Host "‚ùå Erreur dans la version originale: $($_.Exception.Message)" -ForegroundColor Red
}

# Test version modulaire
Write-Host "`nüìä Version MODULAIRE:" -ForegroundColor Cyan
$modularStart = Get-Date
try {
    $modularResult = & ".\Fix-PowerShellFunctionNames-Modular.ps1" -Path $TestPath -DryRun 2>&1
    $modularEnd = Get-Date
    $modularDuration = ($modularEnd - $modularStart).TotalSeconds
    $modularSuccess = $true
} catch {
    $modularDuration = -1
    $modularSuccess = $false
    Write-Host "‚ùå Erreur dans la version modulaire: $($_.Exception.Message)" -ForegroundColor Red
}

# Comparaison des r√©sultats
Write-Host "`nüìà R√âSULTATS DE COMPARAISON:" -ForegroundColor Magenta
Write-Host "=" * 40 -ForegroundColor Magenta

$comparisonData = @(
    [PSCustomObject]@{
        Aspect = "Succ√®s d'ex√©cution"
        Original = if ($originalSuccess) { "‚úÖ Oui" } else { "‚ùå Non" }
        Modulaire = if ($modularSuccess) { "‚úÖ Oui" } else { "‚ùå Non" }
        Am√©lioration = if ($modularSuccess -and -not $originalSuccess) { "üöÄ Corrig√©" } elseif ($modularSuccess -eq $originalSuccess) { "‚û°Ô∏è Identique" } else { "‚ö†Ô∏è R√©gression" }
    }
    [PSCustomObject]@{
        Aspect = "Temps d'ex√©cution (sec)"
        Original = if ($originalDuration -gt 0) { "{0:F2}" -f $originalDuration } else { "N/A" }
        Modulaire = if ($modularDuration -gt 0) { "{0:F2}" -f $modularDuration } else { "N/A" }
        Am√©lioration = if ($originalDuration -gt 0 -and $modularDuration -gt 0) {
            $improvement = (($originalDuration - $modularDuration) / $originalDuration) * 100
            if ($improvement -gt 5) { "üöÄ {0:F1}% plus rapide" -f $improvement }
            elseif ($improvement -lt -5) { "‚ö†Ô∏è {0:F1}% plus lent" -f [math]::Abs($improvement) }
            else { "‚û°Ô∏è Similaire" }
        } else { "N/A" }
    }
)

$comparisonData | Format-Table -AutoSize

# Analyse des fonctionnalit√©s
Write-Host "`nüîç ANALYSE DES FONCTIONNALIT√âS:" -ForegroundColor Magenta

$features = @(
    @{ Feature = "Architecture modulaire"; Original = "‚ùå"; Modular = "‚úÖ" }
    @{ Feature = "R√©utilisabilit√© des composants"; Original = "‚ùå"; Modular = "‚úÖ" }
    @{ Feature = "Gestion d'erreur robuste"; Original = "‚ö†Ô∏è"; Modular = "‚úÖ" }
    @{ Feature = "Cache des verbes approuv√©s"; Original = "‚ùå"; Modular = "‚úÖ" }
    @{ Feature = "API coh√©rente"; Original = "‚ùå"; Modular = "‚úÖ" }
    @{ Feature = "Tests unitaires possibles"; Original = "‚ùå"; Modular = "‚úÖ" }
    @{ Feature = "Documentation compl√®te"; Original = "‚ö†Ô∏è"; Modular = "‚úÖ" }
    @{ Feature = "Extensibilit√©"; Original = "‚ùå"; Modular = "‚úÖ" }
)

foreach ($feature in $features) {
    Write-Host "  $($feature.Feature):" -ForegroundColor White
    Write-Host "    Original: $($feature.Original)  |  Modulaire: $($feature.Modular)" -ForegroundColor Gray
}

# M√©triques de code
Write-Host "`nüìè M√âTRIQUES DE CODE:" -ForegroundColor Magenta

$originalFile = "archive\legacy-versions\Fix-PowerShellFunctionNames.ps1"
$modularMainFile = "Fix-PowerShellFunctionNames-Modular.ps1"
$verbMappingFile = "modules\PowerShellVerbMapping\PowerShellVerbMapping.psm1"
$validatorFile = "modules\PowerShellFunctionValidator\PowerShellFunctionValidator.psm1"

if (Test-Path $originalFile) {
    $originalLines = (Get-Content $originalFile).Count
    Write-Host "  Script original: $originalLines lignes" -ForegroundColor White
}

if (Test-Path $modularMainFile) {
    $modularMainLines = (Get-Content $modularMainFile).Count
    Write-Host "  Script principal modulaire: $modularMainLines lignes" -ForegroundColor White
}

if (Test-Path $verbMappingFile) {
    $verbMappingLines = (Get-Content $verbMappingFile).Count
    Write-Host "  Module VerbMapping: $verbMappingLines lignes" -ForegroundColor White
}

if (Test-Path $validatorFile) {
    $validatorLines = (Get-Content $validatorFile).Count
    Write-Host "  Module Validator: $validatorLines lignes" -ForegroundColor White
}

$totalModularLines = $modularMainLines + $verbMappingLines + $validatorLines
Write-Host "  Total modulaire: $totalModularLines lignes" -ForegroundColor Cyan

if ($originalLines -gt 0) {
    $lineIncrease = (($totalModularLines - $originalLines) / $originalLines) * 100
    Write-Host ("  Augmentation: {0:F1}% (pour une meilleure structure)" -f $lineIncrease) -ForegroundColor Yellow
}

Write-Host "`nüéØ CONCLUSION:" -ForegroundColor Magenta
Write-Host "La version modulaire offre:" -ForegroundColor White
Write-Host "  ‚úÖ Une architecture plus maintenable" -ForegroundColor Green
Write-Host "  ‚úÖ Une r√©utilisabilit√© accrue des composants" -ForegroundColor Green
Write-Host "  ‚úÖ Une meilleure s√©paration des responsabilit√©s" -ForegroundColor Green
Write-Host "  ‚úÖ Une extensibilit√© pour de futures am√©liorations" -ForegroundColor Green
Write-Host "  ‚úÖ Une correction des probl√®mes de syntaxe de l'original" -ForegroundColor Green
