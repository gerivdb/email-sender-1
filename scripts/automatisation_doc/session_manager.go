// scripts/automatisation_doc/session_manager.go
//
// üìù Checklist actionnable Roo Code (Phase 3 - Automatisation documentaire)
// - [ ] D√©finir l‚Äôinterface SessionManagerInterface (m√©thodes principales, hooks, extension future)
// - [ ] Impl√©menter la struct SessionManager (√©tat, d√©pendances, configuration, hooks)
// - [ ] Ajouter les hooks d‚Äôextension (avant/apr√®s session, gestion d‚Äô√©v√©nements, erreurs)
// - [ ] Documenter chaque m√©thode et struct (GoDoc, usage, TODO pour chaque sous-√©tape du plan)
// - [ ] Pr√©voir les points d‚Äôint√©gration avec ErrorManager, PipelineManager, etc. (TODO)
// - [ ] Centraliser la gestion des erreurs et la tra√ßabilit√© (TODO)
// - [ ] Rendre le manager testable et extensible (TODO)
// - [ ] Synchroniser la documentation avec le plan phase 3 et AGENTS.md
//
// üîó R√©f√©rences crois√©es‚ÄØ:
// - [plan-dev-v113-autmatisation-doc-roo.md](../projet/roadmaps/plans/consolidated/plan-dev-v113-autmatisation-doc-roo.md)
// - [AGENTS.md](../../AGENTS.md)
// - [rules-code.md](../../.roo/rules/rules-code.md)
//
// TODO‚ÄØ: Compl√©ter chaque m√©thode selon la granularit√© du plan d√©taill√© phase 3.

package automatisation_doc

import (
	"context"
)

// SessionManagerInterface d√©finit le contrat pour la gestion des sessions d‚Äôautomatisation documentaire Roo Code.
type SessionManagerInterface interface {
	// Init initialise la session avec le contexte et la configuration.
	Init(ctx context.Context, config SessionConfig) error
	// Start d√©marre une nouvelle session documentaire.
	Start(ctx context.Context) error
	// End termine proprement la session et d√©clenche les hooks de fin.
	End(ctx context.Context) error
	// RegisterHook permet d‚Äôajouter dynamiquement un hook d‚Äôextension.
	RegisterHook(hook SessionHook)
	// TODO: Ajouter les m√©thodes de gestion d‚Äô√©tat, de rollback, de reporting, etc.
}

// SessionConfig structure la configuration d‚Äôune session documentaire.
type SessionConfig struct {
	// TODO: Ajouter les champs de configuration (ID, m√©tadonn√©es, options, etc.)
	SessionID string
	// ...
}

// SessionHook d√©finit la signature d‚Äôun hook d‚Äôextension pour les √©v√©nements de session.
type SessionHook func(event SessionEvent) error

// SessionEvent repr√©sente un √©v√©nement du cycle de vie d‚Äôune session.
type SessionEvent struct {
	Type    string      // ex: "start", "end", "error"
	Payload interface{} // donn√©es associ√©es √† l‚Äô√©v√©nement
}

/*
SessionManager impl√©mente la gestion des sessions d‚Äôautomatisation documentaire Roo Code.
Ajout de la gestion des hooks de persistance typ√©s‚ÄØ: BeforePersist, AfterPersist, OnPersistError.
Injection possible via RegisterPersistenceHook.
Tra√ßabilit√© stricte‚ÄØ: chaque hook re√ßoit un √©v√©nement SessionEvent typ√© ("before_persist", "after_persist", "persist_error").
*/
type PersistenceHookType int

const (
	BeforePersistHook PersistenceHookType = iota
	AfterPersistHook
	OnPersistErrorHook
)

/*
// PersistenceEngine d√©finit le contrat d‚Äôabstraction pour la persistance des sessions Roo Code.
// Cette interface permet d‚Äôinjecter dynamiquement une impl√©mentation concr√®te (base de donn√©es, mock, etc.)
// afin de garantir la testabilit√©, la tra√ßabilit√© et la simulation d‚Äôerreurs lors des tests unitaires.
// √Ä utiliser pour tout besoin de persistance ou de simulation dans SessionManager.
PersistenceEngine d√©finit l‚Äôinterface pour la persistance de session (injection/mocking possible).
*/
type PersistenceEngine interface {
	Persist(ctx context.Context, config SessionConfig) error
}

type PersistenceHook struct {
	Type PersistenceHookType
	Hook SessionHook
}

/*
SessionPersistencePlugin d√©finit le contrat Roo pour un plugin de persistance session.
Chaque plugin doit exposer un nom unique, un type de hook (Before/After/Error), et la fonction hook √† ex√©cuter.
Permet l‚Äôextension dynamique du manager via PluginInterface Roo.
*/
type SessionPersistencePlugin interface {
	// Name retourne le nom unique du plugin (pour la tra√ßabilit√© et la gestion dynamique).
	Name() string
	// Type retourne le type de hook g√©r√© par ce plugin (BeforePersistHook, AfterPersistHook, OnPersistErrorHook).
	Type() PersistenceHookType
	// Hook retourne la fonction SessionHook √† ex√©cuter.
	Hook() SessionHook
}

type SessionManager struct {
	config           SessionConfig
	hooks            []SessionHook
	persistenceHooks []PersistenceHook
	persistence      PersistenceEngine // Injection de la d√©pendance

	// plugins de persistance dynamiques Roo (registre)
	persistencePlugins map[string]SessionPersistencePlugin // cl√© = nom unique du plugin

	// TODO: Ajouter les champs d‚Äô√©tat, d√©pendances (ErrorManager, PipelineManager, etc.), logs, etc.
}

/*
NewSessionManager cr√©e une nouvelle instance de SessionManager.
Initialise les hooks de persistance.
Permet d‚Äôinjecter un PersistenceEngine‚ÄØ: si nil, la persistance est simul√©e (aucune erreur).
*/
/*
NewSessionManager cr√©e une nouvelle instance de SessionManager.
Initialise les hooks de persistance et le registre dynamique de plugins Roo.
Permet d‚Äôinjecter un PersistenceEngine‚ÄØ: si nil, la persistance est simul√©e (aucune erreur).
*/
func NewSessionManager(config SessionConfig, persistence PersistenceEngine) *SessionManager {
	return &SessionManager{
		config:             config,
		hooks:              make([]SessionHook, 0),
		persistenceHooks:   make([]PersistenceHook, 0),
		persistence:        persistence,
		persistencePlugins: make(map[string]SessionPersistencePlugin),
	}
}

// Init initialise la session avec le contexte et la configuration.
func (sm *SessionManager) Init(ctx context.Context, config SessionConfig) error {
	// TODO: Initialiser l‚Äô√©tat, charger la configuration, pr√©parer les hooks.
	sm.config = config
	return nil
}

// Start d√©marre une nouvelle session documentaire.
func (sm *SessionManager) Start(ctx context.Context) error {
	// TODO: Impl√©menter la logique de d√©marrage, d√©clencher les hooks "start".
	for _, hook := range sm.hooks {
		if err := hook(SessionEvent{Type: "start", Payload: sm.config}); err != nil {
			// TODO: Centraliser la gestion des erreurs via ErrorManager.
			return err
		}
	}
	return nil
}

// End termine proprement la session et d√©clenche les hooks de fin.
func (sm *SessionManager) End(ctx context.Context) error {
	// TODO: Impl√©menter la logique de terminaison, d√©clencher les hooks "end".
	for _, hook := range sm.hooks {
		if err := hook(SessionEvent{Type: "end", Payload: sm.config}); err != nil {
			// TODO: Centraliser la gestion des erreurs via ErrorManager.
			return err
		}
	}
	return nil
}

// RegisterHook permet d‚Äôajouter dynamiquement un hook d‚Äôextension.
func (sm *SessionManager) RegisterHook(hook SessionHook) {
	sm.hooks = append(sm.hooks, hook)
}

/*
RegisterPersistenceHook permet d‚Äôinjecter dynamiquement un hook de persistance typ√© (h√©ritage historique).
Pr√©f√©rer l‚Äôutilisation de RegisterPersistencePlugin pour la tra√ßabilit√© Roo.
Exemple‚ÄØ: sm.RegisterPersistenceHook(BeforePersistHook, myHook)
*/
func (sm *SessionManager) RegisterPersistenceHook(hookType PersistenceHookType, hook SessionHook) {
	sm.persistenceHooks = append(sm.persistenceHooks, PersistenceHook{Type: hookType, Hook: hook})
}

/*
RegisterPersistencePlugin ajoute dynamiquement un plugin de persistance Roo au registre.
Si un plugin du m√™me nom existe d√©j√†, il est remplac√©.
Tra√ßabilit√© Roo‚ÄØ: chaque ajout/retrait est logg√© (TODO: int√©grer ErrorManager/logs).
*/
func (sm *SessionManager) RegisterPersistencePlugin(plugin SessionPersistencePlugin) {
	if sm.persistencePlugins == nil {
		sm.persistencePlugins = make(map[string]SessionPersistencePlugin)
	}
	sm.persistencePlugins[plugin.Name()] = plugin
}

/*
UnregisterPersistencePlugin retire dynamiquement un plugin de persistance Roo du registre.
Retourne true si le plugin existait et a √©t√© supprim√©, false sinon.
*/
func (sm *SessionManager) UnregisterPersistencePlugin(name string) bool {
	if sm.persistencePlugins == nil {
		return false
	}
	if _, ok := sm.persistencePlugins[name]; ok {
		delete(sm.persistencePlugins, name)
		return true
	}
	return false
}

/*
ListPersistencePlugins retourne la liste des plugins de persistance Roo actuellement enregistr√©s.
Permet l‚Äôaudit, la tra√ßabilit√© et l‚Äôinspection dynamique.
*/
func (sm *SessionManager) ListPersistencePlugins() []SessionPersistencePlugin {
	plugins := make([]SessionPersistencePlugin, 0, len(sm.persistencePlugins))
	for _, p := range sm.persistencePlugins {
		plugins = append(plugins, p)
	}
	return plugins
}

// persist effectue la persistance de la session en respectant la granularit√© Roo Code‚ÄØ:
// - D√©clenche les hooks BeforePersist
// - Effectue la persistance via PersistenceEngine (mockable)
// - D√©clenche les hooks AfterPersist ou OnPersistError selon le r√©sultat
// - Tra√ßabilit√© stricte via SessionEvent.Type
func (sm *SessionManager) persist(ctx context.Context) error {
	// 1. Hooks BeforePersist
	for _, h := range sm.persistenceHooks {
		if h.Type == BeforePersistHook {
			if err := h.Hook(SessionEvent{Type: "before_persist", Payload: sm.config}); err != nil {
				return err
			}
		}
	}
	// 2. Persistance r√©elle via PersistenceEngine (mockable)
	var persistErr error
	if sm.persistence != nil {
		persistErr = sm.persistence.Persist(ctx, sm.config)
	}
	// Si pas de persistence inject√©e, on simule une r√©ussite (persistErr = nil)

	// 3. Hooks AfterPersist ou OnPersistError
	if persistErr == nil {
		for _, h := range sm.persistenceHooks {
			if h.Type == AfterPersistHook {
				if err := h.Hook(SessionEvent{Type: "after_persist", Payload: sm.config}); err != nil {
					return err
				}
			}
		}
	} else {
		for _, h := range sm.persistenceHooks {
			if h.Type == OnPersistErrorHook {
				_ = h.Hook(SessionEvent{Type: "persist_error", Payload: persistErr})
			}
		}
		return persistErr
	}
	return nil
}

/*
Documentation technique¬†:

- L‚Äôinterface [`PersistenceEngine`](scripts/automatisation_doc/session_manager.go:74) permet d‚Äôinjecter une logique de persistance mockable/testable dans [`SessionManager`](scripts/automatisation_doc/session_manager.go:74).
- Le champ `persistence` de [`SessionManager`](scripts/automatisation_doc/session_manager.go:74) doit √™tre initialis√© via [`NewSessionManager`](scripts/automatisation_doc/session_manager.go:86).
- Pour les tests unitaires, injecter un mock impl√©mentant `PersistenceEngine` afin de simuler succ√®s/erreur et d√©clencher tous les hooks (`BeforePersist`, `AfterPersist`, `OnPersistError`).
- Voir la checklist Roo Code phase 3 et AGENTS.md pour l‚Äôalignement sur les standards d‚Äôextension et de testabilit√©.

TODO: Ajouter les m√©thodes de gestion d‚Äô√©tat, rollback, reporting, int√©gration ErrorManager, etc.
*/
